
Quest5_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b638  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800b838  0800b838  0000c838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcbc  0800bcbc  0000d318  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bcbc  0800bcbc  0000ccbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcc4  0800bcc4  0000d318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcc4  0800bcc4  0000ccc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bcc8  0800bcc8  0000ccc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bccc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d8  0800bea4  0000d1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000278  0800bf44  0000d278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000052b0  20000318  0800bfe4  0000d318  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  200055c8  0800bfe4  0000d5c8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000d318  2**0
                  CONTENTS, READONLY
 14 .debug_info   000240e4  00000000  00000000  0000d346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004703  00000000  00000000  0003142a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c10  00000000  00000000  00035b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015d5  00000000  00000000  00037740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005641  00000000  00000000  00038d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021071  00000000  00000000  0003e356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00115497  00000000  00000000  0005f3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017485e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000086b8  00000000  00000000  001748a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  0017cf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000318 	.word	0x20000318
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b820 	.word	0x0800b820

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000031c 	.word	0x2000031c
 800023c:	0800b820 	.word	0x0800b820

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <Convert_ADC>:
double ADC_Samples [10] = {0};

int Flag_State = 0;

double Convert_ADC(uint16_t x, float in_min, float in_max, float out_min, float out_max)
{
 800061c:	b480      	push	{r7}
 800061e:	b087      	sub	sp, #28
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	ed87 0a04 	vstr	s0, [r7, #16]
 8000628:	edc7 0a03 	vstr	s1, [r7, #12]
 800062c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000630:	edc7 1a01 	vstr	s3, [r7, #4]
 8000634:	82fb      	strh	r3, [r7, #22]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000636:	8afb      	ldrh	r3, [r7, #22]
 8000638:	ee07 3a90 	vmov	s15, r3
 800063c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000640:	edd7 7a04 	vldr	s15, [r7, #16]
 8000644:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000648:	edd7 6a01 	vldr	s13, [r7, #4]
 800064c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000650:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000654:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000658:	ed97 7a03 	vldr	s14, [r7, #12]
 800065c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000668:	edd7 7a02 	vldr	s15, [r7, #8]
 800066c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000670:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
}
 8000674:	eeb0 0b47 	vmov.f64	d0, d7
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f000 fee3 	bl	8001452 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f852 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 f9c0 	bl	8000a14 <MX_GPIO_Init>
  MX_ETH_Init();
 8000694:	f000 f912 	bl	80008bc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000698:	f000 f95e 	bl	8000958 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800069c:	f000 f98c 	bl	80009b8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80006a0:	f000 f8ba 	bl	8000818 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006a4:	f004 feae 	bl	8005404 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemCalc */
  SemCalcHandle = osSemaphoreNew(1, 0, &SemCalc_attributes);
 80006a8:	4a15      	ldr	r2, [pc, #84]	@ (8000700 <main+0x7c>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	2001      	movs	r0, #1
 80006ae:	f004 ffe7 	bl	8005680 <osSemaphoreNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a13      	ldr	r2, [pc, #76]	@ (8000704 <main+0x80>)
 80006b6:	6013      	str	r3, [r2, #0]

  /* creation of SemSend */
  SemSendHandle = osSemaphoreNew(1, 0, &SemSend_attributes);
 80006b8:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <main+0x84>)
 80006ba:	2100      	movs	r1, #0
 80006bc:	2001      	movs	r0, #1
 80006be:	f004 ffdf 	bl	8005680 <osSemaphoreNew>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a11      	ldr	r2, [pc, #68]	@ (800070c <main+0x88>)
 80006c6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskCalc */
  TaskCalcHandle = osThreadNew(StartTaskCalc, NULL, &TaskCalc_attributes);
 80006c8:	4a11      	ldr	r2, [pc, #68]	@ (8000710 <main+0x8c>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	4811      	ldr	r0, [pc, #68]	@ (8000714 <main+0x90>)
 80006ce:	f004 ff03 	bl	80054d8 <osThreadNew>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a10      	ldr	r2, [pc, #64]	@ (8000718 <main+0x94>)
 80006d6:	6013      	str	r3, [r2, #0]

  /* creation of TaskADC */
  TaskADCHandle = osThreadNew(StartTaskADC, NULL, &TaskADC_attributes);
 80006d8:	4a10      	ldr	r2, [pc, #64]	@ (800071c <main+0x98>)
 80006da:	2100      	movs	r1, #0
 80006dc:	4810      	ldr	r0, [pc, #64]	@ (8000720 <main+0x9c>)
 80006de:	f004 fefb 	bl	80054d8 <osThreadNew>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000724 <main+0xa0>)
 80006e6:	6013      	str	r3, [r2, #0]

  /* creation of TaskSend */
  TaskSendHandle = osThreadNew(StartTaskSend, NULL, &TaskSend_attributes);
 80006e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000728 <main+0xa4>)
 80006ea:	2100      	movs	r1, #0
 80006ec:	480f      	ldr	r0, [pc, #60]	@ (800072c <main+0xa8>)
 80006ee:	f004 fef3 	bl	80054d8 <osThreadNew>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000730 <main+0xac>)
 80006f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f8:	f004 feb8 	bl	800546c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <main+0x78>
 8000700:	0800b90c 	.word	0x0800b90c
 8000704:	200009d8 	.word	0x200009d8
 8000708:	0800b91c 	.word	0x0800b91c
 800070c:	200009dc 	.word	0x200009dc
 8000710:	0800b8a0 	.word	0x0800b8a0
 8000714:	08000b9d 	.word	0x08000b9d
 8000718:	200009cc 	.word	0x200009cc
 800071c:	0800b8c4 	.word	0x0800b8c4
 8000720:	08000c1d 	.word	0x08000c1d
 8000724:	200009d0 	.word	0x200009d0
 8000728:	0800b8e8 	.word	0x0800b8e8
 800072c:	08000cad 	.word	0x08000cad
 8000730:	200009d4 	.word	0x200009d4

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	@ 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2234      	movs	r2, #52	@ 0x34
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f008 ffb1 	bl	80096aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000758:	f002 fa2c 	bl	8002bb4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <SystemClock_Config+0xdc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	4a2b      	ldr	r2, [pc, #172]	@ (8000810 <SystemClock_Config+0xdc>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	@ 0x40
 8000768:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <SystemClock_Config+0xdc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000774:	4b27      	ldr	r3, [pc, #156]	@ (8000814 <SystemClock_Config+0xe0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800077c:	4a25      	ldr	r2, [pc, #148]	@ (8000814 <SystemClock_Config+0xe0>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <SystemClock_Config+0xe0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000798:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007a8:	2360      	movs	r3, #96	@ 0x60
 80007aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b0:	2304      	movs	r3, #4
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fa59 	bl	8002c74 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007c8:	f000 faa4 	bl	8000d14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007cc:	f002 fa02 	bl	8002bd4 <HAL_PWREx_EnableOverDrive>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007d6:	f000 fa9d 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	2103      	movs	r1, #3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fcea 	bl	80031d0 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000802:	f000 fa87 	bl	8000d14 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	@ 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800082a:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <MX_ADC1_Init+0x98>)
 800082c:	4a21      	ldr	r2, [pc, #132]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 800082e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000830:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <MX_ADC1_Init+0x98>)
 8000832:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000836:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000838:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <MX_ADC1_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800083e:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <MX_ADC1_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000844:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_ADC1_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <MX_ADC1_Init+0x98>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_ADC1_Init+0x98>)
 8000854:	2200      	movs	r2, #0
 8000856:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_ADC1_Init+0x98>)
 800085a:	4a17      	ldr	r2, [pc, #92]	@ (80008b8 <MX_ADC1_Init+0xa0>)
 800085c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_ADC1_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_ADC1_Init+0x98>)
 8000866:	2201      	movs	r2, #1
 8000868:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_ADC1_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_ADC1_Init+0x98>)
 8000874:	2201      	movs	r2, #1
 8000876:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000878:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <MX_ADC1_Init+0x98>)
 800087a:	f000 fe3b 	bl	80014f4 <HAL_ADC_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000884:	f000 fa46 	bl	8000d14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000888:	2303      	movs	r3, #3
 800088a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800088c:	2301      	movs	r3, #1
 800088e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_ADC1_Init+0x98>)
 800089a:	f000 ffd5 	bl	8001848 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008a4:	f000 fa36 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000036c 	.word	0x2000036c
 80008b4:	40012000 	.word	0x40012000
 80008b8:	0f000001 	.word	0x0f000001

080008bc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_ETH_Init+0x84>)
 80008c2:	4a20      	ldr	r2, [pc, #128]	@ (8000944 <MX_ETH_Init+0x88>)
 80008c4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008c6:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <MX_ETH_Init+0x8c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <MX_ETH_Init+0x8c>)
 80008ce:	2280      	movs	r2, #128	@ 0x80
 80008d0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_ETH_Init+0x8c>)
 80008d4:	22e1      	movs	r2, #225	@ 0xe1
 80008d6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_ETH_Init+0x8c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_ETH_Init+0x8c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_ETH_Init+0x8c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_ETH_Init+0x84>)
 80008ec:	4a16      	ldr	r2, [pc, #88]	@ (8000948 <MX_ETH_Init+0x8c>)
 80008ee:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <MX_ETH_Init+0x84>)
 80008f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80008f6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008f8:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_ETH_Init+0x84>)
 80008fa:	4a14      	ldr	r2, [pc, #80]	@ (800094c <MX_ETH_Init+0x90>)
 80008fc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <MX_ETH_Init+0x84>)
 8000900:	4a13      	ldr	r2, [pc, #76]	@ (8000950 <MX_ETH_Init+0x94>)
 8000902:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000904:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_ETH_Init+0x84>)
 8000906:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800090a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800090c:	480c      	ldr	r0, [pc, #48]	@ (8000940 <MX_ETH_Init+0x84>)
 800090e:	f001 fad1 	bl	8001eb4 <HAL_ETH_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000918:	f000 f9fc 	bl	8000d14 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800091c:	2238      	movs	r2, #56	@ 0x38
 800091e:	2100      	movs	r1, #0
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <MX_ETH_Init+0x98>)
 8000922:	f008 fec2 	bl	80096aa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <MX_ETH_Init+0x98>)
 8000928:	2221      	movs	r2, #33	@ 0x21
 800092a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <MX_ETH_Init+0x98>)
 800092e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000932:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000934:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <MX_ETH_Init+0x98>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200003b4 	.word	0x200003b4
 8000944:	40028000 	.word	0x40028000
 8000948:	20000a40 	.word	0x20000a40
 800094c:	20000278 	.word	0x20000278
 8000950:	200001d8 	.word	0x200001d8
 8000954:	20000334 	.word	0x20000334

08000958 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 800095e:	4a15      	ldr	r2, [pc, #84]	@ (80009b4 <MX_USART3_UART_Init+0x5c>)
 8000960:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 800099c:	f003 fd66 	bl	800446c <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009a6:	f000 f9b5 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000464 	.word	0x20000464
 80009b4:	40004800 	.word	0x40004800

080009b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2206      	movs	r2, #6
 80009c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2202      	movs	r2, #2
 80009da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2201      	movs	r2, #1
 80009e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fc:	f001 ffa0 	bl	8002940 <HAL_PCD_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 f985 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200004ec 	.word	0x200004ec

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	@ 0x30
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b48      	ldr	r3, [pc, #288]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	4b45      	ldr	r3, [pc, #276]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a44      	ldr	r2, [pc, #272]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b42      	ldr	r3, [pc, #264]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b3c      	ldr	r3, [pc, #240]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b39      	ldr	r3, [pc, #228]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a38      	ldr	r2, [pc, #224]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b36      	ldr	r3, [pc, #216]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	4b33      	ldr	r3, [pc, #204]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a32      	ldr	r2, [pc, #200]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b30      	ldr	r3, [pc, #192]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b2a      	ldr	r3, [pc, #168]	@ (8000b58 <MX_GPIO_Init+0x144>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ac0:	4826      	ldr	r0, [pc, #152]	@ (8000b5c <MX_GPIO_Init+0x148>)
 8000ac2:	f001 fef1 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	@ 0x40
 8000aca:	4825      	ldr	r0, [pc, #148]	@ (8000b60 <MX_GPIO_Init+0x14c>)
 8000acc:	f001 feec 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481f      	ldr	r0, [pc, #124]	@ (8000b64 <MX_GPIO_Init+0x150>)
 8000ae8:	f001 fd32 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aec:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4815      	ldr	r0, [pc, #84]	@ (8000b5c <MX_GPIO_Init+0x148>)
 8000b06:	f001 fd23 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b0a:	2340      	movs	r3, #64	@ 0x40
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480f      	ldr	r0, [pc, #60]	@ (8000b60 <MX_GPIO_Init+0x14c>)
 8000b22:	f001 fd15 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b26:	2380      	movs	r3, #128	@ 0x80
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <MX_GPIO_Init+0x14c>)
 8000b3a:	f001 fd09 	bl	8002550 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2105      	movs	r1, #5
 8000b42:	2028      	movs	r0, #40	@ 0x28
 8000b44:	f001 f98c 	bl	8001e60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b48:	2028      	movs	r0, #40	@ 0x28
 8000b4a:	f001 f9a5 	bl	8001e98 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b4e:	bf00      	nop
 8000b50:	3730      	adds	r7, #48	@ 0x30
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020400 	.word	0x40020400
 8000b60:	40021800 	.word	0x40021800
 8000b64:	40020800 	.word	0x40020800

08000b68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
	if(pin == USER_Btn_Pin)
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b78:	d107      	bne.n	8000b8a <HAL_GPIO_EXTI_Callback+0x22>
	{
		Flag_State = 1;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b84:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <HAL_GPIO_EXTI_Callback+0x30>)
 8000b86:	f001 fea8 	bl	80028da <HAL_GPIO_TogglePin>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000a30 	.word	0x20000a30
 8000b98:	40020400 	.word	0x40020400

08000b9c <StartTaskCalc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskCalc */
void StartTaskCalc(void *argument)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	double sum = 0;
 8000ba4:	f04f 0200 	mov.w	r2, #0
 8000ba8:	f04f 0300 	mov.w	r3, #0
 8000bac:	e9c7 2304 	strd	r2, r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemCalcHandle, osWaitForever);
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <StartTaskCalc+0x70>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 fdfd 	bl	80057b8 <osSemaphoreAcquire>

	  for (int i = 0; i<=10; i++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	e00e      	b.n	8000be2 <StartTaskCalc+0x46>
	  {
		  sum = ADC_Samples[i] + sum;
 8000bc4:	4a12      	ldr	r2, [pc, #72]	@ (8000c10 <StartTaskCalc+0x74>)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	4413      	add	r3, r2
 8000bcc:	ed93 7b00 	vldr	d7, [r3]
 8000bd0:	ed97 6b04 	vldr	d6, [r7, #16]
 8000bd4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000bd8:	ed87 7b04 	vstr	d7, [r7, #16]
	  for (int i = 0; i<=10; i++)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2b0a      	cmp	r3, #10
 8000be6:	dded      	ble.n	8000bc4 <StartTaskCalc+0x28>
	  }

	  med =  sum/10;
 8000be8:	ed97 6b04 	vldr	d6, [r7, #16]
 8000bec:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8000bf0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bf4:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <StartTaskCalc+0x78>)
 8000bf6:	ed83 7b00 	vstr	d7, [r3]

	  osSemaphoreRelease(SemSendHandle);
 8000bfa:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <StartTaskCalc+0x7c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f004 fe40 	bl	8005884 <osSemaphoreRelease>

    osDelay(100);
 8000c04:	2064      	movs	r0, #100	@ 0x64
 8000c06:	f004 fd0d 	bl	8005624 <osDelay>
	  osSemaphoreAcquire(SemCalcHandle, osWaitForever);
 8000c0a:	e7d1      	b.n	8000bb0 <StartTaskCalc+0x14>
 8000c0c:	200009d8 	.word	0x200009d8
 8000c10:	200009e0 	.word	0x200009e0
 8000c14:	20000a38 	.word	0x20000a38
 8000c18:	200009dc 	.word	0x200009dc

08000c1c <StartTaskADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskADC */
void StartTaskADC(void *argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskADC */
	uint16_t adc_value;
/* Infinite loop */
  for(;;)
  {
	if (Flag_State == 1)
 8000c24:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <StartTaskADC+0x74>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d128      	bne.n	8000c7e <StartTaskADC+0x62>
	{
		for(int i = 0; i<=10; i++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	e022      	b.n	8000c78 <StartTaskADC+0x5c>
		{
			HAL_ADC_Start(&hadc1);
 8000c32:	4818      	ldr	r0, [pc, #96]	@ (8000c94 <StartTaskADC+0x78>)
 8000c34:	f000 fca2 	bl	800157c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 10);
 8000c38:	210a      	movs	r1, #10
 8000c3a:	4816      	ldr	r0, [pc, #88]	@ (8000c94 <StartTaskADC+0x78>)
 8000c3c:	f000 fd6c 	bl	8001718 <HAL_ADC_PollForConversion>
			adc_value = HAL_ADC_GetValue(&hadc1);
 8000c40:	4814      	ldr	r0, [pc, #80]	@ (8000c94 <StartTaskADC+0x78>)
 8000c42:	f000 fdf4 	bl	800182e <HAL_ADC_GetValue>
 8000c46:	4603      	mov	r3, r0
 8000c48:	817b      	strh	r3, [r7, #10]
			ADC_Samples[i] = Convert_ADC( adc_value,  0, 4095, 0, 3.3);
 8000c4a:	897b      	ldrh	r3, [r7, #10]
 8000c4c:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8000c98 <StartTaskADC+0x7c>
 8000c50:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 8000c9c <StartTaskADC+0x80>
 8000c54:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000ca0 <StartTaskADC+0x84>
 8000c58:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8000c9c <StartTaskADC+0x80>
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fcdd 	bl	800061c <Convert_ADC>
 8000c62:	eeb0 7b40 	vmov.f64	d7, d0
 8000c66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca4 <StartTaskADC+0x88>)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	ed83 7b00 	vstr	d7, [r3]
		for(int i = 0; i<=10; i++)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b0a      	cmp	r3, #10
 8000c7c:	ddd9      	ble.n	8000c32 <StartTaskADC+0x16>

		}
	}

	osSemaphoreRelease(SemCalcHandle);
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <StartTaskADC+0x8c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f004 fdfe 	bl	8005884 <osSemaphoreRelease>

    osDelay(100);
 8000c88:	2064      	movs	r0, #100	@ 0x64
 8000c8a:	f004 fccb 	bl	8005624 <osDelay>
	if (Flag_State == 1)
 8000c8e:	e7c9      	b.n	8000c24 <StartTaskADC+0x8>
 8000c90:	20000a30 	.word	0x20000a30
 8000c94:	2000036c 	.word	0x2000036c
 8000c98:	40533333 	.word	0x40533333
 8000c9c:	00000000 	.word	0x00000000
 8000ca0:	457ff000 	.word	0x457ff000
 8000ca4:	200009e0 	.word	0x200009e0
 8000ca8:	200009d8 	.word	0x200009d8

08000cac <StartTaskSend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSend */
void StartTaskSend(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b09e      	sub	sp, #120	@ 0x78
 8000cb0:	af02      	add	r7, sp, #8
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSend */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(SemSendHandle, osWaitForever);
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <StartTaskSend+0x38>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f004 fd7b 	bl	80057b8 <osSemaphoreAcquire>

	char str[100];
	snprintf(str, 100, "Media dos valores obtidos = %lf", med);
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <StartTaskSend+0x3c>)
 8000cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc8:	f107 000c 	add.w	r0, r7, #12
 8000ccc:	e9cd 2300 	strd	r2, r3, [sp]
 8000cd0:	4a06      	ldr	r2, [pc, #24]	@ (8000cec <StartTaskSend+0x40>)
 8000cd2:	2164      	movs	r1, #100	@ 0x64
 8000cd4:	f008 fc70 	bl	80095b8 <sniprintf>

    osDelay(100);
 8000cd8:	2064      	movs	r0, #100	@ 0x64
 8000cda:	f004 fca3 	bl	8005624 <osDelay>
  {
 8000cde:	bf00      	nop
 8000ce0:	e7e8      	b.n	8000cb4 <StartTaskSend+0x8>
 8000ce2:	bf00      	nop
 8000ce4:	200009dc 	.word	0x200009dc
 8000ce8:	20000a38 	.word	0x20000a38
 8000cec:	0800b868 	.word	0x0800b868

08000cf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d101      	bne.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d02:	f000 fbb3 	bl	800146c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40010000 	.word	0x40010000

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	4a10      	ldr	r2, [pc, #64]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	210f      	movs	r1, #15
 8000d5a:	f06f 0001 	mvn.w	r0, #1
 8000d5e:	f001 f87f 	bl	8001e60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a15      	ldr	r2, [pc, #84]	@ (8000de4 <HAL_ADC_MspInit+0x74>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d123      	bne.n	8000dda <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <HAL_ADC_MspInit+0x78>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	4a14      	ldr	r2, [pc, #80]	@ (8000de8 <HAL_ADC_MspInit+0x78>)
 8000d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9e:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_ADC_MspInit+0x78>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <HAL_ADC_MspInit+0x78>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a0e      	ldr	r2, [pc, #56]	@ (8000de8 <HAL_ADC_MspInit+0x78>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <HAL_ADC_MspInit+0x78>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	@ (8000dec <HAL_ADC_MspInit+0x7c>)
 8000dd6:	f001 fbbb 	bl	8002550 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	@ 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40012000 	.word	0x40012000
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000

08000df0 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08e      	sub	sp, #56	@ 0x38
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a4e      	ldr	r2, [pc, #312]	@ (8000f48 <HAL_ETH_MspInit+0x158>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	f040 8096 	bne.w	8000f40 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e14:	4b4d      	ldr	r3, [pc, #308]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e18:	4a4c      	ldr	r2, [pc, #304]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e20:	4b4a      	ldr	r3, [pc, #296]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e28:	623b      	str	r3, [r7, #32]
 8000e2a:	6a3b      	ldr	r3, [r7, #32]
 8000e2c:	4b47      	ldr	r3, [pc, #284]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e30:	4a46      	ldr	r2, [pc, #280]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e38:	4b44      	ldr	r3, [pc, #272]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	4b41      	ldr	r3, [pc, #260]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e48:	4a40      	ldr	r2, [pc, #256]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e50:	4b3e      	ldr	r3, [pc, #248]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	4a3a      	ldr	r2, [pc, #232]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e68:	4b38      	ldr	r3, [pc, #224]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b35      	ldr	r3, [pc, #212]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	4a34      	ldr	r2, [pc, #208]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e80:	4b32      	ldr	r3, [pc, #200]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e90:	4a2e      	ldr	r2, [pc, #184]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e98:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea4:	4b29      	ldr	r3, [pc, #164]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea8:	4a28      	ldr	r2, [pc, #160]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb0:	4b26      	ldr	r3, [pc, #152]	@ (8000f4c <HAL_ETH_MspInit+0x15c>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ebc:	2332      	movs	r3, #50	@ 0x32
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ecc:	230b      	movs	r3, #11
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481e      	ldr	r0, [pc, #120]	@ (8000f50 <HAL_ETH_MspInit+0x160>)
 8000ed8:	f001 fb3a 	bl	8002550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000edc:	2386      	movs	r3, #134	@ 0x86
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eec:	230b      	movs	r3, #11
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4817      	ldr	r0, [pc, #92]	@ (8000f54 <HAL_ETH_MspInit+0x164>)
 8000ef8:	f001 fb2a 	bl	8002550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000efc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f0e:	230b      	movs	r3, #11
 8000f10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f16:	4619      	mov	r1, r3
 8000f18:	480f      	ldr	r0, [pc, #60]	@ (8000f58 <HAL_ETH_MspInit+0x168>)
 8000f1a:	f001 fb19 	bl	8002550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f1e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f30:	230b      	movs	r3, #11
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4808      	ldr	r0, [pc, #32]	@ (8000f5c <HAL_ETH_MspInit+0x16c>)
 8000f3c:	f001 fb08 	bl	8002550 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000f40:	bf00      	nop
 8000f42:	3738      	adds	r7, #56	@ 0x38
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40028000 	.word	0x40028000
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	40021800 	.word	0x40021800

08000f60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0ae      	sub	sp, #184	@ 0xb8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2290      	movs	r2, #144	@ 0x90
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f008 fb92 	bl	80096aa <memset>
  if(huart->Instance==USART3)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a22      	ldr	r2, [pc, #136]	@ (8001014 <HAL_UART_MspInit+0xb4>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d13c      	bne.n	800100a <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f94:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 fb6e 	bl	8003680 <HAL_RCCEx_PeriphCLKConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000faa:	f7ff feb3 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fae:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <HAL_UART_MspInit+0xb8>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	4a19      	ldr	r2, [pc, #100]	@ (8001018 <HAL_UART_MspInit+0xb8>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <HAL_UART_MspInit+0xb8>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <HAL_UART_MspInit+0xb8>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <HAL_UART_MspInit+0xb8>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <HAL_UART_MspInit+0xb8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	@ (800101c <HAL_UART_MspInit+0xbc>)
 8001006:	f001 faa3 	bl	8002550 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800100a:	bf00      	nop
 800100c:	37b8      	adds	r7, #184	@ 0xb8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40004800 	.word	0x40004800
 8001018:	40023800 	.word	0x40023800
 800101c:	40020c00 	.word	0x40020c00

08001020 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ae      	sub	sp, #184	@ 0xb8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2290      	movs	r2, #144	@ 0x90
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f008 fb32 	bl	80096aa <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800104e:	d159      	bne.n	8001104 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001050:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001054:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4618      	mov	r0, r3
 8001062:	f002 fb0d 	bl	8003680 <HAL_RCCEx_PeriphCLKConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800106c:	f7ff fe52 	bl	8000d14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b26      	ldr	r3, [pc, #152]	@ (800110c <HAL_PCD_MspInit+0xec>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001074:	4a25      	ldr	r2, [pc, #148]	@ (800110c <HAL_PCD_MspInit+0xec>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6313      	str	r3, [r2, #48]	@ 0x30
 800107c:	4b23      	ldr	r3, [pc, #140]	@ (800110c <HAL_PCD_MspInit+0xec>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001088:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800108c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010a2:	230a      	movs	r3, #10
 80010a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4818      	ldr	r0, [pc, #96]	@ (8001110 <HAL_PCD_MspInit+0xf0>)
 80010b0:	f001 fa4e 	bl	8002550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4810      	ldr	r0, [pc, #64]	@ (8001110 <HAL_PCD_MspInit+0xf0>)
 80010d0:	f001 fa3e 	bl	8002550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010d4:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HAL_PCD_MspInit+0xec>)
 80010d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d8:	4a0c      	ldr	r2, [pc, #48]	@ (800110c <HAL_PCD_MspInit+0xec>)
 80010da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010de:	6353      	str	r3, [r2, #52]	@ 0x34
 80010e0:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_PCD_MspInit+0xec>)
 80010e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4b07      	ldr	r3, [pc, #28]	@ (800110c <HAL_PCD_MspInit+0xec>)
 80010ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f0:	4a06      	ldr	r2, [pc, #24]	@ (800110c <HAL_PCD_MspInit+0xec>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <HAL_PCD_MspInit+0xec>)
 80010fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001104:	bf00      	nop
 8001106:	37b8      	adds	r7, #184	@ 0xb8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	@ 0x30
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001124:	4b2e      	ldr	r3, [pc, #184]	@ (80011e0 <HAL_InitTick+0xcc>)
 8001126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001128:	4a2d      	ldr	r2, [pc, #180]	@ (80011e0 <HAL_InitTick+0xcc>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001130:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <HAL_InitTick+0xcc>)
 8001132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800113c:	f107 020c 	add.w	r2, r7, #12
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f002 fa68 	bl	800361c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800114c:	f002 fa52 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 8001150:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001154:	4a23      	ldr	r2, [pc, #140]	@ (80011e4 <HAL_InitTick+0xd0>)
 8001156:	fba2 2303 	umull	r2, r3, r2, r3
 800115a:	0c9b      	lsrs	r3, r3, #18
 800115c:	3b01      	subs	r3, #1
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001160:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <HAL_InitTick+0xd4>)
 8001162:	4a22      	ldr	r2, [pc, #136]	@ (80011ec <HAL_InitTick+0xd8>)
 8001164:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001166:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <HAL_InitTick+0xd4>)
 8001168:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800116c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800116e:	4a1e      	ldr	r2, [pc, #120]	@ (80011e8 <HAL_InitTick+0xd4>)
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001174:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <HAL_InitTick+0xd4>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <HAL_InitTick+0xd4>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <HAL_InitTick+0xd4>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001186:	4818      	ldr	r0, [pc, #96]	@ (80011e8 <HAL_InitTick+0xd4>)
 8001188:	f002 fea2 	bl	8003ed0 <HAL_TIM_Base_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001192:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001196:	2b00      	cmp	r3, #0
 8001198:	d11b      	bne.n	80011d2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800119a:	4813      	ldr	r0, [pc, #76]	@ (80011e8 <HAL_InitTick+0xd4>)
 800119c:	f002 fefa 	bl	8003f94 <HAL_TIM_Base_Start_IT>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80011a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d111      	bne.n	80011d2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011ae:	2019      	movs	r0, #25
 80011b0:	f000 fe72 	bl	8001e98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	d808      	bhi.n	80011cc <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80011ba:	2200      	movs	r2, #0
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	2019      	movs	r0, #25
 80011c0:	f000 fe4e 	bl	8001e60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c4:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <HAL_InitTick+0xdc>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e002      	b.n	80011d2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3730      	adds	r7, #48	@ 0x30
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	431bde83 	.word	0x431bde83
 80011e8:	20000a48 	.word	0x20000a48
 80011ec:	40010000 	.word	0x40010000
 80011f0:	20000004 	.word	0x20000004

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <NMI_Handler+0x4>

080011fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <MemManage_Handler+0x4>

0800120c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <UsageFault_Handler+0x4>

0800121c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001230:	4802      	ldr	r0, [pc, #8]	@ (800123c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001232:	f002 ff27 	bl	8004084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000a48 	.word	0x20000a48

08001240 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001244:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001248:	f001 fb62 	bl	8002910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return 1;
 8001254:	2301      	movs	r3, #1
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <_kill>:

int _kill(int pid, int sig)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800126a:	f008 facf 	bl	800980c <__errno>
 800126e:	4603      	mov	r3, r0
 8001270:	2216      	movs	r2, #22
 8001272:	601a      	str	r2, [r3, #0]
  return -1;
 8001274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_exit>:

void _exit (int status)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ffe7 	bl	8001260 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001292:	bf00      	nop
 8001294:	e7fd      	b.n	8001292 <_exit+0x12>

08001296 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	e00a      	b.n	80012be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012a8:	f3af 8000 	nop.w
 80012ac:	4601      	mov	r1, r0
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	60ba      	str	r2, [r7, #8]
 80012b4:	b2ca      	uxtb	r2, r1
 80012b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	dbf0      	blt.n	80012a8 <_read+0x12>
  }

  return len;
 80012c6:	687b      	ldr	r3, [r7, #4]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e009      	b.n	80012f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	60ba      	str	r2, [r7, #8]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbf1      	blt.n	80012e2 <_write+0x12>
  }
  return len;
 80012fe:	687b      	ldr	r3, [r7, #4]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_close>:

int _close(int file)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001330:	605a      	str	r2, [r3, #4]
  return 0;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_isatty>:

int _isatty(int file)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001348:	2301      	movs	r3, #1
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001356:	b480      	push	{r7}
 8001358:	b085      	sub	sp, #20
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001378:	4a14      	ldr	r2, [pc, #80]	@ (80013cc <_sbrk+0x5c>)
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <_sbrk+0x60>)
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001384:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <_sbrk+0x64>)
 800138e:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <_sbrk+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a0:	f008 fa34 	bl	800980c <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	220c      	movs	r2, #12
 80013a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	e009      	b.n	80013c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b6:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4a05      	ldr	r2, [pc, #20]	@ (80013d4 <_sbrk+0x64>)
 80013c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20080000 	.word	0x20080000
 80013d0:	00000400 	.word	0x00000400
 80013d4:	20000a94 	.word	0x20000a94
 80013d8:	200055c8 	.word	0x200055c8

080013dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	@ (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001438 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001404:	f7ff ffea 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	@ (800143c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	@ (8001440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	@ (800144c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800142e:	f008 f9f3 	bl	8009818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001432:	f7ff f927 	bl	8000684 <main>
  bx  lr    
 8001436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001438:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001444:	0800bccc 	.word	0x0800bccc
  ldr r2, =_sbss
 8001448:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 800144c:	200055c8 	.word	0x200055c8

08001450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC_IRQHandler>

08001452 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001456:	2003      	movs	r0, #3
 8001458:	f000 fcf7 	bl	8001e4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145c:	200f      	movs	r0, #15
 800145e:	f7ff fe59 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001462:	f7ff fc5d 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000008 	.word	0x20000008
 8001490:	20000a98 	.word	0x20000a98

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000a98 	.word	0x20000a98

080014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff ffee 	bl	8001494 <HAL_GetTick>
 80014b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d005      	beq.n	80014d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_Delay+0x44>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d2:	bf00      	nop
 80014d4:	f7ff ffde 	bl	8001494 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d8f7      	bhi.n	80014d4 <HAL_Delay+0x28>
  {
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008

080014f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e031      	b.n	800156e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	2b00      	cmp	r3, #0
 8001510:	d109      	bne.n	8001526 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fc2c 	bl	8000d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	2b00      	cmp	r3, #0
 8001530:	d116      	bne.n	8001560 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <HAL_ADC_Init+0x84>)
 8001538:	4013      	ands	r3, r2
 800153a:	f043 0202 	orr.w	r2, r3, #2
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fada 	bl	8001afc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	f023 0303 	bic.w	r3, r3, #3
 8001556:	f043 0201 	orr.w	r2, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	641a      	str	r2, [r3, #64]	@ 0x40
 800155e:	e001      	b.n	8001564 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	ffffeefd 	.word	0xffffeefd

0800157c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_ADC_Start+0x1a>
 8001592:	2302      	movs	r3, #2
 8001594:	e0ad      	b.n	80016f2 <HAL_ADC_Start+0x176>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d018      	beq.n	80015de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80015bc:	4b50      	ldr	r3, [pc, #320]	@ (8001700 <HAL_ADC_Start+0x184>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a50      	ldr	r2, [pc, #320]	@ (8001704 <HAL_ADC_Start+0x188>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0c9a      	lsrs	r2, r3, #18
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80015d0:	e002      	b.n	80015d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f9      	bne.n	80015d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d175      	bne.n	80016d8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015f0:	4b45      	ldr	r3, [pc, #276]	@ (8001708 <HAL_ADC_Start+0x18c>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001612:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001626:	d106      	bne.n	8001636 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162c:	f023 0206 	bic.w	r2, r3, #6
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	645a      	str	r2, [r3, #68]	@ 0x44
 8001634:	e002      	b.n	800163c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800164c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800164e:	4b2f      	ldr	r3, [pc, #188]	@ (800170c <HAL_ADC_Start+0x190>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10f      	bne.n	800167a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d143      	bne.n	80016f0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	e03a      	b.n	80016f0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a24      	ldr	r2, [pc, #144]	@ (8001710 <HAL_ADC_Start+0x194>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d10e      	bne.n	80016a2 <HAL_ADC_Start+0x126>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d107      	bne.n	80016a2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016a0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80016a2:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <HAL_ADC_Start+0x190>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d120      	bne.n	80016f0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a18      	ldr	r2, [pc, #96]	@ (8001714 <HAL_ADC_Start+0x198>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d11b      	bne.n	80016f0 <HAL_ADC_Start+0x174>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d114      	bne.n	80016f0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	e00b      	b.n	80016f0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	f043 0210 	orr.w	r2, r3, #16
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e8:	f043 0201 	orr.w	r2, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000000 	.word	0x20000000
 8001704:	431bde83 	.word	0x431bde83
 8001708:	fffff8fe 	.word	0xfffff8fe
 800170c:	40012300 	.word	0x40012300
 8001710:	40012000 	.word	0x40012000
 8001714:	40012200 	.word	0x40012200

08001718 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001734:	d113      	bne.n	800175e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001744:	d10b      	bne.n	800175e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f043 0220 	orr.w	r2, r3, #32
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e063      	b.n	8001826 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800175e:	f7ff fe99 	bl	8001494 <HAL_GetTick>
 8001762:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001764:	e021      	b.n	80017aa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d01d      	beq.n	80017aa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <HAL_ADC_PollForConversion+0x6c>
 8001774:	f7ff fe8e 	bl	8001494 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d212      	bcs.n	80017aa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b02      	cmp	r3, #2
 8001790:	d00b      	beq.n	80017aa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f043 0204 	orr.w	r2, r3, #4
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e03d      	b.n	8001826 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d1d6      	bne.n	8001766 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f06f 0212 	mvn.w	r2, #18
 80017c0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d123      	bne.n	8001824 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d11f      	bne.n	8001824 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d111      	bne.n	8001824 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d105      	bne.n	8001824 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x1c>
 8001860:	2302      	movs	r3, #2
 8001862:	e13a      	b.n	8001ada <HAL_ADC_ConfigChannel+0x292>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b09      	cmp	r3, #9
 8001872:	d93a      	bls.n	80018ea <HAL_ADC_ConfigChannel+0xa2>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800187c:	d035      	beq.n	80018ea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68d9      	ldr	r1, [r3, #12]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b29b      	uxth	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	3b1e      	subs	r3, #30
 8001894:	2207      	movs	r2, #7
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	400a      	ands	r2, r1
 80018a2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a8f      	ldr	r2, [pc, #572]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d10a      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68d9      	ldr	r1, [r3, #12]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	061a      	lsls	r2, r3, #24
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018c2:	e039      	b.n	8001938 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68d9      	ldr	r1, [r3, #12]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4403      	add	r3, r0
 80018dc:	3b1e      	subs	r3, #30
 80018de:	409a      	lsls	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018e8:	e026      	b.n	8001938 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6919      	ldr	r1, [r3, #16]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	2207      	movs	r2, #7
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43da      	mvns	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	400a      	ands	r2, r1
 8001910:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6919      	ldr	r1, [r3, #16]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	4603      	mov	r3, r0
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4403      	add	r3, r0
 800192a:	f003 031f 	and.w	r3, r3, #31
 800192e:	409a      	lsls	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b06      	cmp	r3, #6
 800193e:	d824      	bhi.n	800198a <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3b05      	subs	r3, #5
 8001952:	221f      	movs	r2, #31
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43da      	mvns	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	400a      	ands	r2, r1
 8001960:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	4618      	mov	r0, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3b05      	subs	r3, #5
 800197c:	fa00 f203 	lsl.w	r2, r0, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	635a      	str	r2, [r3, #52]	@ 0x34
 8001988:	e04c      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d824      	bhi.n	80019dc <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b23      	subs	r3, #35	@ 0x23
 80019a4:	221f      	movs	r2, #31
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	400a      	ands	r2, r1
 80019b2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	3b23      	subs	r3, #35	@ 0x23
 80019ce:	fa00 f203 	lsl.w	r2, r0, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80019da:	e023      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	3b41      	subs	r3, #65	@ 0x41
 80019ee:	221f      	movs	r2, #31
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43da      	mvns	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	400a      	ands	r2, r1
 80019fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	3b41      	subs	r3, #65	@ 0x41
 8001a18:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a30      	ldr	r2, [pc, #192]	@ (8001aec <HAL_ADC_ConfigChannel+0x2a4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10a      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1fc>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a38:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8001af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a3e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a42:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a28      	ldr	r2, [pc, #160]	@ (8001aec <HAL_ADC_ConfigChannel+0x2a4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10f      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x226>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b12      	cmp	r3, #18
 8001a54:	d10b      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a56:	4b26      	ldr	r3, [pc, #152]	@ (8001af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4a25      	ldr	r2, [pc, #148]	@ (8001af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a5c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001a60:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a62:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a22      	ldr	r2, [pc, #136]	@ (8001af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a6c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1e      	ldr	r2, [pc, #120]	@ (8001aec <HAL_ADC_ConfigChannel+0x2a4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d12b      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x288>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d003      	beq.n	8001a8a <HAL_ADC_ConfigChannel+0x242>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b11      	cmp	r3, #17
 8001a88:	d122      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a8a:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4a18      	ldr	r2, [pc, #96]	@ (8001af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a90:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a94:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a96:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a15      	ldr	r2, [pc, #84]	@ (8001af0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001aa0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a10      	ldr	r2, [pc, #64]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d111      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_ADC_ConfigChannel+0x2ac>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a11      	ldr	r2, [pc, #68]	@ (8001af8 <HAL_ADC_ConfigChannel+0x2b0>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	0c9a      	lsrs	r2, r3, #18
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ac2:	e002      	b.n	8001aca <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f9      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	10000012 	.word	0x10000012
 8001aec:	40012000 	.word	0x40012000
 8001af0:	40012300 	.word	0x40012300
 8001af4:	20000000 	.word	0x20000000
 8001af8:	431bde83 	.word	0x431bde83

08001afc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b04:	4b78      	ldr	r3, [pc, #480]	@ (8001ce8 <ADC_Init+0x1ec>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4a77      	ldr	r2, [pc, #476]	@ (8001ce8 <ADC_Init+0x1ec>)
 8001b0a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001b0e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001b10:	4b75      	ldr	r3, [pc, #468]	@ (8001ce8 <ADC_Init+0x1ec>)
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4973      	ldr	r1, [pc, #460]	@ (8001ce8 <ADC_Init+0x1ec>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	021a      	lsls	r2, r3, #8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6899      	ldr	r1, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8a:	4a58      	ldr	r2, [pc, #352]	@ (8001cec <ADC_Init+0x1f0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6899      	ldr	r1, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	e00f      	b.n	8001bf6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001be4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0202 	bic.w	r2, r2, #2
 8001c04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6899      	ldr	r1, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	005a      	lsls	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01b      	beq.n	8001c5c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6859      	ldr	r1, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	035a      	lsls	r2, r3, #13
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	e007      	b.n	8001c6c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	051a      	lsls	r2, r3, #20
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ca0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6899      	ldr	r1, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6899      	ldr	r1, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	029a      	lsls	r2, r3, #10
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	609a      	str	r2, [r3, #8]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40012300 	.word	0x40012300
 8001cec:	0f000001 	.word	0x0f000001

08001cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <__NVIC_SetPriorityGrouping+0x40>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <__NVIC_SetPriorityGrouping+0x40>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00
 8001d34:	05fa0000 	.word	0x05fa0000

08001d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d3c:	4b04      	ldr	r3, [pc, #16]	@ (8001d50 <__NVIC_GetPriorityGrouping+0x18>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	f003 0307 	and.w	r3, r3, #7
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	db0b      	blt.n	8001d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	4907      	ldr	r1, [pc, #28]	@ (8001d8c <__NVIC_EnableIRQ+0x38>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	2001      	movs	r0, #1
 8001d76:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	@ (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	@ (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	@ 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	@ 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ff4c 	bl	8001cf0 <__NVIC_SetPriorityGrouping>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e72:	f7ff ff61 	bl	8001d38 <__NVIC_GetPriorityGrouping>
 8001e76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	6978      	ldr	r0, [r7, #20]
 8001e7e:	f7ff ffb1 	bl	8001de4 <NVIC_EncodePriority>
 8001e82:	4602      	mov	r2, r0
 8001e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ff80 	bl	8001d90 <__NVIC_SetPriority>
}
 8001e90:	bf00      	nop
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff54 	bl	8001d54 <__NVIC_EnableIRQ>
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e086      	b.n	8001fd4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d106      	bne.n	8001ede <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7fe ff89 	bl	8000df0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	4b3f      	ldr	r3, [pc, #252]	@ (8001fdc <HAL_ETH_Init+0x128>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	4a3e      	ldr	r2, [pc, #248]	@ (8001fdc <HAL_ETH_Init+0x128>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eea:	4b3c      	ldr	r3, [pc, #240]	@ (8001fdc <HAL_ETH_Init+0x128>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe0 <HAL_ETH_Init+0x12c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4a39      	ldr	r2, [pc, #228]	@ (8001fe0 <HAL_ETH_Init+0x12c>)
 8001efc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001f00:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f02:	4b37      	ldr	r3, [pc, #220]	@ (8001fe0 <HAL_ETH_Init+0x12c>)
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	4935      	ldr	r1, [pc, #212]	@ (8001fe0 <HAL_ETH_Init+0x12c>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f10:	4b33      	ldr	r3, [pc, #204]	@ (8001fe0 <HAL_ETH_Init+0x12c>)
 8001f12:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f2c:	f7ff fab2 	bl	8001494 <HAL_GetTick>
 8001f30:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f32:	e011      	b.n	8001f58 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f34:	f7ff faae 	bl	8001494 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001f42:	d909      	bls.n	8001f58 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2204      	movs	r2, #4
 8001f48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	22e0      	movs	r2, #224	@ 0xe0
 8001f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e03d      	b.n	8001fd4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1e4      	bne.n	8001f34 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f97a 	bl	8002264 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fa25 	bl	80023c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa7b 	bl	8002472 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	461a      	mov	r2, r3
 8001f82:	2100      	movs	r1, #0
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f9e3 	bl	8002350 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001f98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <HAL_ETH_Init+0x130>)
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001fbe:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2210      	movs	r2, #16
 8001fce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40013800 	.word	0x40013800
 8001fe4:	00020060 	.word	0x00020060

08001fe8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4b53      	ldr	r3, [pc, #332]	@ (800214c <ETH_SetMACConfig+0x164>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	7b9b      	ldrb	r3, [r3, #14]
 8002006:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	7c12      	ldrb	r2, [r2, #16]
 800200c:	2a00      	cmp	r2, #0
 800200e:	d102      	bne.n	8002016 <ETH_SetMACConfig+0x2e>
 8002010:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002014:	e000      	b.n	8002018 <ETH_SetMACConfig+0x30>
 8002016:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002018:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	7c52      	ldrb	r2, [r2, #17]
 800201e:	2a00      	cmp	r2, #0
 8002020:	d102      	bne.n	8002028 <ETH_SetMACConfig+0x40>
 8002022:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002026:	e000      	b.n	800202a <ETH_SetMACConfig+0x42>
 8002028:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800202a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002030:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	7fdb      	ldrb	r3, [r3, #31]
 8002036:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002038:	431a      	orrs	r2, r3
                        macconf->Speed |
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800203e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	7f92      	ldrb	r2, [r2, #30]
 8002044:	2a00      	cmp	r2, #0
 8002046:	d102      	bne.n	800204e <ETH_SetMACConfig+0x66>
 8002048:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800204c:	e000      	b.n	8002050 <ETH_SetMACConfig+0x68>
 800204e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002050:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	7f1b      	ldrb	r3, [r3, #28]
 8002056:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002058:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800205e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	791b      	ldrb	r3, [r3, #4]
 8002064:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002066:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800206e:	2a00      	cmp	r2, #0
 8002070:	d102      	bne.n	8002078 <ETH_SetMACConfig+0x90>
 8002072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002076:	e000      	b.n	800207a <ETH_SetMACConfig+0x92>
 8002078:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800207a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	7bdb      	ldrb	r3, [r3, #15]
 8002080:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002082:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002088:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002090:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002092:	4313      	orrs	r3, r2
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7ff f9fe 	bl	80014ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80020c6:	4013      	ands	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ce:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80020d6:	2a00      	cmp	r2, #0
 80020d8:	d101      	bne.n	80020de <ETH_SetMACConfig+0xf6>
 80020da:	2280      	movs	r2, #128	@ 0x80
 80020dc:	e000      	b.n	80020e0 <ETH_SetMACConfig+0xf8>
 80020de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020e0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80020ee:	2a01      	cmp	r2, #1
 80020f0:	d101      	bne.n	80020f6 <ETH_SetMACConfig+0x10e>
 80020f2:	2208      	movs	r2, #8
 80020f4:	e000      	b.n	80020f8 <ETH_SetMACConfig+0x110>
 80020f6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80020f8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002100:	2a01      	cmp	r2, #1
 8002102:	d101      	bne.n	8002108 <ETH_SetMACConfig+0x120>
 8002104:	2204      	movs	r2, #4
 8002106:	e000      	b.n	800210a <ETH_SetMACConfig+0x122>
 8002108:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800210a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002112:	2a01      	cmp	r2, #1
 8002114:	d101      	bne.n	800211a <ETH_SetMACConfig+0x132>
 8002116:	2202      	movs	r2, #2
 8002118:	e000      	b.n	800211c <ETH_SetMACConfig+0x134>
 800211a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800211c:	4313      	orrs	r3, r2
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4313      	orrs	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002134:	2001      	movs	r0, #1
 8002136:	f7ff f9b9 	bl	80014ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	619a      	str	r2, [r3, #24]
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	fd20810f 	.word	0xfd20810f

08002150 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4b3d      	ldr	r3, [pc, #244]	@ (8002260 <ETH_SetDMAConfig+0x110>)
 800216a:	4013      	ands	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	7b1b      	ldrb	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <ETH_SetDMAConfig+0x2c>
 8002176:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800217a:	e000      	b.n	800217e <ETH_SetDMAConfig+0x2e>
 800217c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	7b5b      	ldrb	r3, [r3, #13]
 8002182:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002184:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	7f52      	ldrb	r2, [r2, #29]
 800218a:	2a00      	cmp	r2, #0
 800218c:	d102      	bne.n	8002194 <ETH_SetDMAConfig+0x44>
 800218e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002192:	e000      	b.n	8002196 <ETH_SetDMAConfig+0x46>
 8002194:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002196:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	7b9b      	ldrb	r3, [r3, #14]
 800219c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800219e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	7f1b      	ldrb	r3, [r3, #28]
 80021aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80021ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	7f9b      	ldrb	r3, [r3, #30]
 80021b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021c4:	4313      	orrs	r3, r2
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021d4:	461a      	mov	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f7ff f960 	bl	80014ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021f4:	461a      	mov	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	791b      	ldrb	r3, [r3, #4]
 80021fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002204:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800220a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002210:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002218:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800221a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002220:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002222:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002228:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002232:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002236:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002244:	2001      	movs	r0, #1
 8002246:	f7ff f931 	bl	80014ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	f8de3f23 	.word	0xf8de3f23

08002264 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b0a6      	sub	sp, #152	@ 0x98
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800226c:	2301      	movs	r3, #1
 800226e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002278:	2300      	movs	r3, #0
 800227a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800228e:	2301      	movs	r3, #1
 8002290:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002294:	2301      	movs	r3, #1
 8002296:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022a6:	2300      	movs	r3, #0
 80022a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80022cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80022de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022e2:	4619      	mov	r1, r3
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff fe7f 	bl	8001fe8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80022ea:	2301      	movs	r3, #1
 80022ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80022ee:	2301      	movs	r3, #1
 80022f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80022f2:	2301      	movs	r3, #1
 80022f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80022f8:	2301      	movs	r3, #1
 80022fa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800230c:	2300      	movs	r3, #0
 800230e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002316:	2301      	movs	r3, #1
 8002318:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800231a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800231e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002320:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002324:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002326:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800232a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800232c:	2301      	movs	r3, #1
 800232e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002332:	2300      	movs	r3, #0
 8002334:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	4619      	mov	r1, r3
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ff05 	bl	8002150 <ETH_SetDMAConfig>
}
 8002346:	bf00      	nop
 8002348:	3798      	adds	r7, #152	@ 0x98
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3305      	adds	r3, #5
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	3204      	adds	r2, #4
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <ETH_MACAddressConfig+0x68>)
 8002372:	4413      	add	r3, r2
 8002374:	461a      	mov	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3303      	adds	r3, #3
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	061a      	lsls	r2, r3, #24
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3302      	adds	r3, #2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3301      	adds	r3, #1
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	4313      	orrs	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	7812      	ldrb	r2, [r2, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <ETH_MACAddressConfig+0x6c>)
 80023a2:	4413      	add	r3, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	6013      	str	r3, [r2, #0]
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40028040 	.word	0x40028040
 80023bc:	40028044 	.word	0x40028044

080023c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e03e      	b.n	800244c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68d9      	ldr	r1, [r3, #12]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2200      	movs	r2, #0
 80023ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2200      	movs	r2, #0
 80023f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	3206      	adds	r2, #6
 8002400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d80c      	bhi.n	8002430 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68d9      	ldr	r1, [r3, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	e004      	b.n	800243a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	3301      	adds	r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d9bd      	bls.n	80023ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002464:	611a      	str	r2, [r3, #16]
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002472:	b480      	push	{r7}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	e048      	b.n	8002512 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6919      	ldr	r1, [r3, #16]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2200      	movs	r2, #0
 800249c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2200      	movs	r2, #0
 80024ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2200      	movs	r2, #0
 80024b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80024bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	3212      	adds	r2, #18
 80024de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d80c      	bhi.n	8002502 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6919      	ldr	r1, [r3, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	e004      	b.n	800250c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	461a      	mov	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	3301      	adds	r3, #1
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d9b3      	bls.n	8002480 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002542:	60da      	str	r2, [r3, #12]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	@ 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e175      	b.n	800285c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 8164 	bne.w	8002856 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <HAL_GPIO_Init+0x56>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d017      	beq.n	8002644 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80be 	beq.w	8002856 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	4b66      	ldr	r3, [pc, #408]	@ (8002874 <HAL_GPIO_Init+0x324>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	4a65      	ldr	r2, [pc, #404]	@ (8002874 <HAL_GPIO_Init+0x324>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026e6:	4b63      	ldr	r3, [pc, #396]	@ (8002874 <HAL_GPIO_Init+0x324>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026f2:	4a61      	ldr	r2, [pc, #388]	@ (8002878 <HAL_GPIO_Init+0x328>)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	220f      	movs	r2, #15
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a58      	ldr	r2, [pc, #352]	@ (800287c <HAL_GPIO_Init+0x32c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d037      	beq.n	800278e <HAL_GPIO_Init+0x23e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a57      	ldr	r2, [pc, #348]	@ (8002880 <HAL_GPIO_Init+0x330>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d031      	beq.n	800278a <HAL_GPIO_Init+0x23a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a56      	ldr	r2, [pc, #344]	@ (8002884 <HAL_GPIO_Init+0x334>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d02b      	beq.n	8002786 <HAL_GPIO_Init+0x236>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a55      	ldr	r2, [pc, #340]	@ (8002888 <HAL_GPIO_Init+0x338>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d025      	beq.n	8002782 <HAL_GPIO_Init+0x232>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a54      	ldr	r2, [pc, #336]	@ (800288c <HAL_GPIO_Init+0x33c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01f      	beq.n	800277e <HAL_GPIO_Init+0x22e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a53      	ldr	r2, [pc, #332]	@ (8002890 <HAL_GPIO_Init+0x340>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d019      	beq.n	800277a <HAL_GPIO_Init+0x22a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a52      	ldr	r2, [pc, #328]	@ (8002894 <HAL_GPIO_Init+0x344>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_GPIO_Init+0x226>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a51      	ldr	r2, [pc, #324]	@ (8002898 <HAL_GPIO_Init+0x348>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00d      	beq.n	8002772 <HAL_GPIO_Init+0x222>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a50      	ldr	r2, [pc, #320]	@ (800289c <HAL_GPIO_Init+0x34c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <HAL_GPIO_Init+0x21e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4f      	ldr	r2, [pc, #316]	@ (80028a0 <HAL_GPIO_Init+0x350>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_GPIO_Init+0x21a>
 8002766:	2309      	movs	r3, #9
 8002768:	e012      	b.n	8002790 <HAL_GPIO_Init+0x240>
 800276a:	230a      	movs	r3, #10
 800276c:	e010      	b.n	8002790 <HAL_GPIO_Init+0x240>
 800276e:	2308      	movs	r3, #8
 8002770:	e00e      	b.n	8002790 <HAL_GPIO_Init+0x240>
 8002772:	2307      	movs	r3, #7
 8002774:	e00c      	b.n	8002790 <HAL_GPIO_Init+0x240>
 8002776:	2306      	movs	r3, #6
 8002778:	e00a      	b.n	8002790 <HAL_GPIO_Init+0x240>
 800277a:	2305      	movs	r3, #5
 800277c:	e008      	b.n	8002790 <HAL_GPIO_Init+0x240>
 800277e:	2304      	movs	r3, #4
 8002780:	e006      	b.n	8002790 <HAL_GPIO_Init+0x240>
 8002782:	2303      	movs	r3, #3
 8002784:	e004      	b.n	8002790 <HAL_GPIO_Init+0x240>
 8002786:	2302      	movs	r3, #2
 8002788:	e002      	b.n	8002790 <HAL_GPIO_Init+0x240>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_GPIO_Init+0x240>
 800278e:	2300      	movs	r3, #0
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	f002 0203 	and.w	r2, r2, #3
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	4093      	lsls	r3, r2
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027a0:	4935      	ldr	r1, [pc, #212]	@ (8002878 <HAL_GPIO_Init+0x328>)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	3302      	adds	r3, #2
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ae:	4b3d      	ldr	r3, [pc, #244]	@ (80028a4 <HAL_GPIO_Init+0x354>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d2:	4a34      	ldr	r2, [pc, #208]	@ (80028a4 <HAL_GPIO_Init+0x354>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d8:	4b32      	ldr	r3, [pc, #200]	@ (80028a4 <HAL_GPIO_Init+0x354>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027fc:	4a29      	ldr	r2, [pc, #164]	@ (80028a4 <HAL_GPIO_Init+0x354>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002802:	4b28      	ldr	r3, [pc, #160]	@ (80028a4 <HAL_GPIO_Init+0x354>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002826:	4a1f      	ldr	r2, [pc, #124]	@ (80028a4 <HAL_GPIO_Init+0x354>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800282c:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <HAL_GPIO_Init+0x354>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002850:	4a14      	ldr	r2, [pc, #80]	@ (80028a4 <HAL_GPIO_Init+0x354>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3301      	adds	r3, #1
 800285a:	61fb      	str	r3, [r7, #28]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b0f      	cmp	r3, #15
 8002860:	f67f ae86 	bls.w	8002570 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3724      	adds	r7, #36	@ 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	40013800 	.word	0x40013800
 800287c:	40020000 	.word	0x40020000
 8002880:	40020400 	.word	0x40020400
 8002884:	40020800 	.word	0x40020800
 8002888:	40020c00 	.word	0x40020c00
 800288c:	40021000 	.word	0x40021000
 8002890:	40021400 	.word	0x40021400
 8002894:	40021800 	.word	0x40021800
 8002898:	40021c00 	.word	0x40021c00
 800289c:	40022000 	.word	0x40022000
 80028a0:	40022400 	.word	0x40022400
 80028a4:	40013c00 	.word	0x40013c00

080028a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
 80028b4:	4613      	mov	r3, r2
 80028b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028b8:	787b      	ldrb	r3, [r7, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028c4:	e003      	b.n	80028ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	041a      	lsls	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	619a      	str	r2, [r3, #24]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028ec:	887a      	ldrh	r2, [r7, #2]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4013      	ands	r3, r2
 80028f2:	041a      	lsls	r2, r3, #16
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	43d9      	mvns	r1, r3
 80028f8:	887b      	ldrh	r3, [r7, #2]
 80028fa:	400b      	ands	r3, r1
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	619a      	str	r2, [r3, #24]
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800291a:	4b08      	ldr	r3, [pc, #32]	@ (800293c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	4013      	ands	r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d006      	beq.n	8002934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002926:	4a05      	ldr	r2, [pc, #20]	@ (800293c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe f91a 	bl	8000b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40013c00 	.word	0x40013c00

08002940 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af02      	add	r7, sp, #8
 8002946:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e108      	b.n	8002b64 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d106      	bne.n	8002972 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7fe fb57 	bl	8001020 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002980:	d102      	bne.n	8002988 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fa95 	bl	8004ebc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7c1a      	ldrb	r2, [r3, #16]
 800299a:	f88d 2000 	strb.w	r2, [sp]
 800299e:	3304      	adds	r3, #4
 80029a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029a2:	f002 fa31 	bl	8004e08 <USB_CoreInit>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0d5      	b.n	8002b64 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f002 fa8d 	bl	8004ede <USB_SetCurrentMode>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0c6      	b.n	8002b64 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e04a      	b.n	8002a72 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	3315      	adds	r3, #21
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	3314      	adds	r3, #20
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	b298      	uxth	r0, r3
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	332e      	adds	r3, #46	@ 0x2e
 8002a18:	4602      	mov	r2, r0
 8002a1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	3318      	adds	r3, #24
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	331c      	adds	r3, #28
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3320      	adds	r3, #32
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a58:	7bfa      	ldrb	r2, [r7, #15]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	3324      	adds	r3, #36	@ 0x24
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	791b      	ldrb	r3, [r3, #4]
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d3af      	bcc.n	80029dc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	73fb      	strb	r3, [r7, #15]
 8002a80:	e044      	b.n	8002b0c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	791b      	ldrb	r3, [r3, #4]
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d3b5      	bcc.n	8002a82 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7c1a      	ldrb	r2, [r3, #16]
 8002b1e:	f88d 2000 	strb.w	r2, [sp]
 8002b22:	3304      	adds	r3, #4
 8002b24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b26:	f002 fa27 	bl	8004f78 <USB_DevInit>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e013      	b.n	8002b64 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7b1b      	ldrb	r3, [r3, #12]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d102      	bne.n	8002b58 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f80a 	bl	8002b6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f002 fbe2 	bl	8005326 <USB_DevDisconnect>

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b9a:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	10000003 	.word	0x10000003

08002bb4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb8:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a04      	ldr	r2, [pc, #16]	@ (8002bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc2:	6013      	str	r3, [r2, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40007000 	.word	0x40007000

08002bd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	4b23      	ldr	r3, [pc, #140]	@ (8002c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	4a22      	ldr	r2, [pc, #136]	@ (8002c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bea:	4b20      	ldr	r3, [pc, #128]	@ (8002c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8002c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c02:	f7fe fc47 	bl	8001494 <HAL_GetTick>
 8002c06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c08:	e009      	b.n	8002c1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c0a:	f7fe fc43 	bl	8001494 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c18:	d901      	bls.n	8002c1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e022      	b.n	8002c64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c1e:	4b14      	ldr	r3, [pc, #80]	@ (8002c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c2a:	d1ee      	bne.n	8002c0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c2c:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0f      	ldr	r2, [pc, #60]	@ (8002c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c38:	f7fe fc2c 	bl	8001494 <HAL_GetTick>
 8002c3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c3e:	e009      	b.n	8002c54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c40:	f7fe fc28 	bl	8001494 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c4e:	d901      	bls.n	8002c54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e007      	b.n	8002c64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c54:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c60:	d1ee      	bne.n	8002c40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40007000 	.word	0x40007000

08002c74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e29b      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8087 	beq.w	8002da6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c98:	4b96      	ldr	r3, [pc, #600]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d00c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca4:	4b93      	ldr	r3, [pc, #588]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d112      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x62>
 8002cb0:	4b90      	ldr	r3, [pc, #576]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbe:	4b8d      	ldr	r3, [pc, #564]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d06c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x130>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d168      	bne.n	8002da4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e275      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x7a>
 8002ce0:	4b84      	ldr	r3, [pc, #528]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a83      	ldr	r2, [pc, #524]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	e02e      	b.n	8002d4c <HAL_RCC_OscConfig+0xd8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x9c>
 8002cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7e      	ldr	r2, [pc, #504]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b7c      	ldr	r3, [pc, #496]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a7b      	ldr	r2, [pc, #492]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e01d      	b.n	8002d4c <HAL_RCC_OscConfig+0xd8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0xc0>
 8002d1a:	4b76      	ldr	r3, [pc, #472]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a75      	ldr	r2, [pc, #468]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b73      	ldr	r3, [pc, #460]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a72      	ldr	r2, [pc, #456]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0xd8>
 8002d34:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6b      	ldr	r2, [pc, #428]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fe fb9e 	bl	8001494 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7fe fb9a 	bl	8001494 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	@ 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e229      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b61      	ldr	r3, [pc, #388]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0xe8>
 8002d7a:	e014      	b.n	8002da6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fb8a 	bl	8001494 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe fb86 	bl	8001494 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	@ 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e215      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	4b57      	ldr	r3, [pc, #348]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x110>
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d069      	beq.n	8002e86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db2:	4b50      	ldr	r3, [pc, #320]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d11c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x190>
 8002dca:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d116      	bne.n	8002e04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	4b47      	ldr	r3, [pc, #284]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_RCC_OscConfig+0x17a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e1e9      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b41      	ldr	r3, [pc, #260]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	493d      	ldr	r1, [pc, #244]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	e040      	b.n	8002e86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d023      	beq.n	8002e54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0c:	4b39      	ldr	r3, [pc, #228]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a38      	ldr	r2, [pc, #224]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fb3c 	bl	8001494 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e20:	f7fe fb38 	bl	8001494 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e1c7      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	4b30      	ldr	r3, [pc, #192]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4929      	ldr	r1, [pc, #164]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
 8002e52:	e018      	b.n	8002e86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e54:	4b27      	ldr	r3, [pc, #156]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a26      	ldr	r2, [pc, #152]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe fb18 	bl	8001494 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fe fb14 	bl	8001494 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1a3      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d038      	beq.n	8002f04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d019      	beq.n	8002ece <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9e:	4a15      	ldr	r2, [pc, #84]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fe faf5 	bl	8001494 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe faf1 	bl	8001494 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e180      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x23a>
 8002ecc:	e01a      	b.n	8002f04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ece:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed2:	4a08      	ldr	r2, [pc, #32]	@ (8002ef4 <HAL_RCC_OscConfig+0x280>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eda:	f7fe fadb 	bl	8001494 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee2:	f7fe fad7 	bl	8001494 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d903      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e166      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
 8002ef4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	4b92      	ldr	r3, [pc, #584]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ee      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80a4 	beq.w	800305a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f12:	4b8c      	ldr	r3, [pc, #560]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10d      	bne.n	8002f3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	4b89      	ldr	r3, [pc, #548]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	4a88      	ldr	r2, [pc, #544]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f2a:	4b86      	ldr	r3, [pc, #536]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3a:	4b83      	ldr	r3, [pc, #524]	@ (8003148 <HAL_RCC_OscConfig+0x4d4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d118      	bne.n	8002f78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f46:	4b80      	ldr	r3, [pc, #512]	@ (8003148 <HAL_RCC_OscConfig+0x4d4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a7f      	ldr	r2, [pc, #508]	@ (8003148 <HAL_RCC_OscConfig+0x4d4>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7fe fa9f 	bl	8001494 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fe fa9b 	bl	8001494 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b64      	cmp	r3, #100	@ 0x64
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e12a      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f6c:	4b76      	ldr	r3, [pc, #472]	@ (8003148 <HAL_RCC_OscConfig+0x4d4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x31a>
 8002f80:	4b70      	ldr	r3, [pc, #448]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f84:	4a6f      	ldr	r2, [pc, #444]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8c:	e02d      	b.n	8002fea <HAL_RCC_OscConfig+0x376>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x33c>
 8002f96:	4b6b      	ldr	r3, [pc, #428]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9a:	4a6a      	ldr	r2, [pc, #424]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa2:	4b68      	ldr	r3, [pc, #416]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	4a67      	ldr	r2, [pc, #412]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fae:	e01c      	b.n	8002fea <HAL_RCC_OscConfig+0x376>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d10c      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x35e>
 8002fb8:	4b62      	ldr	r3, [pc, #392]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbc:	4a61      	ldr	r2, [pc, #388]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc4:	4b5f      	ldr	r3, [pc, #380]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc8:	4a5e      	ldr	r2, [pc, #376]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd0:	e00b      	b.n	8002fea <HAL_RCC_OscConfig+0x376>
 8002fd2:	4b5c      	ldr	r3, [pc, #368]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd6:	4a5b      	ldr	r2, [pc, #364]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fde:	4b59      	ldr	r3, [pc, #356]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe2:	4a58      	ldr	r2, [pc, #352]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8002fe4:	f023 0304 	bic.w	r3, r3, #4
 8002fe8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d015      	beq.n	800301e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fa4f 	bl	8001494 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff8:	e00a      	b.n	8003010 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f7fe fa4b 	bl	8001494 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0d8      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003010:	4b4c      	ldr	r3, [pc, #304]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ee      	beq.n	8002ffa <HAL_RCC_OscConfig+0x386>
 800301c:	e014      	b.n	8003048 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7fe fa39 	bl	8001494 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fe fa35 	bl	8001494 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0c2      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303c:	4b41      	ldr	r3, [pc, #260]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1ee      	bne.n	8003026 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d105      	bne.n	800305a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304e:	4b3d      	ldr	r3, [pc, #244]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	4a3c      	ldr	r2, [pc, #240]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003054:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003058:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80ae 	beq.w	80031c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003064:	4b37      	ldr	r3, [pc, #220]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	d06d      	beq.n	800314c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d14b      	bne.n	8003110 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	4b32      	ldr	r3, [pc, #200]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a31      	ldr	r2, [pc, #196]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 800307e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe fa06 	bl	8001494 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fa02 	bl	8001494 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e091      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	4b29      	ldr	r3, [pc, #164]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	019b      	lsls	r3, r3, #6
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	3b01      	subs	r3, #1
 80030c4:	041b      	lsls	r3, r3, #16
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d4:	071b      	lsls	r3, r3, #28
 80030d6:	491b      	ldr	r1, [pc, #108]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030dc:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a18      	ldr	r2, [pc, #96]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 80030e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe f9d4 	bl	8001494 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe f9d0 	bl	8001494 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e05f      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	4b10      	ldr	r3, [pc, #64]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x47c>
 800310e:	e057      	b.n	80031c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003110:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0b      	ldr	r2, [pc, #44]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800311a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe f9ba 	bl	8001494 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003124:	f7fe f9b6 	bl	8001494 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e045      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	4b03      	ldr	r3, [pc, #12]	@ (8003144 <HAL_RCC_OscConfig+0x4d0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x4b0>
 8003142:	e03d      	b.n	80031c0 <HAL_RCC_OscConfig+0x54c>
 8003144:	40023800 	.word	0x40023800
 8003148:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800314c:	4b1f      	ldr	r3, [pc, #124]	@ (80031cc <HAL_RCC_OscConfig+0x558>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d030      	beq.n	80031bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d129      	bne.n	80031bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d122      	bne.n	80031bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800317c:	4013      	ands	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003182:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003184:	4293      	cmp	r3, r2
 8003186:	d119      	bne.n	80031bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	3b01      	subs	r3, #1
 8003196:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d10f      	bne.n	80031bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800

080031d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0d0      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d910      	bls.n	8003218 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b67      	ldr	r3, [pc, #412]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 020f 	bic.w	r2, r3, #15
 80031fe:	4965      	ldr	r1, [pc, #404]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b63      	ldr	r3, [pc, #396]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b8      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003230:	4b59      	ldr	r3, [pc, #356]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a58      	ldr	r2, [pc, #352]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003236:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800323a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003248:	4b53      	ldr	r3, [pc, #332]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a52      	ldr	r2, [pc, #328]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800324e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003252:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b50      	ldr	r3, [pc, #320]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	494d      	ldr	r1, [pc, #308]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d040      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b47      	ldr	r3, [pc, #284]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d115      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003292:	4b41      	ldr	r3, [pc, #260]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e073      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e06b      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	4b39      	ldr	r3, [pc, #228]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4936      	ldr	r1, [pc, #216]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c4:	f7fe f8e6 	bl	8001494 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032cc:	f7fe f8e2 	bl	8001494 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e053      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 020c 	and.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1eb      	bne.n	80032cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f4:	4b27      	ldr	r3, [pc, #156]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d210      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b24      	ldr	r3, [pc, #144]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 020f 	bic.w	r2, r3, #15
 800330a:	4922      	ldr	r1, [pc, #136]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b20      	ldr	r3, [pc, #128]	@ (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e032      	b.n	800338a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b19      	ldr	r3, [pc, #100]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4916      	ldr	r1, [pc, #88]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800334e:	4b12      	ldr	r3, [pc, #72]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	490e      	ldr	r1, [pc, #56]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003362:	f000 f821 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003366:	4602      	mov	r2, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	490a      	ldr	r1, [pc, #40]	@ (800339c <HAL_RCC_ClockConfig+0x1cc>)
 8003374:	5ccb      	ldrb	r3, [r1, r3]
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	4a09      	ldr	r2, [pc, #36]	@ (80033a0 <HAL_RCC_ClockConfig+0x1d0>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800337e:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <HAL_RCC_ClockConfig+0x1d4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fec6 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023c00 	.word	0x40023c00
 8003398:	40023800 	.word	0x40023800
 800339c:	0800b92c 	.word	0x0800b92c
 80033a0:	20000000 	.word	0x20000000
 80033a4:	20000004 	.word	0x20000004

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ac:	b094      	sub	sp, #80	@ 0x50
 80033ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80033b4:	2300      	movs	r3, #0
 80033b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033b8:	2300      	movs	r3, #0
 80033ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c0:	4b79      	ldr	r3, [pc, #484]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d00d      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x40>
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	f200 80e1 	bhi.w	8003594 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x34>
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033da:	e0db      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b73      	ldr	r3, [pc, #460]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x204>)
 80033de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033e0:	e0db      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e2:	4b73      	ldr	r3, [pc, #460]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80033e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033e6:	e0d8      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e8:	4b6f      	ldr	r3, [pc, #444]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033f2:	4b6d      	ldr	r3, [pc, #436]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d063      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fe:	4b6a      	ldr	r3, [pc, #424]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	2200      	movs	r2, #0
 8003406:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003408:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800340a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003410:	633b      	str	r3, [r7, #48]	@ 0x30
 8003412:	2300      	movs	r3, #0
 8003414:	637b      	str	r3, [r7, #52]	@ 0x34
 8003416:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800341a:	4622      	mov	r2, r4
 800341c:	462b      	mov	r3, r5
 800341e:	f04f 0000 	mov.w	r0, #0
 8003422:	f04f 0100 	mov.w	r1, #0
 8003426:	0159      	lsls	r1, r3, #5
 8003428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800342c:	0150      	lsls	r0, r2, #5
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4621      	mov	r1, r4
 8003434:	1a51      	subs	r1, r2, r1
 8003436:	6139      	str	r1, [r7, #16]
 8003438:	4629      	mov	r1, r5
 800343a:	eb63 0301 	sbc.w	r3, r3, r1
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800344c:	4659      	mov	r1, fp
 800344e:	018b      	lsls	r3, r1, #6
 8003450:	4651      	mov	r1, sl
 8003452:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003456:	4651      	mov	r1, sl
 8003458:	018a      	lsls	r2, r1, #6
 800345a:	4651      	mov	r1, sl
 800345c:	ebb2 0801 	subs.w	r8, r2, r1
 8003460:	4659      	mov	r1, fp
 8003462:	eb63 0901 	sbc.w	r9, r3, r1
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347a:	4690      	mov	r8, r2
 800347c:	4699      	mov	r9, r3
 800347e:	4623      	mov	r3, r4
 8003480:	eb18 0303 	adds.w	r3, r8, r3
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	462b      	mov	r3, r5
 8003488:	eb49 0303 	adc.w	r3, r9, r3
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800349a:	4629      	mov	r1, r5
 800349c:	024b      	lsls	r3, r1, #9
 800349e:	4621      	mov	r1, r4
 80034a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034a4:	4621      	mov	r1, r4
 80034a6:	024a      	lsls	r2, r1, #9
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ae:	2200      	movs	r2, #0
 80034b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034b8:	f7fc ff1a 	bl	80002f0 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c4:	e058      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c6:	4b38      	ldr	r3, [pc, #224]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	099b      	lsrs	r3, r3, #6
 80034cc:	2200      	movs	r2, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	4611      	mov	r1, r2
 80034d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24
 80034dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	f04f 0000 	mov.w	r0, #0
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	0159      	lsls	r1, r3, #5
 80034ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f2:	0150      	lsls	r0, r2, #5
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4641      	mov	r1, r8
 80034fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80034fe:	4649      	mov	r1, r9
 8003500:	eb63 0b01 	sbc.w	fp, r3, r1
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003510:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003514:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003518:	ebb2 040a 	subs.w	r4, r2, sl
 800351c:	eb63 050b 	sbc.w	r5, r3, fp
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	00eb      	lsls	r3, r5, #3
 800352a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800352e:	00e2      	lsls	r2, r4, #3
 8003530:	4614      	mov	r4, r2
 8003532:	461d      	mov	r5, r3
 8003534:	4643      	mov	r3, r8
 8003536:	18e3      	adds	r3, r4, r3
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	464b      	mov	r3, r9
 800353c:	eb45 0303 	adc.w	r3, r5, r3
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800354e:	4629      	mov	r1, r5
 8003550:	028b      	lsls	r3, r1, #10
 8003552:	4621      	mov	r1, r4
 8003554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003558:	4621      	mov	r1, r4
 800355a:	028a      	lsls	r2, r1, #10
 800355c:	4610      	mov	r0, r2
 800355e:	4619      	mov	r1, r3
 8003560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003562:	2200      	movs	r2, #0
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	61fa      	str	r2, [r7, #28]
 8003568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800356c:	f7fc fec0 	bl	80002f0 <__aeabi_uldivmod>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4613      	mov	r3, r2
 8003576:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003578:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	0c1b      	lsrs	r3, r3, #16
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	3301      	adds	r3, #1
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003588:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800358a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003592:	e002      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003594:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003596:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800359c:	4618      	mov	r0, r3
 800359e:	3750      	adds	r7, #80	@ 0x50
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	007a1200 	.word	0x007a1200

080035b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b8:	4b03      	ldr	r3, [pc, #12]	@ (80035c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000000 	.word	0x20000000

080035cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035d0:	f7ff fff0 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	0a9b      	lsrs	r3, r3, #10
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	4903      	ldr	r1, [pc, #12]	@ (80035f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e2:	5ccb      	ldrb	r3, [r1, r3]
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40023800 	.word	0x40023800
 80035f0:	0800b93c 	.word	0x0800b93c

080035f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035f8:	f7ff ffdc 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	0b5b      	lsrs	r3, r3, #13
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	4903      	ldr	r1, [pc, #12]	@ (8003618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40023800 	.word	0x40023800
 8003618:	0800b93c 	.word	0x0800b93c

0800361c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	220f      	movs	r2, #15
 800362a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800362c:	4b12      	ldr	r3, [pc, #72]	@ (8003678 <HAL_RCC_GetClockConfig+0x5c>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0203 	and.w	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003638:	4b0f      	ldr	r3, [pc, #60]	@ (8003678 <HAL_RCC_GetClockConfig+0x5c>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003644:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <HAL_RCC_GetClockConfig+0x5c>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003650:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <HAL_RCC_GetClockConfig+0x5c>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	08db      	lsrs	r3, r3, #3
 8003656:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800365e:	4b07      	ldr	r3, [pc, #28]	@ (800367c <HAL_RCC_GetClockConfig+0x60>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 020f 	and.w	r2, r3, #15
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	601a      	str	r2, [r3, #0]
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	40023c00 	.word	0x40023c00

08003680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d012      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036a8:	4b69      	ldr	r3, [pc, #420]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4a68      	ldr	r2, [pc, #416]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80036b2:	6093      	str	r3, [r2, #8]
 80036b4:	4b66      	ldr	r3, [pc, #408]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036bc:	4964      	ldr	r1, [pc, #400]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d017      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036da:	4b5d      	ldr	r3, [pc, #372]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e8:	4959      	ldr	r1, [pc, #356]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036f8:	d101      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036fa:	2301      	movs	r3, #1
 80036fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003706:	2301      	movs	r3, #1
 8003708:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d017      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003716:	4b4e      	ldr	r3, [pc, #312]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800371c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003724:	494a      	ldr	r1, [pc, #296]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003734:	d101      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003742:	2301      	movs	r3, #1
 8003744:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003752:	2301      	movs	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 808b 	beq.w	800387a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003764:	4b3a      	ldr	r3, [pc, #232]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	4a39      	ldr	r2, [pc, #228]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800376e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003770:	4b37      	ldr	r3, [pc, #220]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800377c:	4b35      	ldr	r3, [pc, #212]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a34      	ldr	r2, [pc, #208]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003788:	f7fd fe84 	bl	8001494 <HAL_GetTick>
 800378c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003790:	f7fd fe80 	bl	8001494 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	@ 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e38f      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037ae:	4b28      	ldr	r3, [pc, #160]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d035      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d02e      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037cc:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	4a1d      	ldr	r2, [pc, #116]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037ee:	4a18      	ldr	r2, [pc, #96]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037f4:	4b16      	ldr	r3, [pc, #88]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d114      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fd fe48 	bl	8001494 <HAL_GetTick>
 8003804:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003806:	e00a      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7fd fe44 	bl	8001494 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e351      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	4b0c      	ldr	r3, [pc, #48]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ee      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003836:	d111      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003838:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003844:	4b04      	ldr	r3, [pc, #16]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003846:	400b      	ands	r3, r1
 8003848:	4901      	ldr	r1, [pc, #4]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
 800384e:	e00b      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003850:	40023800 	.word	0x40023800
 8003854:	40007000 	.word	0x40007000
 8003858:	0ffffcff 	.word	0x0ffffcff
 800385c:	4bac      	ldr	r3, [pc, #688]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4aab      	ldr	r2, [pc, #684]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003862:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003866:	6093      	str	r3, [r2, #8]
 8003868:	4ba9      	ldr	r3, [pc, #676]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003874:	49a6      	ldr	r1, [pc, #664]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003876:	4313      	orrs	r3, r2
 8003878:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	2b00      	cmp	r3, #0
 8003884:	d010      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003886:	4ba2      	ldr	r3, [pc, #648]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800388c:	4aa0      	ldr	r2, [pc, #640]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003892:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003896:	4b9e      	ldr	r3, [pc, #632]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003898:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a0:	499b      	ldr	r1, [pc, #620]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b4:	4b96      	ldr	r3, [pc, #600]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c2:	4993      	ldr	r1, [pc, #588]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038d6:	4b8e      	ldr	r3, [pc, #568]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038e4:	498a      	ldr	r1, [pc, #552]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038f8:	4b85      	ldr	r3, [pc, #532]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003906:	4982      	ldr	r1, [pc, #520]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800391a:	4b7d      	ldr	r3, [pc, #500]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003920:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003928:	4979      	ldr	r1, [pc, #484]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800393c:	4b74      	ldr	r3, [pc, #464]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394a:	4971      	ldr	r1, [pc, #452]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800395e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003964:	f023 020c 	bic.w	r2, r3, #12
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800396c:	4968      	ldr	r1, [pc, #416]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003980:	4b63      	ldr	r3, [pc, #396]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003986:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398e:	4960      	ldr	r1, [pc, #384]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b0:	4957      	ldr	r1, [pc, #348]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039c4:	4b52      	ldr	r3, [pc, #328]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d2:	494f      	ldr	r1, [pc, #316]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f4:	4946      	ldr	r1, [pc, #280]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a08:	4b41      	ldr	r3, [pc, #260]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a16:	493e      	ldr	r1, [pc, #248]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a2a:	4b39      	ldr	r3, [pc, #228]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a38:	4935      	ldr	r1, [pc, #212]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a4c:	4b30      	ldr	r3, [pc, #192]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a5a:	492d      	ldr	r1, [pc, #180]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d011      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a6e:	4b28      	ldr	r3, [pc, #160]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a74:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a7c:	4924      	ldr	r1, [pc, #144]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aae:	4b18      	ldr	r3, [pc, #96]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003abc:	4914      	ldr	r1, [pc, #80]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ae0:	490b      	ldr	r1, [pc, #44]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00f      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003af4:	4b06      	ldr	r3, [pc, #24]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b04:	4902      	ldr	r1, [pc, #8]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b0c:	e002      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b20:	4b8a      	ldr	r3, [pc, #552]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b30:	4986      	ldr	r1, [pc, #536]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00b      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b44:	4b81      	ldr	r3, [pc, #516]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b4a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b54:	497d      	ldr	r1, [pc, #500]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d006      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80d6 	beq.w	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b70:	4b76      	ldr	r3, [pc, #472]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a75      	ldr	r2, [pc, #468]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7c:	f7fd fc8a 	bl	8001494 <HAL_GetTick>
 8003b80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b84:	f7fd fc86 	bl	8001494 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	@ 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e195      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b96:	4b6d      	ldr	r3, [pc, #436]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d021      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d11d      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bb6:	4b65      	ldr	r3, [pc, #404]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bc4:	4b61      	ldr	r3, [pc, #388]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bca:	0e1b      	lsrs	r3, r3, #24
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	019a      	lsls	r2, r3, #6
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	041b      	lsls	r3, r3, #16
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	071b      	lsls	r3, r3, #28
 8003bea:	4958      	ldr	r1, [pc, #352]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d02e      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c1c:	d129      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c2c:	4b47      	ldr	r3, [pc, #284]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c32:	0f1b      	lsrs	r3, r3, #28
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	019a      	lsls	r2, r3, #6
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	061b      	lsls	r3, r3, #24
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	071b      	lsls	r3, r3, #28
 8003c52:	493e      	ldr	r1, [pc, #248]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c5a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c60:	f023 021f 	bic.w	r2, r3, #31
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	4938      	ldr	r1, [pc, #224]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01d      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c7e:	4b33      	ldr	r3, [pc, #204]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c84:	0e1b      	lsrs	r3, r3, #24
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c92:	0f1b      	lsrs	r3, r3, #28
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	019a      	lsls	r2, r3, #6
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	061b      	lsls	r3, r3, #24
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	071b      	lsls	r3, r3, #28
 8003cb2:	4926      	ldr	r1, [pc, #152]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d011      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	019a      	lsls	r2, r3, #6
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	041b      	lsls	r3, r3, #16
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	061b      	lsls	r3, r3, #24
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	071b      	lsls	r3, r3, #28
 8003ce2:	491a      	ldr	r1, [pc, #104]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cea:	4b18      	ldr	r3, [pc, #96]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf6:	f7fd fbcd 	bl	8001494 <HAL_GetTick>
 8003cfa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cfe:	f7fd fbc9 	bl	8001494 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b64      	cmp	r3, #100	@ 0x64
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e0d8      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d10:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	f040 80ce 	bne.w	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d24:	4b09      	ldr	r3, [pc, #36]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a08      	ldr	r2, [pc, #32]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d30:	f7fd fbb0 	bl	8001494 <HAL_GetTick>
 8003d34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d36:	e00b      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d38:	f7fd fbac 	bl	8001494 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	@ 0x64
 8003d44:	d904      	bls.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e0bb      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d4a:	bf00      	nop
 8003d4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d50:	4b5e      	ldr	r3, [pc, #376]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d5c:	d0ec      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d02e      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d12a      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d86:	4b51      	ldr	r3, [pc, #324]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8c:	0c1b      	lsrs	r3, r3, #16
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d94:	4b4d      	ldr	r3, [pc, #308]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9a:	0f1b      	lsrs	r3, r3, #28
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	019a      	lsls	r2, r3, #6
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	061b      	lsls	r3, r3, #24
 8003db4:	431a      	orrs	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	071b      	lsls	r3, r3, #28
 8003dba:	4944      	ldr	r1, [pc, #272]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dc2:	4b42      	ldr	r3, [pc, #264]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dc8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	493d      	ldr	r1, [pc, #244]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d022      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003df0:	d11d      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003df2:	4b36      	ldr	r3, [pc, #216]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df8:	0e1b      	lsrs	r3, r3, #24
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e00:	4b32      	ldr	r3, [pc, #200]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	0f1b      	lsrs	r3, r3, #28
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	019a      	lsls	r2, r3, #6
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	061b      	lsls	r3, r3, #24
 8003e20:	431a      	orrs	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	071b      	lsls	r3, r3, #28
 8003e26:	4929      	ldr	r1, [pc, #164]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d028      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e3a:	4b24      	ldr	r3, [pc, #144]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e40:	0e1b      	lsrs	r3, r3, #24
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e48:	4b20      	ldr	r3, [pc, #128]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4e:	0c1b      	lsrs	r3, r3, #16
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	019a      	lsls	r2, r3, #6
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	041b      	lsls	r3, r3, #16
 8003e60:	431a      	orrs	r2, r3
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	061b      	lsls	r3, r3, #24
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	071b      	lsls	r3, r3, #28
 8003e6e:	4917      	ldr	r1, [pc, #92]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e76:	4b15      	ldr	r3, [pc, #84]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	4911      	ldr	r1, [pc, #68]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0e      	ldr	r2, [pc, #56]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e98:	f7fd fafc 	bl	8001494 <HAL_GetTick>
 8003e9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ea0:	f7fd faf8 	bl	8001494 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	@ 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e007      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eb2:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003eba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ebe:	d1ef      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800

08003ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e049      	b.n	8003f76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f841 	bl	8003f7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f000 f9e8 	bl	80042e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d001      	beq.n	8003fac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e054      	b.n	8004056 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a26      	ldr	r2, [pc, #152]	@ (8004064 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d022      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd6:	d01d      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a22      	ldr	r2, [pc, #136]	@ (8004068 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d018      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a21      	ldr	r2, [pc, #132]	@ (800406c <HAL_TIM_Base_Start_IT+0xd8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8004070 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8004074 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d009      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1c      	ldr	r2, [pc, #112]	@ (8004078 <HAL_TIM_Base_Start_IT+0xe4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x80>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1b      	ldr	r2, [pc, #108]	@ (800407c <HAL_TIM_Base_Start_IT+0xe8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d115      	bne.n	8004040 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	4b19      	ldr	r3, [pc, #100]	@ (8004080 <HAL_TIM_Base_Start_IT+0xec>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b06      	cmp	r3, #6
 8004024:	d015      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0xbe>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402c:	d011      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	e008      	b.n	8004052 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e000      	b.n	8004054 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40010000 	.word	0x40010000
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40000c00 	.word	0x40000c00
 8004074:	40010400 	.word	0x40010400
 8004078:	40014000 	.word	0x40014000
 800407c:	40001800 	.word	0x40001800
 8004080:	00010007 	.word	0x00010007

08004084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d020      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01b      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0202 	mvn.w	r2, #2
 80040b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f8e9 	bl	80042a6 <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f8db 	bl	8004292 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f8ec 	bl	80042ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d020      	beq.n	8004134 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01b      	beq.n	8004134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0204 	mvn.w	r2, #4
 8004104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f8c3 	bl	80042a6 <HAL_TIM_IC_CaptureCallback>
 8004120:	e005      	b.n	800412e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f8b5 	bl	8004292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f8c6 	bl	80042ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d020      	beq.n	8004180 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01b      	beq.n	8004180 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0208 	mvn.w	r2, #8
 8004150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2204      	movs	r2, #4
 8004156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f89d 	bl	80042a6 <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f88f 	bl	8004292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f8a0 	bl	80042ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d020      	beq.n	80041cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01b      	beq.n	80041cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0210 	mvn.w	r2, #16
 800419c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2208      	movs	r2, #8
 80041a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f877 	bl	80042a6 <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f869 	bl	8004292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f87a 	bl	80042ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00c      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0201 	mvn.w	r2, #1
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc fd80 	bl	8000cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d104      	bne.n	8004204 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00c      	beq.n	800421e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f913 	bl	8004444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00c      	beq.n	8004242 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800423a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f90b 	bl	8004458 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00c      	beq.n	8004266 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800425e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f834 	bl	80042ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00c      	beq.n	800428a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f06f 0220 	mvn.w	r2, #32
 8004282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f8d3 	bl	8004430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a43      	ldr	r2, [pc, #268]	@ (8004404 <TIM_Base_SetConfig+0x120>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004302:	d00f      	beq.n	8004324 <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a40      	ldr	r2, [pc, #256]	@ (8004408 <TIM_Base_SetConfig+0x124>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00b      	beq.n	8004324 <TIM_Base_SetConfig+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a3f      	ldr	r2, [pc, #252]	@ (800440c <TIM_Base_SetConfig+0x128>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d007      	beq.n	8004324 <TIM_Base_SetConfig+0x40>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a3e      	ldr	r2, [pc, #248]	@ (8004410 <TIM_Base_SetConfig+0x12c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_Base_SetConfig+0x40>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a3d      	ldr	r2, [pc, #244]	@ (8004414 <TIM_Base_SetConfig+0x130>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d108      	bne.n	8004336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800432a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a32      	ldr	r2, [pc, #200]	@ (8004404 <TIM_Base_SetConfig+0x120>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d02b      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004344:	d027      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a2f      	ldr	r2, [pc, #188]	@ (8004408 <TIM_Base_SetConfig+0x124>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d023      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a2e      	ldr	r2, [pc, #184]	@ (800440c <TIM_Base_SetConfig+0x128>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01f      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a2d      	ldr	r2, [pc, #180]	@ (8004410 <TIM_Base_SetConfig+0x12c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01b      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a2c      	ldr	r2, [pc, #176]	@ (8004414 <TIM_Base_SetConfig+0x130>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d017      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2b      	ldr	r2, [pc, #172]	@ (8004418 <TIM_Base_SetConfig+0x134>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a2a      	ldr	r2, [pc, #168]	@ (800441c <TIM_Base_SetConfig+0x138>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00f      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a29      	ldr	r2, [pc, #164]	@ (8004420 <TIM_Base_SetConfig+0x13c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00b      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a28      	ldr	r2, [pc, #160]	@ (8004424 <TIM_Base_SetConfig+0x140>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a27      	ldr	r2, [pc, #156]	@ (8004428 <TIM_Base_SetConfig+0x144>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a26      	ldr	r2, [pc, #152]	@ (800442c <TIM_Base_SetConfig+0x148>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d108      	bne.n	80043a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800439c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004404 <TIM_Base_SetConfig+0x120>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d003      	beq.n	80043d6 <TIM_Base_SetConfig+0xf2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a10      	ldr	r2, [pc, #64]	@ (8004414 <TIM_Base_SetConfig+0x130>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d103      	bne.n	80043de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f043 0204 	orr.w	r2, r3, #4
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	601a      	str	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40010000 	.word	0x40010000
 8004408:	40000400 	.word	0x40000400
 800440c:	40000800 	.word	0x40000800
 8004410:	40000c00 	.word	0x40000c00
 8004414:	40010400 	.word	0x40010400
 8004418:	40014000 	.word	0x40014000
 800441c:	40014400 	.word	0x40014400
 8004420:	40014800 	.word	0x40014800
 8004424:	40001800 	.word	0x40001800
 8004428:	40001c00 	.word	0x40001c00
 800442c:	40002000 	.word	0x40002000

08004430 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e040      	b.n	8004500 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fc fd66 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2224      	movs	r2, #36	@ 0x24
 8004498:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0201 	bic.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fa8c 	bl	80049d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f825 	bl	8004508 <UART_SetConfig>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e01b      	b.n	8004500 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fb0b 	bl	8004b14 <UART_CheckIdleState>
 80044fe:	4603      	mov	r3, r0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4ba6      	ldr	r3, [pc, #664]	@ (80047cc <UART_SetConfig+0x2c4>)
 8004534:	4013      	ands	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	6979      	ldr	r1, [r7, #20]
 800453c:	430b      	orrs	r3, r1
 800453e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	430a      	orrs	r2, r1
 8004578:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a94      	ldr	r2, [pc, #592]	@ (80047d0 <UART_SetConfig+0x2c8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d120      	bne.n	80045c6 <UART_SetConfig+0xbe>
 8004584:	4b93      	ldr	r3, [pc, #588]	@ (80047d4 <UART_SetConfig+0x2cc>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	2b03      	cmp	r3, #3
 8004590:	d816      	bhi.n	80045c0 <UART_SetConfig+0xb8>
 8004592:	a201      	add	r2, pc, #4	@ (adr r2, 8004598 <UART_SetConfig+0x90>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045b5 	.word	0x080045b5
 80045a0:	080045af 	.word	0x080045af
 80045a4:	080045bb 	.word	0x080045bb
 80045a8:	2301      	movs	r3, #1
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e150      	b.n	8004850 <UART_SetConfig+0x348>
 80045ae:	2302      	movs	r3, #2
 80045b0:	77fb      	strb	r3, [r7, #31]
 80045b2:	e14d      	b.n	8004850 <UART_SetConfig+0x348>
 80045b4:	2304      	movs	r3, #4
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	e14a      	b.n	8004850 <UART_SetConfig+0x348>
 80045ba:	2308      	movs	r3, #8
 80045bc:	77fb      	strb	r3, [r7, #31]
 80045be:	e147      	b.n	8004850 <UART_SetConfig+0x348>
 80045c0:	2310      	movs	r3, #16
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e144      	b.n	8004850 <UART_SetConfig+0x348>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a83      	ldr	r2, [pc, #524]	@ (80047d8 <UART_SetConfig+0x2d0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d132      	bne.n	8004636 <UART_SetConfig+0x12e>
 80045d0:	4b80      	ldr	r3, [pc, #512]	@ (80047d4 <UART_SetConfig+0x2cc>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b0c      	cmp	r3, #12
 80045dc:	d828      	bhi.n	8004630 <UART_SetConfig+0x128>
 80045de:	a201      	add	r2, pc, #4	@ (adr r2, 80045e4 <UART_SetConfig+0xdc>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	08004619 	.word	0x08004619
 80045e8:	08004631 	.word	0x08004631
 80045ec:	08004631 	.word	0x08004631
 80045f0:	08004631 	.word	0x08004631
 80045f4:	08004625 	.word	0x08004625
 80045f8:	08004631 	.word	0x08004631
 80045fc:	08004631 	.word	0x08004631
 8004600:	08004631 	.word	0x08004631
 8004604:	0800461f 	.word	0x0800461f
 8004608:	08004631 	.word	0x08004631
 800460c:	08004631 	.word	0x08004631
 8004610:	08004631 	.word	0x08004631
 8004614:	0800462b 	.word	0x0800462b
 8004618:	2300      	movs	r3, #0
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e118      	b.n	8004850 <UART_SetConfig+0x348>
 800461e:	2302      	movs	r3, #2
 8004620:	77fb      	strb	r3, [r7, #31]
 8004622:	e115      	b.n	8004850 <UART_SetConfig+0x348>
 8004624:	2304      	movs	r3, #4
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e112      	b.n	8004850 <UART_SetConfig+0x348>
 800462a:	2308      	movs	r3, #8
 800462c:	77fb      	strb	r3, [r7, #31]
 800462e:	e10f      	b.n	8004850 <UART_SetConfig+0x348>
 8004630:	2310      	movs	r3, #16
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e10c      	b.n	8004850 <UART_SetConfig+0x348>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a68      	ldr	r2, [pc, #416]	@ (80047dc <UART_SetConfig+0x2d4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d120      	bne.n	8004682 <UART_SetConfig+0x17a>
 8004640:	4b64      	ldr	r3, [pc, #400]	@ (80047d4 <UART_SetConfig+0x2cc>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004646:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800464a:	2b30      	cmp	r3, #48	@ 0x30
 800464c:	d013      	beq.n	8004676 <UART_SetConfig+0x16e>
 800464e:	2b30      	cmp	r3, #48	@ 0x30
 8004650:	d814      	bhi.n	800467c <UART_SetConfig+0x174>
 8004652:	2b20      	cmp	r3, #32
 8004654:	d009      	beq.n	800466a <UART_SetConfig+0x162>
 8004656:	2b20      	cmp	r3, #32
 8004658:	d810      	bhi.n	800467c <UART_SetConfig+0x174>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <UART_SetConfig+0x15c>
 800465e:	2b10      	cmp	r3, #16
 8004660:	d006      	beq.n	8004670 <UART_SetConfig+0x168>
 8004662:	e00b      	b.n	800467c <UART_SetConfig+0x174>
 8004664:	2300      	movs	r3, #0
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e0f2      	b.n	8004850 <UART_SetConfig+0x348>
 800466a:	2302      	movs	r3, #2
 800466c:	77fb      	strb	r3, [r7, #31]
 800466e:	e0ef      	b.n	8004850 <UART_SetConfig+0x348>
 8004670:	2304      	movs	r3, #4
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e0ec      	b.n	8004850 <UART_SetConfig+0x348>
 8004676:	2308      	movs	r3, #8
 8004678:	77fb      	strb	r3, [r7, #31]
 800467a:	e0e9      	b.n	8004850 <UART_SetConfig+0x348>
 800467c:	2310      	movs	r3, #16
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e0e6      	b.n	8004850 <UART_SetConfig+0x348>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a56      	ldr	r2, [pc, #344]	@ (80047e0 <UART_SetConfig+0x2d8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d120      	bne.n	80046ce <UART_SetConfig+0x1c6>
 800468c:	4b51      	ldr	r3, [pc, #324]	@ (80047d4 <UART_SetConfig+0x2cc>)
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004692:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004696:	2bc0      	cmp	r3, #192	@ 0xc0
 8004698:	d013      	beq.n	80046c2 <UART_SetConfig+0x1ba>
 800469a:	2bc0      	cmp	r3, #192	@ 0xc0
 800469c:	d814      	bhi.n	80046c8 <UART_SetConfig+0x1c0>
 800469e:	2b80      	cmp	r3, #128	@ 0x80
 80046a0:	d009      	beq.n	80046b6 <UART_SetConfig+0x1ae>
 80046a2:	2b80      	cmp	r3, #128	@ 0x80
 80046a4:	d810      	bhi.n	80046c8 <UART_SetConfig+0x1c0>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <UART_SetConfig+0x1a8>
 80046aa:	2b40      	cmp	r3, #64	@ 0x40
 80046ac:	d006      	beq.n	80046bc <UART_SetConfig+0x1b4>
 80046ae:	e00b      	b.n	80046c8 <UART_SetConfig+0x1c0>
 80046b0:	2300      	movs	r3, #0
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e0cc      	b.n	8004850 <UART_SetConfig+0x348>
 80046b6:	2302      	movs	r3, #2
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	e0c9      	b.n	8004850 <UART_SetConfig+0x348>
 80046bc:	2304      	movs	r3, #4
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e0c6      	b.n	8004850 <UART_SetConfig+0x348>
 80046c2:	2308      	movs	r3, #8
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e0c3      	b.n	8004850 <UART_SetConfig+0x348>
 80046c8:	2310      	movs	r3, #16
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e0c0      	b.n	8004850 <UART_SetConfig+0x348>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a44      	ldr	r2, [pc, #272]	@ (80047e4 <UART_SetConfig+0x2dc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d125      	bne.n	8004724 <UART_SetConfig+0x21c>
 80046d8:	4b3e      	ldr	r3, [pc, #248]	@ (80047d4 <UART_SetConfig+0x2cc>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046e6:	d017      	beq.n	8004718 <UART_SetConfig+0x210>
 80046e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ec:	d817      	bhi.n	800471e <UART_SetConfig+0x216>
 80046ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f2:	d00b      	beq.n	800470c <UART_SetConfig+0x204>
 80046f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f8:	d811      	bhi.n	800471e <UART_SetConfig+0x216>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <UART_SetConfig+0x1fe>
 80046fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004702:	d006      	beq.n	8004712 <UART_SetConfig+0x20a>
 8004704:	e00b      	b.n	800471e <UART_SetConfig+0x216>
 8004706:	2300      	movs	r3, #0
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e0a1      	b.n	8004850 <UART_SetConfig+0x348>
 800470c:	2302      	movs	r3, #2
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e09e      	b.n	8004850 <UART_SetConfig+0x348>
 8004712:	2304      	movs	r3, #4
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e09b      	b.n	8004850 <UART_SetConfig+0x348>
 8004718:	2308      	movs	r3, #8
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e098      	b.n	8004850 <UART_SetConfig+0x348>
 800471e:	2310      	movs	r3, #16
 8004720:	77fb      	strb	r3, [r7, #31]
 8004722:	e095      	b.n	8004850 <UART_SetConfig+0x348>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a2f      	ldr	r2, [pc, #188]	@ (80047e8 <UART_SetConfig+0x2e0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d125      	bne.n	800477a <UART_SetConfig+0x272>
 800472e:	4b29      	ldr	r3, [pc, #164]	@ (80047d4 <UART_SetConfig+0x2cc>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004734:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004738:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800473c:	d017      	beq.n	800476e <UART_SetConfig+0x266>
 800473e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004742:	d817      	bhi.n	8004774 <UART_SetConfig+0x26c>
 8004744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004748:	d00b      	beq.n	8004762 <UART_SetConfig+0x25a>
 800474a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800474e:	d811      	bhi.n	8004774 <UART_SetConfig+0x26c>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <UART_SetConfig+0x254>
 8004754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004758:	d006      	beq.n	8004768 <UART_SetConfig+0x260>
 800475a:	e00b      	b.n	8004774 <UART_SetConfig+0x26c>
 800475c:	2301      	movs	r3, #1
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e076      	b.n	8004850 <UART_SetConfig+0x348>
 8004762:	2302      	movs	r3, #2
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e073      	b.n	8004850 <UART_SetConfig+0x348>
 8004768:	2304      	movs	r3, #4
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e070      	b.n	8004850 <UART_SetConfig+0x348>
 800476e:	2308      	movs	r3, #8
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e06d      	b.n	8004850 <UART_SetConfig+0x348>
 8004774:	2310      	movs	r3, #16
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e06a      	b.n	8004850 <UART_SetConfig+0x348>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1b      	ldr	r2, [pc, #108]	@ (80047ec <UART_SetConfig+0x2e4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d138      	bne.n	80047f6 <UART_SetConfig+0x2ee>
 8004784:	4b13      	ldr	r3, [pc, #76]	@ (80047d4 <UART_SetConfig+0x2cc>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800478e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004792:	d017      	beq.n	80047c4 <UART_SetConfig+0x2bc>
 8004794:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004798:	d82a      	bhi.n	80047f0 <UART_SetConfig+0x2e8>
 800479a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800479e:	d00b      	beq.n	80047b8 <UART_SetConfig+0x2b0>
 80047a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047a4:	d824      	bhi.n	80047f0 <UART_SetConfig+0x2e8>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <UART_SetConfig+0x2aa>
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ae:	d006      	beq.n	80047be <UART_SetConfig+0x2b6>
 80047b0:	e01e      	b.n	80047f0 <UART_SetConfig+0x2e8>
 80047b2:	2300      	movs	r3, #0
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e04b      	b.n	8004850 <UART_SetConfig+0x348>
 80047b8:	2302      	movs	r3, #2
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e048      	b.n	8004850 <UART_SetConfig+0x348>
 80047be:	2304      	movs	r3, #4
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e045      	b.n	8004850 <UART_SetConfig+0x348>
 80047c4:	2308      	movs	r3, #8
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e042      	b.n	8004850 <UART_SetConfig+0x348>
 80047ca:	bf00      	nop
 80047cc:	efff69f3 	.word	0xefff69f3
 80047d0:	40011000 	.word	0x40011000
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40004400 	.word	0x40004400
 80047dc:	40004800 	.word	0x40004800
 80047e0:	40004c00 	.word	0x40004c00
 80047e4:	40005000 	.word	0x40005000
 80047e8:	40011400 	.word	0x40011400
 80047ec:	40007800 	.word	0x40007800
 80047f0:	2310      	movs	r3, #16
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e02c      	b.n	8004850 <UART_SetConfig+0x348>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a72      	ldr	r2, [pc, #456]	@ (80049c4 <UART_SetConfig+0x4bc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d125      	bne.n	800484c <UART_SetConfig+0x344>
 8004800:	4b71      	ldr	r3, [pc, #452]	@ (80049c8 <UART_SetConfig+0x4c0>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004806:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800480a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800480e:	d017      	beq.n	8004840 <UART_SetConfig+0x338>
 8004810:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004814:	d817      	bhi.n	8004846 <UART_SetConfig+0x33e>
 8004816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800481a:	d00b      	beq.n	8004834 <UART_SetConfig+0x32c>
 800481c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004820:	d811      	bhi.n	8004846 <UART_SetConfig+0x33e>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <UART_SetConfig+0x326>
 8004826:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800482a:	d006      	beq.n	800483a <UART_SetConfig+0x332>
 800482c:	e00b      	b.n	8004846 <UART_SetConfig+0x33e>
 800482e:	2300      	movs	r3, #0
 8004830:	77fb      	strb	r3, [r7, #31]
 8004832:	e00d      	b.n	8004850 <UART_SetConfig+0x348>
 8004834:	2302      	movs	r3, #2
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e00a      	b.n	8004850 <UART_SetConfig+0x348>
 800483a:	2304      	movs	r3, #4
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	e007      	b.n	8004850 <UART_SetConfig+0x348>
 8004840:	2308      	movs	r3, #8
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	e004      	b.n	8004850 <UART_SetConfig+0x348>
 8004846:	2310      	movs	r3, #16
 8004848:	77fb      	strb	r3, [r7, #31]
 800484a:	e001      	b.n	8004850 <UART_SetConfig+0x348>
 800484c:	2310      	movs	r3, #16
 800484e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004858:	d15b      	bne.n	8004912 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800485a:	7ffb      	ldrb	r3, [r7, #31]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d828      	bhi.n	80048b2 <UART_SetConfig+0x3aa>
 8004860:	a201      	add	r2, pc, #4	@ (adr r2, 8004868 <UART_SetConfig+0x360>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	0800488d 	.word	0x0800488d
 800486c:	08004895 	.word	0x08004895
 8004870:	0800489d 	.word	0x0800489d
 8004874:	080048b3 	.word	0x080048b3
 8004878:	080048a3 	.word	0x080048a3
 800487c:	080048b3 	.word	0x080048b3
 8004880:	080048b3 	.word	0x080048b3
 8004884:	080048b3 	.word	0x080048b3
 8004888:	080048ab 	.word	0x080048ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800488c:	f7fe fe9e 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8004890:	61b8      	str	r0, [r7, #24]
        break;
 8004892:	e013      	b.n	80048bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004894:	f7fe feae 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 8004898:	61b8      	str	r0, [r7, #24]
        break;
 800489a:	e00f      	b.n	80048bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800489c:	4b4b      	ldr	r3, [pc, #300]	@ (80049cc <UART_SetConfig+0x4c4>)
 800489e:	61bb      	str	r3, [r7, #24]
        break;
 80048a0:	e00c      	b.n	80048bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a2:	f7fe fd81 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 80048a6:	61b8      	str	r0, [r7, #24]
        break;
 80048a8:	e008      	b.n	80048bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ae:	61bb      	str	r3, [r7, #24]
        break;
 80048b0:	e004      	b.n	80048bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	77bb      	strb	r3, [r7, #30]
        break;
 80048ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d074      	beq.n	80049ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	005a      	lsls	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	085b      	lsrs	r3, r3, #1
 80048cc:	441a      	add	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b0f      	cmp	r3, #15
 80048dc:	d916      	bls.n	800490c <UART_SetConfig+0x404>
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e4:	d212      	bcs.n	800490c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f023 030f 	bic.w	r3, r3, #15
 80048ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	89fb      	ldrh	r3, [r7, #14]
 80048fe:	4313      	orrs	r3, r2
 8004900:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	89fa      	ldrh	r2, [r7, #14]
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	e04f      	b.n	80049ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	77bb      	strb	r3, [r7, #30]
 8004910:	e04c      	b.n	80049ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004912:	7ffb      	ldrb	r3, [r7, #31]
 8004914:	2b08      	cmp	r3, #8
 8004916:	d828      	bhi.n	800496a <UART_SetConfig+0x462>
 8004918:	a201      	add	r2, pc, #4	@ (adr r2, 8004920 <UART_SetConfig+0x418>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004945 	.word	0x08004945
 8004924:	0800494d 	.word	0x0800494d
 8004928:	08004955 	.word	0x08004955
 800492c:	0800496b 	.word	0x0800496b
 8004930:	0800495b 	.word	0x0800495b
 8004934:	0800496b 	.word	0x0800496b
 8004938:	0800496b 	.word	0x0800496b
 800493c:	0800496b 	.word	0x0800496b
 8004940:	08004963 	.word	0x08004963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004944:	f7fe fe42 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8004948:	61b8      	str	r0, [r7, #24]
        break;
 800494a:	e013      	b.n	8004974 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7fe fe52 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 8004950:	61b8      	str	r0, [r7, #24]
        break;
 8004952:	e00f      	b.n	8004974 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004954:	4b1d      	ldr	r3, [pc, #116]	@ (80049cc <UART_SetConfig+0x4c4>)
 8004956:	61bb      	str	r3, [r7, #24]
        break;
 8004958:	e00c      	b.n	8004974 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495a:	f7fe fd25 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 800495e:	61b8      	str	r0, [r7, #24]
        break;
 8004960:	e008      	b.n	8004974 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004966:	61bb      	str	r3, [r7, #24]
        break;
 8004968:	e004      	b.n	8004974 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	77bb      	strb	r3, [r7, #30]
        break;
 8004972:	bf00      	nop
    }

    if (pclk != 0U)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d018      	beq.n	80049ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	085a      	lsrs	r2, r3, #1
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	441a      	add	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b0f      	cmp	r3, #15
 8004992:	d909      	bls.n	80049a8 <UART_SetConfig+0x4a0>
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800499a:	d205      	bcs.n	80049a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60da      	str	r2, [r3, #12]
 80049a6:	e001      	b.n	80049ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40007c00 	.word	0x40007c00
 80049c8:	40023800 	.word	0x40023800
 80049cc:	00f42400 	.word	0x00f42400

080049d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01a      	beq.n	8004ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ace:	d10a      	bne.n	8004ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	605a      	str	r2, [r3, #4]
  }
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b098      	sub	sp, #96	@ 0x60
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b24:	f7fc fcb6 	bl	8001494 <HAL_GetTick>
 8004b28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d12e      	bne.n	8004b96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b40:	2200      	movs	r2, #0
 8004b42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f88c 	bl	8004c64 <UART_WaitOnFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d021      	beq.n	8004b96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b66:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e6      	bne.n	8004b52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e062      	b.n	8004c5c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d149      	bne.n	8004c38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bac:	2200      	movs	r2, #0
 8004bae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f856 	bl	8004c64 <UART_WaitOnFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d03c      	beq.n	8004c38 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	623b      	str	r3, [r7, #32]
   return(result);
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e6      	bne.n	8004bbe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c10:	61fa      	str	r2, [r7, #28]
 8004c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	69b9      	ldr	r1, [r7, #24]
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e5      	bne.n	8004bf0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e011      	b.n	8004c5c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3758      	adds	r7, #88	@ 0x58
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	4613      	mov	r3, r2
 8004c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c74:	e04f      	b.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7c:	d04b      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7e:	f7fc fc09 	bl	8001494 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d302      	bcc.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e04e      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d037      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b80      	cmp	r3, #128	@ 0x80
 8004caa:	d034      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b40      	cmp	r3, #64	@ 0x40
 8004cb0:	d031      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d110      	bne.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f838 	bl	8004d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e029      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cf0:	d111      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f81e 	bl	8004d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e00f      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	bf0c      	ite	eq
 8004d26:	2301      	moveq	r3, #1
 8004d28:	2300      	movne	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d0a0      	beq.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b095      	sub	sp, #84	@ 0x54
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d64:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e6      	bne.n	8004d46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3308      	adds	r3, #8
 8004d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004da0:	e841 2300 	strex	r3, r2, [r1]
 8004da4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e5      	bne.n	8004d78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d118      	bne.n	8004de6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f023 0310 	bic.w	r3, r3, #16
 8004dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dd2:	61bb      	str	r3, [r7, #24]
 8004dd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6979      	ldr	r1, [r7, #20]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	613b      	str	r3, [r7, #16]
   return(result);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e6      	bne.n	8004db4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004dfa:	bf00      	nop
 8004dfc:	3754      	adds	r7, #84	@ 0x54
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e08:	b084      	sub	sp, #16
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	f107 001c 	add.w	r0, r7, #28
 8004e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d121      	bne.n	8004e66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	4b21      	ldr	r3, [pc, #132]	@ (8004eb8 <USB_CoreInit+0xb0>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d105      	bne.n	8004e5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fa92 	bl	8005384 <USB_CoreReset>
 8004e60:	4603      	mov	r3, r0
 8004e62:	73fb      	strb	r3, [r7, #15]
 8004e64:	e010      	b.n	8004e88 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fa86 	bl	8005384 <USB_CoreReset>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e80:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004e88:	7fbb      	ldrb	r3, [r7, #30]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d10b      	bne.n	8004ea6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f043 0206 	orr.w	r2, r3, #6
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f043 0220 	orr.w	r2, r3, #32
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb2:	b004      	add	sp, #16
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	ffbdffbf 	.word	0xffbdffbf

08004ebc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f023 0201 	bic.w	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004efa:	78fb      	ldrb	r3, [r7, #3]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d115      	bne.n	8004f2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f0c:	200a      	movs	r0, #10
 8004f0e:	f7fc facd 	bl	80014ac <HAL_Delay>
      ms += 10U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	330a      	adds	r3, #10
 8004f16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fa25 	bl	8005368 <USB_GetMode>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d01e      	beq.n	8004f62 <USB_SetCurrentMode+0x84>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f28:	d9f0      	bls.n	8004f0c <USB_SetCurrentMode+0x2e>
 8004f2a:	e01a      	b.n	8004f62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d115      	bne.n	8004f5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f3e:	200a      	movs	r0, #10
 8004f40:	f7fc fab4 	bl	80014ac <HAL_Delay>
      ms += 10U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	330a      	adds	r3, #10
 8004f48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fa0c 	bl	8005368 <USB_GetMode>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <USB_SetCurrentMode+0x84>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f5a:	d9f0      	bls.n	8004f3e <USB_SetCurrentMode+0x60>
 8004f5c:	e001      	b.n	8004f62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e005      	b.n	8004f6e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f66:	d101      	bne.n	8004f6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f78:	b084      	sub	sp, #16
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b086      	sub	sp, #24
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	e009      	b.n	8004fac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	3340      	adds	r3, #64	@ 0x40
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	2b0e      	cmp	r3, #14
 8004fb0:	d9f2      	bls.n	8004f98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d11c      	bne.n	8004ff4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fc8:	f043 0302 	orr.w	r3, r3, #2
 8004fcc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e005      	b.n	8005000 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005006:	461a      	mov	r2, r3
 8005008:	2300      	movs	r3, #0
 800500a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800500c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005010:	2b01      	cmp	r3, #1
 8005012:	d10d      	bne.n	8005030 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800501c:	2100      	movs	r1, #0
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f968 	bl	80052f4 <USB_SetDevSpeed>
 8005024:	e008      	b.n	8005038 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005026:	2101      	movs	r1, #1
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f963 	bl	80052f4 <USB_SetDevSpeed>
 800502e:	e003      	b.n	8005038 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005030:	2103      	movs	r1, #3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f95e 	bl	80052f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005038:	2110      	movs	r1, #16
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8fa 	bl	8005234 <USB_FlushTxFifo>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f924 	bl	8005298 <USB_FlushRxFifo>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005060:	461a      	mov	r2, r3
 8005062:	2300      	movs	r3, #0
 8005064:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800506c:	461a      	mov	r2, r3
 800506e:	2300      	movs	r3, #0
 8005070:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005078:	461a      	mov	r2, r3
 800507a:	2300      	movs	r3, #0
 800507c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	e043      	b.n	800510c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800509a:	d118      	bne.n	80050ce <USB_DevInit+0x156>
    {
      if (i == 0U)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ae:	461a      	mov	r2, r3
 80050b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	e013      	b.n	80050e0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c4:	461a      	mov	r2, r3
 80050c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	e008      	b.n	80050e0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050da:	461a      	mov	r2, r3
 80050dc:	2300      	movs	r3, #0
 80050de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ec:	461a      	mov	r2, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050fe:	461a      	mov	r2, r3
 8005100:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005104:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	3301      	adds	r3, #1
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005110:	461a      	mov	r2, r3
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4293      	cmp	r3, r2
 8005116:	d3b5      	bcc.n	8005084 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	e043      	b.n	80051a6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005134:	d118      	bne.n	8005168 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005148:	461a      	mov	r2, r3
 800514a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	e013      	b.n	800517a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800515e:	461a      	mov	r2, r3
 8005160:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e008      	b.n	800517a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005174:	461a      	mov	r2, r3
 8005176:	2300      	movs	r3, #0
 8005178:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005186:	461a      	mov	r2, r3
 8005188:	2300      	movs	r3, #0
 800518a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005198:	461a      	mov	r2, r3
 800519a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800519e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	3301      	adds	r3, #1
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051aa:	461a      	mov	r2, r3
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d3b5      	bcc.n	800511e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80051d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f043 0210 	orr.w	r2, r3, #16
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	4b0f      	ldr	r3, [pc, #60]	@ (800522c <USB_DevInit+0x2b4>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f043 0208 	orr.w	r2, r3, #8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005208:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800520c:	2b01      	cmp	r3, #1
 800520e:	d105      	bne.n	800521c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	4b06      	ldr	r3, [pc, #24]	@ (8005230 <USB_DevInit+0x2b8>)
 8005216:	4313      	orrs	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800521c:	7dfb      	ldrb	r3, [r7, #23]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005228:	b004      	add	sp, #16
 800522a:	4770      	bx	lr
 800522c:	803c3800 	.word	0x803c3800
 8005230:	40000004 	.word	0x40000004

08005234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800524e:	d901      	bls.n	8005254 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e01b      	b.n	800528c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	daf2      	bge.n	8005242 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	019b      	lsls	r3, r3, #6
 8005264:	f043 0220 	orr.w	r2, r3, #32
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3301      	adds	r3, #1
 8005270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005278:	d901      	bls.n	800527e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e006      	b.n	800528c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b20      	cmp	r3, #32
 8005288:	d0f0      	beq.n	800526c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052b0:	d901      	bls.n	80052b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e018      	b.n	80052e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	daf2      	bge.n	80052a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2210      	movs	r2, #16
 80052c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052d4:	d901      	bls.n	80052da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e006      	b.n	80052e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d0f0      	beq.n	80052c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005314:	4313      	orrs	r3, r2
 8005316:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005340:	f023 0303 	bic.w	r3, r3, #3
 8005344:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005354:	f043 0302 	orr.w	r3, r3, #2
 8005358:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	f003 0301 	and.w	r3, r3, #1
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3301      	adds	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800539c:	d901      	bls.n	80053a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e022      	b.n	80053e8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	daf2      	bge.n	8005390 <USB_CoreReset+0xc>

  count = 10U;
 80053aa:	230a      	movs	r3, #10
 80053ac:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80053ae:	e002      	b.n	80053b6 <USB_CoreReset+0x32>
  {
    count--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f9      	bne.n	80053b0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f043 0201 	orr.w	r2, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3301      	adds	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053d4:	d901      	bls.n	80053da <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e006      	b.n	80053e8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d0f0      	beq.n	80053c8 <USB_CoreReset+0x44>

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80053f8:	bf00      	nop
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800540a:	f3ef 8305 	mrs	r3, IPSR
 800540e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005410:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10f      	bne.n	8005436 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005416:	f3ef 8310 	mrs	r3, PRIMASK
 800541a:	607b      	str	r3, [r7, #4]
  return(result);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d105      	bne.n	800542e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005422:	f3ef 8311 	mrs	r3, BASEPRI
 8005426:	603b      	str	r3, [r7, #0]
  return(result);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <osKernelInitialize+0x3a>
 800542e:	4b0e      	ldr	r3, [pc, #56]	@ (8005468 <osKernelInitialize+0x64>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d103      	bne.n	800543e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005436:	f06f 0305 	mvn.w	r3, #5
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	e00c      	b.n	8005458 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800543e:	4b0a      	ldr	r3, [pc, #40]	@ (8005468 <osKernelInitialize+0x64>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d105      	bne.n	8005452 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005446:	4b08      	ldr	r3, [pc, #32]	@ (8005468 <osKernelInitialize+0x64>)
 8005448:	2201      	movs	r2, #1
 800544a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	e002      	b.n	8005458 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005452:	f04f 33ff 	mov.w	r3, #4294967295
 8005456:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005458:	68fb      	ldr	r3, [r7, #12]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000a9c 	.word	0x20000a9c

0800546c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005472:	f3ef 8305 	mrs	r3, IPSR
 8005476:	60bb      	str	r3, [r7, #8]
  return(result);
 8005478:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10f      	bne.n	800549e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800547e:	f3ef 8310 	mrs	r3, PRIMASK
 8005482:	607b      	str	r3, [r7, #4]
  return(result);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800548a:	f3ef 8311 	mrs	r3, BASEPRI
 800548e:	603b      	str	r3, [r7, #0]
  return(result);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <osKernelStart+0x3a>
 8005496:	4b0f      	ldr	r3, [pc, #60]	@ (80054d4 <osKernelStart+0x68>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d103      	bne.n	80054a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800549e:	f06f 0305 	mvn.w	r3, #5
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	e010      	b.n	80054c8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80054a6:	4b0b      	ldr	r3, [pc, #44]	@ (80054d4 <osKernelStart+0x68>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d109      	bne.n	80054c2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80054ae:	f7ff ffa1 	bl	80053f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80054b2:	4b08      	ldr	r3, [pc, #32]	@ (80054d4 <osKernelStart+0x68>)
 80054b4:	2202      	movs	r2, #2
 80054b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80054b8:	f001 fd96 	bl	8006fe8 <vTaskStartScheduler>
      stat = osOK;
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	e002      	b.n	80054c8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80054c2:	f04f 33ff 	mov.w	r3, #4294967295
 80054c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80054c8:	68fb      	ldr	r3, [r7, #12]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000a9c 	.word	0x20000a9c

080054d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b090      	sub	sp, #64	@ 0x40
 80054dc:	af04      	add	r7, sp, #16
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054e8:	f3ef 8305 	mrs	r3, IPSR
 80054ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80054ee:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f040 808f 	bne.w	8005614 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f6:	f3ef 8310 	mrs	r3, PRIMASK
 80054fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d105      	bne.n	800550e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005502:	f3ef 8311 	mrs	r3, BASEPRI
 8005506:	617b      	str	r3, [r7, #20]
  return(result);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <osThreadNew+0x3e>
 800550e:	4b44      	ldr	r3, [pc, #272]	@ (8005620 <osThreadNew+0x148>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b02      	cmp	r3, #2
 8005514:	d07e      	beq.n	8005614 <osThreadNew+0x13c>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d07b      	beq.n	8005614 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800551c:	2380      	movs	r3, #128	@ 0x80
 800551e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005520:	2318      	movs	r3, #24
 8005522:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005524:	2300      	movs	r3, #0
 8005526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005528:	f04f 33ff 	mov.w	r3, #4294967295
 800552c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d045      	beq.n	80055c0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <osThreadNew+0x6a>
        name = attr->name;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <osThreadNew+0x90>
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	2b38      	cmp	r3, #56	@ 0x38
 800555a:	d805      	bhi.n	8005568 <osThreadNew+0x90>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <osThreadNew+0x94>
        return (NULL);
 8005568:	2300      	movs	r3, #0
 800556a:	e054      	b.n	8005616 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	089b      	lsrs	r3, r3, #2
 800557a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00e      	beq.n	80055a2 <osThreadNew+0xca>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	2ba7      	cmp	r3, #167	@ 0xa7
 800558a:	d90a      	bls.n	80055a2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005590:	2b00      	cmp	r3, #0
 8005592:	d006      	beq.n	80055a2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <osThreadNew+0xca>
        mem = 1;
 800559c:	2301      	movs	r3, #1
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	e010      	b.n	80055c4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10c      	bne.n	80055c4 <osThreadNew+0xec>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d108      	bne.n	80055c4 <osThreadNew+0xec>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d104      	bne.n	80055c4 <osThreadNew+0xec>
          mem = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	623b      	str	r3, [r7, #32]
 80055be:	e001      	b.n	80055c4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d110      	bne.n	80055ec <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055d2:	9202      	str	r2, [sp, #8]
 80055d4:	9301      	str	r3, [sp, #4]
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f001 fb03 	bl	8006bec <xTaskCreateStatic>
 80055e6:	4603      	mov	r3, r0
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	e013      	b.n	8005614 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d110      	bne.n	8005614 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	f107 0310 	add.w	r3, r7, #16
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f001 fb57 	bl	8006cb8 <xTaskCreate>
 800560a:	4603      	mov	r3, r0
 800560c:	2b01      	cmp	r3, #1
 800560e:	d001      	beq.n	8005614 <osThreadNew+0x13c>
          hTask = NULL;
 8005610:	2300      	movs	r3, #0
 8005612:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005614:	693b      	ldr	r3, [r7, #16]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3730      	adds	r7, #48	@ 0x30
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000a9c 	.word	0x20000a9c

08005624 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800562c:	f3ef 8305 	mrs	r3, IPSR
 8005630:	613b      	str	r3, [r7, #16]
  return(result);
 8005632:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10f      	bne.n	8005658 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005638:	f3ef 8310 	mrs	r3, PRIMASK
 800563c:	60fb      	str	r3, [r7, #12]
  return(result);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d105      	bne.n	8005650 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005644:	f3ef 8311 	mrs	r3, BASEPRI
 8005648:	60bb      	str	r3, [r7, #8]
  return(result);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d007      	beq.n	8005660 <osDelay+0x3c>
 8005650:	4b0a      	ldr	r3, [pc, #40]	@ (800567c <osDelay+0x58>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d103      	bne.n	8005660 <osDelay+0x3c>
    stat = osErrorISR;
 8005658:	f06f 0305 	mvn.w	r3, #5
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	e007      	b.n	8005670 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <osDelay+0x4c>
      vTaskDelay(ticks);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f001 fc84 	bl	8006f78 <vTaskDelay>
    }
  }

  return (stat);
 8005670:	697b      	ldr	r3, [r7, #20]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000a9c 	.word	0x20000a9c

08005680 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b08c      	sub	sp, #48	@ 0x30
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800568c:	2300      	movs	r3, #0
 800568e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005690:	f3ef 8305 	mrs	r3, IPSR
 8005694:	61bb      	str	r3, [r7, #24]
  return(result);
 8005696:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005698:	2b00      	cmp	r3, #0
 800569a:	f040 8086 	bne.w	80057aa <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800569e:	f3ef 8310 	mrs	r3, PRIMASK
 80056a2:	617b      	str	r3, [r7, #20]
  return(result);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d105      	bne.n	80056b6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056aa:	f3ef 8311 	mrs	r3, BASEPRI
 80056ae:	613b      	str	r3, [r7, #16]
  return(result);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <osSemaphoreNew+0x3e>
 80056b6:	4b3f      	ldr	r3, [pc, #252]	@ (80057b4 <osSemaphoreNew+0x134>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d075      	beq.n	80057aa <osSemaphoreNew+0x12a>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d072      	beq.n	80057aa <osSemaphoreNew+0x12a>
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d86e      	bhi.n	80057aa <osSemaphoreNew+0x12a>
    mem = -1;
 80056cc:	f04f 33ff 	mov.w	r3, #4294967295
 80056d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d015      	beq.n	8005704 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d006      	beq.n	80056ee <osSemaphoreNew+0x6e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b4f      	cmp	r3, #79	@ 0x4f
 80056e6:	d902      	bls.n	80056ee <osSemaphoreNew+0x6e>
        mem = 1;
 80056e8:	2301      	movs	r3, #1
 80056ea:	623b      	str	r3, [r7, #32]
 80056ec:	e00c      	b.n	8005708 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d108      	bne.n	8005708 <osSemaphoreNew+0x88>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d104      	bne.n	8005708 <osSemaphoreNew+0x88>
          mem = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	623b      	str	r3, [r7, #32]
 8005702:	e001      	b.n	8005708 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d04c      	beq.n	80057aa <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d128      	bne.n	8005768 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d10a      	bne.n	8005732 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	2203      	movs	r2, #3
 8005722:	9200      	str	r2, [sp, #0]
 8005724:	2200      	movs	r2, #0
 8005726:	2100      	movs	r1, #0
 8005728:	2001      	movs	r0, #1
 800572a:	f000 fa57 	bl	8005bdc <xQueueGenericCreateStatic>
 800572e:	6278      	str	r0, [r7, #36]	@ 0x24
 8005730:	e005      	b.n	800573e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005732:	2203      	movs	r2, #3
 8005734:	2100      	movs	r1, #0
 8005736:	2001      	movs	r0, #1
 8005738:	f000 fad7 	bl	8005cea <xQueueGenericCreate>
 800573c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	2b00      	cmp	r3, #0
 8005742:	d022      	beq.n	800578a <osSemaphoreNew+0x10a>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d01f      	beq.n	800578a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800574a:	2300      	movs	r3, #0
 800574c:	2200      	movs	r2, #0
 800574e:	2100      	movs	r1, #0
 8005750:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005752:	f000 fba7 	bl	8005ea4 <xQueueGenericSend>
 8005756:	4603      	mov	r3, r0
 8005758:	2b01      	cmp	r3, #1
 800575a:	d016      	beq.n	800578a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800575c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800575e:	f001 f86f 	bl	8006840 <vQueueDelete>
            hSemaphore = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
 8005766:	e010      	b.n	800578a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d108      	bne.n	8005780 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	461a      	mov	r2, r3
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 fb1d 	bl	8005db6 <xQueueCreateCountingSemaphoreStatic>
 800577c:	6278      	str	r0, [r7, #36]	@ 0x24
 800577e:	e004      	b.n	800578a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fb54 	bl	8005e30 <xQueueCreateCountingSemaphore>
 8005788:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00c      	beq.n	80057aa <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <osSemaphoreNew+0x11e>
          name = attr->name;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	61fb      	str	r3, [r7, #28]
 800579c:	e001      	b.n	80057a2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80057a2:	69f9      	ldr	r1, [r7, #28]
 80057a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057a6:	f001 f999 	bl	8006adc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3728      	adds	r7, #40	@ 0x28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20000a9c 	.word	0x20000a9c

080057b8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d103      	bne.n	80057d8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80057d0:	f06f 0303 	mvn.w	r3, #3
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	e04b      	b.n	8005870 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057d8:	f3ef 8305 	mrs	r3, IPSR
 80057dc:	617b      	str	r3, [r7, #20]
  return(result);
 80057de:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10f      	bne.n	8005804 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e4:	f3ef 8310 	mrs	r3, PRIMASK
 80057e8:	613b      	str	r3, [r7, #16]
  return(result);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d105      	bne.n	80057fc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057f0:	f3ef 8311 	mrs	r3, BASEPRI
 80057f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d026      	beq.n	800584a <osSemaphoreAcquire+0x92>
 80057fc:	4b1f      	ldr	r3, [pc, #124]	@ (800587c <osSemaphoreAcquire+0xc4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d122      	bne.n	800584a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800580a:	f06f 0303 	mvn.w	r3, #3
 800580e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005810:	e02d      	b.n	800586e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005816:	f107 0308 	add.w	r3, r7, #8
 800581a:	461a      	mov	r2, r3
 800581c:	2100      	movs	r1, #0
 800581e:	69b8      	ldr	r0, [r7, #24]
 8005820:	f000 ff86 	bl	8006730 <xQueueReceiveFromISR>
 8005824:	4603      	mov	r3, r0
 8005826:	2b01      	cmp	r3, #1
 8005828:	d003      	beq.n	8005832 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800582a:	f06f 0302 	mvn.w	r3, #2
 800582e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005830:	e01d      	b.n	800586e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01a      	beq.n	800586e <osSemaphoreAcquire+0xb6>
 8005838:	4b11      	ldr	r3, [pc, #68]	@ (8005880 <osSemaphoreAcquire+0xc8>)
 800583a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005848:	e011      	b.n	800586e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800584a:	6839      	ldr	r1, [r7, #0]
 800584c:	69b8      	ldr	r0, [r7, #24]
 800584e:	f000 fe57 	bl	8006500 <xQueueSemaphoreTake>
 8005852:	4603      	mov	r3, r0
 8005854:	2b01      	cmp	r3, #1
 8005856:	d00b      	beq.n	8005870 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800585e:	f06f 0301 	mvn.w	r3, #1
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	e004      	b.n	8005870 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005866:	f06f 0302 	mvn.w	r3, #2
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	e000      	b.n	8005870 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800586e:	bf00      	nop
      }
    }
  }

  return (stat);
 8005870:	69fb      	ldr	r3, [r7, #28]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000a9c 	.word	0x20000a9c
 8005880:	e000ed04 	.word	0xe000ed04

08005884 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d103      	bne.n	80058a2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800589a:	f06f 0303 	mvn.w	r3, #3
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	e03e      	b.n	8005920 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058a2:	f3ef 8305 	mrs	r3, IPSR
 80058a6:	617b      	str	r3, [r7, #20]
  return(result);
 80058a8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10f      	bne.n	80058ce <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ae:	f3ef 8310 	mrs	r3, PRIMASK
 80058b2:	613b      	str	r3, [r7, #16]
  return(result);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d105      	bne.n	80058c6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058ba:	f3ef 8311 	mrs	r3, BASEPRI
 80058be:	60fb      	str	r3, [r7, #12]
  return(result);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d01e      	beq.n	8005904 <osSemaphoreRelease+0x80>
 80058c6:	4b19      	ldr	r3, [pc, #100]	@ (800592c <osSemaphoreRelease+0xa8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d11a      	bne.n	8005904 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80058d2:	f107 0308 	add.w	r3, r7, #8
 80058d6:	4619      	mov	r1, r3
 80058d8:	69b8      	ldr	r0, [r7, #24]
 80058da:	f000 fc90 	bl	80061fe <xQueueGiveFromISR>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d003      	beq.n	80058ec <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80058e4:	f06f 0302 	mvn.w	r3, #2
 80058e8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80058ea:	e018      	b.n	800591e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d015      	beq.n	800591e <osSemaphoreRelease+0x9a>
 80058f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005930 <osSemaphoreRelease+0xac>)
 80058f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005902:	e00c      	b.n	800591e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005904:	2300      	movs	r3, #0
 8005906:	2200      	movs	r2, #0
 8005908:	2100      	movs	r1, #0
 800590a:	69b8      	ldr	r0, [r7, #24]
 800590c:	f000 faca 	bl	8005ea4 <xQueueGenericSend>
 8005910:	4603      	mov	r3, r0
 8005912:	2b01      	cmp	r3, #1
 8005914:	d004      	beq.n	8005920 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005916:	f06f 0302 	mvn.w	r3, #2
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	e000      	b.n	8005920 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800591e:	bf00      	nop
    }
  }

  return (stat);
 8005920:	69fb      	ldr	r3, [r7, #28]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000a9c 	.word	0x20000a9c
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4a07      	ldr	r2, [pc, #28]	@ (8005960 <vApplicationGetIdleTaskMemory+0x2c>)
 8005944:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4a06      	ldr	r2, [pc, #24]	@ (8005964 <vApplicationGetIdleTaskMemory+0x30>)
 800594a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2280      	movs	r2, #128	@ 0x80
 8005950:	601a      	str	r2, [r3, #0]
}
 8005952:	bf00      	nop
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20000aa0 	.word	0x20000aa0
 8005964:	20000b48 	.word	0x20000b48

08005968 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a07      	ldr	r2, [pc, #28]	@ (8005994 <vApplicationGetTimerTaskMemory+0x2c>)
 8005978:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4a06      	ldr	r2, [pc, #24]	@ (8005998 <vApplicationGetTimerTaskMemory+0x30>)
 800597e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005986:	601a      	str	r2, [r3, #0]
}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	20000d48 	.word	0x20000d48
 8005998:	20000df0 	.word	0x20000df0

0800599c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f103 0208 	add.w	r2, r3, #8
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f04f 32ff 	mov.w	r2, #4294967295
 80059b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f103 0208 	add.w	r2, r3, #8
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f103 0208 	add.w	r2, r3, #8
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b085      	sub	sp, #20
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a54:	d103      	bne.n	8005a5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	e00c      	b.n	8005a78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3308      	adds	r3, #8
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	e002      	b.n	8005a6c <vListInsert+0x2e>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d2f6      	bcs.n	8005a66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	601a      	str	r2, [r3, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6892      	ldr	r2, [r2, #8]
 8005ac6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6852      	ldr	r2, [r2, #4]
 8005ad0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d103      	bne.n	8005ae4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	1e5a      	subs	r2, r3, #1
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10d      	bne.n	8005b34 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1c:	b672      	cpsid	i
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	b662      	cpsie	i
 8005b2c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b2e:	bf00      	nop
 8005b30:	bf00      	nop
 8005b32:	e7fd      	b.n	8005b30 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005b34:	f002 fd32 	bl	800859c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b40:	68f9      	ldr	r1, [r7, #12]
 8005b42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b44:	fb01 f303 	mul.w	r3, r1, r3
 8005b48:	441a      	add	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b64:	3b01      	subs	r3, #1
 8005b66:	68f9      	ldr	r1, [r7, #12]
 8005b68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	441a      	add	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	22ff      	movs	r2, #255	@ 0xff
 8005b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	22ff      	movs	r2, #255	@ 0xff
 8005b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d114      	bne.n	8005bb4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01a      	beq.n	8005bc8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3310      	adds	r3, #16
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 fcd2 	bl	8007540 <xTaskRemoveFromEventList>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d012      	beq.n	8005bc8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd8 <xQueueGenericReset+0xd4>)
 8005ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	e009      	b.n	8005bc8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3310      	adds	r3, #16
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff feef 	bl	800599c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3324      	adds	r3, #36	@ 0x24
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff feea 	bl	800599c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bc8:	f002 fd1e 	bl	8008608 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bcc:	2301      	movs	r3, #1
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08e      	sub	sp, #56	@ 0x38
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10d      	bne.n	8005c0c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf4:	b672      	cpsid	i
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	b662      	cpsie	i
 8005c04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c06:	bf00      	nop
 8005c08:	bf00      	nop
 8005c0a:	e7fd      	b.n	8005c08 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10d      	bne.n	8005c2e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c16:	b672      	cpsid	i
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	b662      	cpsie	i
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <xQueueGenericCreateStatic+0x5e>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <xQueueGenericCreateStatic+0x62>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <xQueueGenericCreateStatic+0x64>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10d      	bne.n	8005c60 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c48:	b672      	cpsid	i
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	b662      	cpsie	i
 8005c58:	623b      	str	r3, [r7, #32]
}
 8005c5a:	bf00      	nop
 8005c5c:	bf00      	nop
 8005c5e:	e7fd      	b.n	8005c5c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <xQueueGenericCreateStatic+0x90>
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <xQueueGenericCreateStatic+0x94>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <xQueueGenericCreateStatic+0x96>
 8005c70:	2300      	movs	r3, #0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10d      	bne.n	8005c92 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7a:	b672      	cpsid	i
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	b662      	cpsie	i
 8005c8a:	61fb      	str	r3, [r7, #28]
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	e7fd      	b.n	8005c8e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c92:	2350      	movs	r3, #80	@ 0x50
 8005c94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b50      	cmp	r3, #80	@ 0x50
 8005c9a:	d00d      	beq.n	8005cb8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	b672      	cpsid	i
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	b662      	cpsie	i
 8005cb0:	61bb      	str	r3, [r7, #24]
}
 8005cb2:	bf00      	nop
 8005cb4:	bf00      	nop
 8005cb6:	e7fd      	b.n	8005cb4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00d      	beq.n	8005ce0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ccc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	68b9      	ldr	r1, [r7, #8]
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 f848 	bl	8005d70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3730      	adds	r7, #48	@ 0x30
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b08a      	sub	sp, #40	@ 0x28
 8005cee:	af02      	add	r7, sp, #8
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10d      	bne.n	8005d1a <xQueueGenericCreate+0x30>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d02:	b672      	cpsid	i
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	b662      	cpsie	i
 8005d12:	613b      	str	r3, [r7, #16]
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop
 8005d18:	e7fd      	b.n	8005d16 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d102      	bne.n	8005d26 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	e004      	b.n	8005d30 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	fb02 f303 	mul.w	r3, r2, r3
 8005d2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	3350      	adds	r3, #80	@ 0x50
 8005d34:	4618      	mov	r0, r3
 8005d36:	f002 fd5f 	bl	80087f8 <pvPortMalloc>
 8005d3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d011      	beq.n	8005d66 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	3350      	adds	r3, #80	@ 0x50
 8005d4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d54:	79fa      	ldrb	r2, [r7, #7]
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f805 	bl	8005d70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d66:	69bb      	ldr	r3, [r7, #24]
	}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3720      	adds	r7, #32
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d103      	bne.n	8005d8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e002      	b.n	8005d92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d9e:	2101      	movs	r1, #1
 8005da0:	69b8      	ldr	r0, [r7, #24]
 8005da2:	f7ff feaf 	bl	8005b04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005dae:	bf00      	nop
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b08a      	sub	sp, #40	@ 0x28
 8005dba:	af02      	add	r7, sp, #8
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10d      	bne.n	8005de4 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dcc:	b672      	cpsid	i
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	b662      	cpsie	i
 8005ddc:	61bb      	str	r3, [r7, #24]
}
 8005dde:	bf00      	nop
 8005de0:	bf00      	nop
 8005de2:	e7fd      	b.n	8005de0 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d90d      	bls.n	8005e08 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df0:	b672      	cpsid	i
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	b662      	cpsie	i
 8005e00:	617b      	str	r3, [r7, #20]
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005e08:	2302      	movs	r3, #2
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	2100      	movs	r1, #0
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f7ff fee2 	bl	8005bdc <xQueueGenericCreateStatic>
 8005e18:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005e26:	69fb      	ldr	r3, [r7, #28]
	}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10d      	bne.n	8005e5c <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e44:	b672      	cpsid	i
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	b662      	cpsie	i
 8005e54:	613b      	str	r3, [r7, #16]
}
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
 8005e5a:	e7fd      	b.n	8005e58 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d90d      	bls.n	8005e80 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e68:	b672      	cpsid	i
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	b662      	cpsie	i
 8005e78:	60fb      	str	r3, [r7, #12]
}
 8005e7a:	bf00      	nop
 8005e7c:	bf00      	nop
 8005e7e:	e7fd      	b.n	8005e7c <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005e80:	2202      	movs	r2, #2
 8005e82:	2100      	movs	r1, #0
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff ff30 	bl	8005cea <xQueueGenericCreate>
 8005e8a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005e98:	697b      	ldr	r3, [r7, #20]
	}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08e      	sub	sp, #56	@ 0x38
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10d      	bne.n	8005edc <xQueueGenericSend+0x38>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	b672      	cpsid	i
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	b662      	cpsie	i
 8005ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	e7fd      	b.n	8005ed8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d103      	bne.n	8005eea <xQueueGenericSend+0x46>
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <xQueueGenericSend+0x4a>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <xQueueGenericSend+0x4c>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10d      	bne.n	8005f10 <xQueueGenericSend+0x6c>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	b672      	cpsid	i
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	b662      	cpsie	i
 8005f08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f0a:	bf00      	nop
 8005f0c:	bf00      	nop
 8005f0e:	e7fd      	b.n	8005f0c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d103      	bne.n	8005f1e <xQueueGenericSend+0x7a>
 8005f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <xQueueGenericSend+0x7e>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <xQueueGenericSend+0x80>
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10d      	bne.n	8005f44 <xQueueGenericSend+0xa0>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2c:	b672      	cpsid	i
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	b662      	cpsie	i
 8005f3c:	623b      	str	r3, [r7, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	bf00      	nop
 8005f42:	e7fd      	b.n	8005f40 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f44:	f001 fcca 	bl	80078dc <xTaskGetSchedulerState>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <xQueueGenericSend+0xb0>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <xQueueGenericSend+0xb4>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <xQueueGenericSend+0xb6>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10d      	bne.n	8005f7a <xQueueGenericSend+0xd6>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f62:	b672      	cpsid	i
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	b662      	cpsie	i
 8005f72:	61fb      	str	r3, [r7, #28]
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop
 8005f78:	e7fd      	b.n	8005f76 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f7a:	f002 fb0f 	bl	800859c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d302      	bcc.n	8005f90 <xQueueGenericSend+0xec>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d129      	bne.n	8005fe4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f96:	f000 fc91 	bl	80068bc <prvCopyDataToQueue>
 8005f9a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d010      	beq.n	8005fc6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa6:	3324      	adds	r3, #36	@ 0x24
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f001 fac9 	bl	8007540 <xTaskRemoveFromEventList>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d013      	beq.n	8005fdc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80060b4 <xQueueGenericSend+0x210>)
 8005fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	e00a      	b.n	8005fdc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d007      	beq.n	8005fdc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fcc:	4b39      	ldr	r3, [pc, #228]	@ (80060b4 <xQueueGenericSend+0x210>)
 8005fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fdc:	f002 fb14 	bl	8008608 <vPortExitCritical>
				return pdPASS;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e063      	b.n	80060ac <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d103      	bne.n	8005ff2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fea:	f002 fb0d 	bl	8008608 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e05c      	b.n	80060ac <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d106      	bne.n	8006006 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fb05 	bl	800760c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006002:	2301      	movs	r3, #1
 8006004:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006006:	f002 faff 	bl	8008608 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800600a:	f001 f861 	bl	80070d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800600e:	f002 fac5 	bl	800859c <vPortEnterCritical>
 8006012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006014:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006018:	b25b      	sxtb	r3, r3
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601e:	d103      	bne.n	8006028 <xQueueGenericSend+0x184>
 8006020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800602e:	b25b      	sxtb	r3, r3
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d103      	bne.n	800603e <xQueueGenericSend+0x19a>
 8006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800603e:	f002 fae3 	bl	8008608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006042:	1d3a      	adds	r2, r7, #4
 8006044:	f107 0314 	add.w	r3, r7, #20
 8006048:	4611      	mov	r1, r2
 800604a:	4618      	mov	r0, r3
 800604c:	f001 faf4 	bl	8007638 <xTaskCheckForTimeOut>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d124      	bne.n	80060a0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006056:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006058:	f000 fd28 	bl	8006aac <prvIsQueueFull>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d018      	beq.n	8006094 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006064:	3310      	adds	r3, #16
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	4611      	mov	r1, r2
 800606a:	4618      	mov	r0, r3
 800606c:	f001 fa12 	bl	8007494 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006070:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006072:	f000 fcb3 	bl	80069dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006076:	f001 f839 	bl	80070ec <xTaskResumeAll>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	f47f af7c 	bne.w	8005f7a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006082:	4b0c      	ldr	r3, [pc, #48]	@ (80060b4 <xQueueGenericSend+0x210>)
 8006084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	e772      	b.n	8005f7a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006094:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006096:	f000 fca1 	bl	80069dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800609a:	f001 f827 	bl	80070ec <xTaskResumeAll>
 800609e:	e76c      	b.n	8005f7a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060a2:	f000 fc9b 	bl	80069dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060a6:	f001 f821 	bl	80070ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3738      	adds	r7, #56	@ 0x38
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	e000ed04 	.word	0xe000ed04

080060b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08e      	sub	sp, #56	@ 0x38
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10d      	bne.n	80060ec <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d4:	b672      	cpsid	i
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	b662      	cpsie	i
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060e6:	bf00      	nop
 80060e8:	bf00      	nop
 80060ea:	e7fd      	b.n	80060e8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d103      	bne.n	80060fa <xQueueGenericSendFromISR+0x42>
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <xQueueGenericSendFromISR+0x46>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <xQueueGenericSendFromISR+0x48>
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10d      	bne.n	8006120 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006108:	b672      	cpsid	i
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	b662      	cpsie	i
 8006118:	623b      	str	r3, [r7, #32]
}
 800611a:	bf00      	nop
 800611c:	bf00      	nop
 800611e:	e7fd      	b.n	800611c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d103      	bne.n	800612e <xQueueGenericSendFromISR+0x76>
 8006126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <xQueueGenericSendFromISR+0x7a>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <xQueueGenericSendFromISR+0x7c>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10d      	bne.n	8006154 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613c:	b672      	cpsid	i
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	b662      	cpsie	i
 800614c:	61fb      	str	r3, [r7, #28]
}
 800614e:	bf00      	nop
 8006150:	bf00      	nop
 8006152:	e7fd      	b.n	8006150 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006154:	f002 fb0a 	bl	800876c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006158:	f3ef 8211 	mrs	r2, BASEPRI
 800615c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006160:	b672      	cpsid	i
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	b662      	cpsie	i
 8006170:	61ba      	str	r2, [r7, #24]
 8006172:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006174:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006176:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006180:	429a      	cmp	r2, r3
 8006182:	d302      	bcc.n	800618a <xQueueGenericSendFromISR+0xd2>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d12c      	bne.n	80061e4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800619a:	f000 fb8f 	bl	80068bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800619e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80061a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a6:	d112      	bne.n	80061ce <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d016      	beq.n	80061de <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	3324      	adds	r3, #36	@ 0x24
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 f9c3 	bl	8007540 <xTaskRemoveFromEventList>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00e      	beq.n	80061de <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00b      	beq.n	80061de <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	e007      	b.n	80061de <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061d2:	3301      	adds	r3, #1
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	b25a      	sxtb	r2, r3
 80061d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80061de:	2301      	movs	r3, #1
 80061e0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80061e2:	e001      	b.n	80061e8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80061e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3738      	adds	r7, #56	@ 0x38
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b08e      	sub	sp, #56	@ 0x38
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800620c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10d      	bne.n	800622e <xQueueGiveFromISR+0x30>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006216:	b672      	cpsid	i
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	b662      	cpsie	i
 8006226:	623b      	str	r3, [r7, #32]
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	e7fd      	b.n	800622a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00d      	beq.n	8006252 <xQueueGiveFromISR+0x54>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623a:	b672      	cpsid	i
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	b662      	cpsie	i
 800624a:	61fb      	str	r3, [r7, #28]
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	e7fd      	b.n	800624e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d103      	bne.n	8006262 <xQueueGiveFromISR+0x64>
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <xQueueGiveFromISR+0x68>
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <xQueueGiveFromISR+0x6a>
 8006266:	2300      	movs	r3, #0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10d      	bne.n	8006288 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006270:	b672      	cpsid	i
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	b662      	cpsie	i
 8006280:	61bb      	str	r3, [r7, #24]
}
 8006282:	bf00      	nop
 8006284:	bf00      	nop
 8006286:	e7fd      	b.n	8006284 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006288:	f002 fa70 	bl	800876c <vPortValidateInterruptPriority>
	__asm volatile
 800628c:	f3ef 8211 	mrs	r2, BASEPRI
 8006290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006294:	b672      	cpsid	i
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	b662      	cpsie	i
 80062a4:	617a      	str	r2, [r7, #20]
 80062a6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80062a8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b0:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d22b      	bcs.n	8006314 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d6:	d112      	bne.n	80062fe <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d016      	beq.n	800630e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e2:	3324      	adds	r3, #36	@ 0x24
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 f92b 	bl	8007540 <xTaskRemoveFromEventList>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00e      	beq.n	800630e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00b      	beq.n	800630e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2201      	movs	r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	e007      	b.n	800630e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006302:	3301      	adds	r3, #1
 8006304:	b2db      	uxtb	r3, r3
 8006306:	b25a      	sxtb	r2, r3
 8006308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800630e:	2301      	movs	r3, #1
 8006310:	637b      	str	r3, [r7, #52]	@ 0x34
 8006312:	e001      	b.n	8006318 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006314:	2300      	movs	r3, #0
 8006316:	637b      	str	r3, [r7, #52]	@ 0x34
 8006318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f383 8811 	msr	BASEPRI, r3
}
 8006322:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006326:	4618      	mov	r0, r3
 8006328:	3738      	adds	r7, #56	@ 0x38
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08c      	sub	sp, #48	@ 0x30
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800633c:	2300      	movs	r3, #0
 800633e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10d      	bne.n	8006366 <xQueueReceive+0x36>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634e:	b672      	cpsid	i
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	b662      	cpsie	i
 800635e:	623b      	str	r3, [r7, #32]
}
 8006360:	bf00      	nop
 8006362:	bf00      	nop
 8006364:	e7fd      	b.n	8006362 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <xQueueReceive+0x44>
 800636c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <xQueueReceive+0x48>
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <xQueueReceive+0x4a>
 8006378:	2300      	movs	r3, #0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10d      	bne.n	800639a <xQueueReceive+0x6a>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	b672      	cpsid	i
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	b662      	cpsie	i
 8006392:	61fb      	str	r3, [r7, #28]
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	e7fd      	b.n	8006396 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800639a:	f001 fa9f 	bl	80078dc <xTaskGetSchedulerState>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d102      	bne.n	80063aa <xQueueReceive+0x7a>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <xQueueReceive+0x7e>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <xQueueReceive+0x80>
 80063ae:	2300      	movs	r3, #0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10d      	bne.n	80063d0 <xQueueReceive+0xa0>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b8:	b672      	cpsid	i
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	b662      	cpsie	i
 80063c8:	61bb      	str	r3, [r7, #24]
}
 80063ca:	bf00      	nop
 80063cc:	bf00      	nop
 80063ce:	e7fd      	b.n	80063cc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063d0:	f002 f8e4 	bl	800859c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01f      	beq.n	8006420 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063e4:	f000 fad4 	bl	8006990 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	1e5a      	subs	r2, r3, #1
 80063ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00f      	beq.n	8006418 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fa:	3310      	adds	r3, #16
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 f89f 	bl	8007540 <xTaskRemoveFromEventList>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006408:	4b3c      	ldr	r3, [pc, #240]	@ (80064fc <xQueueReceive+0x1cc>)
 800640a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006418:	f002 f8f6 	bl	8008608 <vPortExitCritical>
				return pdPASS;
 800641c:	2301      	movs	r3, #1
 800641e:	e069      	b.n	80064f4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006426:	f002 f8ef 	bl	8008608 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800642a:	2300      	movs	r3, #0
 800642c:	e062      	b.n	80064f4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800642e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d106      	bne.n	8006442 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006434:	f107 0310 	add.w	r3, r7, #16
 8006438:	4618      	mov	r0, r3
 800643a:	f001 f8e7 	bl	800760c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800643e:	2301      	movs	r3, #1
 8006440:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006442:	f002 f8e1 	bl	8008608 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006446:	f000 fe43 	bl	80070d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800644a:	f002 f8a7 	bl	800859c <vPortEnterCritical>
 800644e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006450:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006454:	b25b      	sxtb	r3, r3
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645a:	d103      	bne.n	8006464 <xQueueReceive+0x134>
 800645c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006466:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800646a:	b25b      	sxtb	r3, r3
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d103      	bne.n	800647a <xQueueReceive+0x14a>
 8006472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800647a:	f002 f8c5 	bl	8008608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800647e:	1d3a      	adds	r2, r7, #4
 8006480:	f107 0310 	add.w	r3, r7, #16
 8006484:	4611      	mov	r1, r2
 8006486:	4618      	mov	r0, r3
 8006488:	f001 f8d6 	bl	8007638 <xTaskCheckForTimeOut>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d123      	bne.n	80064da <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006492:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006494:	f000 faf4 	bl	8006a80 <prvIsQueueEmpty>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d017      	beq.n	80064ce <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800649e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a0:	3324      	adds	r3, #36	@ 0x24
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	4611      	mov	r1, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fff4 	bl	8007494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064ae:	f000 fa95 	bl	80069dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064b2:	f000 fe1b 	bl	80070ec <xTaskResumeAll>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d189      	bne.n	80063d0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80064bc:	4b0f      	ldr	r3, [pc, #60]	@ (80064fc <xQueueReceive+0x1cc>)
 80064be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	e780      	b.n	80063d0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064d0:	f000 fa84 	bl	80069dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064d4:	f000 fe0a 	bl	80070ec <xTaskResumeAll>
 80064d8:	e77a      	b.n	80063d0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064dc:	f000 fa7e 	bl	80069dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064e0:	f000 fe04 	bl	80070ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064e6:	f000 facb 	bl	8006a80 <prvIsQueueEmpty>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f43f af6f 	beq.w	80063d0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3730      	adds	r7, #48	@ 0x30
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	e000ed04 	.word	0xe000ed04

08006500 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08e      	sub	sp, #56	@ 0x38
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800650a:	2300      	movs	r3, #0
 800650c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10d      	bne.n	8006538 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006520:	b672      	cpsid	i
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	b662      	cpsie	i
 8006530:	623b      	str	r3, [r7, #32]
}
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00d      	beq.n	800655c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006544:	b672      	cpsid	i
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	b662      	cpsie	i
 8006554:	61fb      	str	r3, [r7, #28]
}
 8006556:	bf00      	nop
 8006558:	bf00      	nop
 800655a:	e7fd      	b.n	8006558 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800655c:	f001 f9be 	bl	80078dc <xTaskGetSchedulerState>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d102      	bne.n	800656c <xQueueSemaphoreTake+0x6c>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <xQueueSemaphoreTake+0x70>
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <xQueueSemaphoreTake+0x72>
 8006570:	2300      	movs	r3, #0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10d      	bne.n	8006592 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657a:	b672      	cpsid	i
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	b662      	cpsie	i
 800658a:	61bb      	str	r3, [r7, #24]
}
 800658c:	bf00      	nop
 800658e:	bf00      	nop
 8006590:	e7fd      	b.n	800658e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006592:	f002 f803 	bl	800859c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800659c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d024      	beq.n	80065ec <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80065a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a4:	1e5a      	subs	r2, r3, #1
 80065a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80065b2:	f001 fb15 	bl	8007be0 <pvTaskIncrementMutexHeldCount>
 80065b6:	4602      	mov	r2, r0
 80065b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00f      	beq.n	80065e4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c6:	3310      	adds	r3, #16
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 ffb9 	bl	8007540 <xTaskRemoveFromEventList>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d007      	beq.n	80065e4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065d4:	4b55      	ldr	r3, [pc, #340]	@ (800672c <xQueueSemaphoreTake+0x22c>)
 80065d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065e4:	f002 f810 	bl	8008608 <vPortExitCritical>
				return pdPASS;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e09a      	b.n	8006722 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d114      	bne.n	800661c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00d      	beq.n	8006614 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fc:	b672      	cpsid	i
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	b662      	cpsie	i
 800660c:	617b      	str	r3, [r7, #20]
}
 800660e:	bf00      	nop
 8006610:	bf00      	nop
 8006612:	e7fd      	b.n	8006610 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006614:	f001 fff8 	bl	8008608 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006618:	2300      	movs	r3, #0
 800661a:	e082      	b.n	8006722 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800661c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006622:	f107 030c 	add.w	r3, r7, #12
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fff0 	bl	800760c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800662c:	2301      	movs	r3, #1
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006630:	f001 ffea 	bl	8008608 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006634:	f000 fd4c 	bl	80070d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006638:	f001 ffb0 	bl	800859c <vPortEnterCritical>
 800663c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006642:	b25b      	sxtb	r3, r3
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d103      	bne.n	8006652 <xQueueSemaphoreTake+0x152>
 800664a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006654:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006658:	b25b      	sxtb	r3, r3
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d103      	bne.n	8006668 <xQueueSemaphoreTake+0x168>
 8006660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006668:	f001 ffce 	bl	8008608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800666c:	463a      	mov	r2, r7
 800666e:	f107 030c 	add.w	r3, r7, #12
 8006672:	4611      	mov	r1, r2
 8006674:	4618      	mov	r0, r3
 8006676:	f000 ffdf 	bl	8007638 <xTaskCheckForTimeOut>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d132      	bne.n	80066e6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006680:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006682:	f000 f9fd 	bl	8006a80 <prvIsQueueEmpty>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d026      	beq.n	80066da <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800668c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d109      	bne.n	80066a8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8006694:	f001 ff82 	bl	800859c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	4618      	mov	r0, r3
 800669e:	f001 f93b 	bl	8007918 <xTaskPriorityInherit>
 80066a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80066a4:	f001 ffb0 	bl	8008608 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066aa:	3324      	adds	r3, #36	@ 0x24
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	4611      	mov	r1, r2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 feef 	bl	8007494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066b8:	f000 f990 	bl	80069dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066bc:	f000 fd16 	bl	80070ec <xTaskResumeAll>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f47f af65 	bne.w	8006592 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80066c8:	4b18      	ldr	r3, [pc, #96]	@ (800672c <xQueueSemaphoreTake+0x22c>)
 80066ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	e75b      	b.n	8006592 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80066da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066dc:	f000 f97e 	bl	80069dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066e0:	f000 fd04 	bl	80070ec <xTaskResumeAll>
 80066e4:	e755      	b.n	8006592 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80066e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066e8:	f000 f978 	bl	80069dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066ec:	f000 fcfe 	bl	80070ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066f2:	f000 f9c5 	bl	8006a80 <prvIsQueueEmpty>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f43f af4a 	beq.w	8006592 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00d      	beq.n	8006720 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8006704:	f001 ff4a 	bl	800859c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006708:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800670a:	f000 f8bf 	bl	800688c <prvGetDisinheritPriorityAfterTimeout>
 800670e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006716:	4618      	mov	r0, r3
 8006718:	f001 f9da 	bl	8007ad0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800671c:	f001 ff74 	bl	8008608 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006722:	4618      	mov	r0, r3
 8006724:	3738      	adds	r7, #56	@ 0x38
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	e000ed04 	.word	0xe000ed04

08006730 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08e      	sub	sp, #56	@ 0x38
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10d      	bne.n	8006762 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674a:	b672      	cpsid	i
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	b662      	cpsie	i
 800675a:	623b      	str	r3, [r7, #32]
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	e7fd      	b.n	800675e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d103      	bne.n	8006770 <xQueueReceiveFromISR+0x40>
 8006768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <xQueueReceiveFromISR+0x44>
 8006770:	2301      	movs	r3, #1
 8006772:	e000      	b.n	8006776 <xQueueReceiveFromISR+0x46>
 8006774:	2300      	movs	r3, #0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10d      	bne.n	8006796 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677e:	b672      	cpsid	i
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	b662      	cpsie	i
 800678e:	61fb      	str	r3, [r7, #28]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006796:	f001 ffe9 	bl	800876c <vPortValidateInterruptPriority>
	__asm volatile
 800679a:	f3ef 8211 	mrs	r2, BASEPRI
 800679e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a2:	b672      	cpsid	i
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	b662      	cpsie	i
 80067b2:	61ba      	str	r2, [r7, #24]
 80067b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067be:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d02f      	beq.n	8006826 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067d0:	68b9      	ldr	r1, [r7, #8]
 80067d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067d4:	f000 f8dc 	bl	8006990 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067da:	1e5a      	subs	r2, r3, #1
 80067dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80067e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d112      	bne.n	8006810 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d016      	beq.n	8006820 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	3310      	adds	r3, #16
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fea2 	bl	8007540 <xTaskRemoveFromEventList>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00e      	beq.n	8006820 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00b      	beq.n	8006820 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	e007      	b.n	8006820 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006814:	3301      	adds	r3, #1
 8006816:	b2db      	uxtb	r3, r3
 8006818:	b25a      	sxtb	r2, r3
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006820:	2301      	movs	r3, #1
 8006822:	637b      	str	r3, [r7, #52]	@ 0x34
 8006824:	e001      	b.n	800682a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8006826:	2300      	movs	r3, #0
 8006828:	637b      	str	r3, [r7, #52]	@ 0x34
 800682a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f383 8811 	msr	BASEPRI, r3
}
 8006834:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006838:	4618      	mov	r0, r3
 800683a:	3738      	adds	r7, #56	@ 0x38
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10d      	bne.n	800686e <vQueueDelete+0x2e>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006856:	b672      	cpsid	i
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	b662      	cpsie	i
 8006866:	60bb      	str	r3, [r7, #8]
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	e7fd      	b.n	800686a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 f95e 	bl	8006b30 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f002 f888 	bl	8008994 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	d006      	beq.n	80068aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	e001      	b.n	80068ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068ae:	68fb      	ldr	r3, [r7, #12]
	}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10d      	bne.n	80068f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d14d      	bne.n	800697e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 f87e 	bl	80079e8 <xTaskPriorityDisinherit>
 80068ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	609a      	str	r2, [r3, #8]
 80068f4:	e043      	b.n	800697e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d119      	bne.n	8006930 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6858      	ldr	r0, [r3, #4]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006904:	461a      	mov	r2, r3
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	f002 ffad 	bl	8009866 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006914:	441a      	add	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	429a      	cmp	r2, r3
 8006924:	d32b      	bcc.n	800697e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	605a      	str	r2, [r3, #4]
 800692e:	e026      	b.n	800697e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	68d8      	ldr	r0, [r3, #12]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006938:	461a      	mov	r2, r3
 800693a:	68b9      	ldr	r1, [r7, #8]
 800693c:	f002 ff93 	bl	8009866 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006948:	425b      	negs	r3, r3
 800694a:	441a      	add	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d207      	bcs.n	800696c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006964:	425b      	negs	r3, r3
 8006966:	441a      	add	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b02      	cmp	r3, #2
 8006970:	d105      	bne.n	800697e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	3b01      	subs	r3, #1
 800697c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006986:	697b      	ldr	r3, [r7, #20]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d018      	beq.n	80069d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069aa:	441a      	add	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d303      	bcc.n	80069c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68d9      	ldr	r1, [r3, #12]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069cc:	461a      	mov	r2, r3
 80069ce:	6838      	ldr	r0, [r7, #0]
 80069d0:	f002 ff49 	bl	8009866 <memcpy>
	}
}
 80069d4:	bf00      	nop
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069e4:	f001 fdda 	bl	800859c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069f0:	e011      	b.n	8006a16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d012      	beq.n	8006a20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3324      	adds	r3, #36	@ 0x24
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fd9e 	bl	8007540 <xTaskRemoveFromEventList>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a0a:	f000 fe7d 	bl	8007708 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dce9      	bgt.n	80069f2 <prvUnlockQueue+0x16>
 8006a1e:	e000      	b.n	8006a22 <prvUnlockQueue+0x46>
					break;
 8006a20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	22ff      	movs	r2, #255	@ 0xff
 8006a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006a2a:	f001 fded 	bl	8008608 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a2e:	f001 fdb5 	bl	800859c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a3a:	e011      	b.n	8006a60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d012      	beq.n	8006a6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3310      	adds	r3, #16
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fd79 	bl	8007540 <xTaskRemoveFromEventList>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a54:	f000 fe58 	bl	8007708 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dce9      	bgt.n	8006a3c <prvUnlockQueue+0x60>
 8006a68:	e000      	b.n	8006a6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	22ff      	movs	r2, #255	@ 0xff
 8006a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a74:	f001 fdc8 	bl	8008608 <vPortExitCritical>
}
 8006a78:	bf00      	nop
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a88:	f001 fd88 	bl	800859c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d102      	bne.n	8006a9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a94:	2301      	movs	r3, #1
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	e001      	b.n	8006a9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a9e:	f001 fdb3 	bl	8008608 <vPortExitCritical>

	return xReturn;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ab4:	f001 fd72 	bl	800859c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d102      	bne.n	8006aca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e001      	b.n	8006ace <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ace:	f001 fd9b 	bl	8008608 <vPortExitCritical>

	return xReturn;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	e014      	b.n	8006b16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006aec:	4a0f      	ldr	r2, [pc, #60]	@ (8006b2c <vQueueAddToRegistry+0x50>)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10b      	bne.n	8006b10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006af8:	490c      	ldr	r1, [pc, #48]	@ (8006b2c <vQueueAddToRegistry+0x50>)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b02:	4a0a      	ldr	r2, [pc, #40]	@ (8006b2c <vQueueAddToRegistry+0x50>)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	4413      	add	r3, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b0e:	e006      	b.n	8006b1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3301      	adds	r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b07      	cmp	r3, #7
 8006b1a:	d9e7      	bls.n	8006aec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	200011f0 	.word	0x200011f0

08006b30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	e016      	b.n	8006b6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006b3e:	4a10      	ldr	r2, [pc, #64]	@ (8006b80 <vQueueUnregisterQueue+0x50>)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	4413      	add	r3, r2
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d10b      	bne.n	8006b66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006b80 <vQueueUnregisterQueue+0x50>)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2100      	movs	r1, #0
 8006b54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006b58:	4a09      	ldr	r2, [pc, #36]	@ (8006b80 <vQueueUnregisterQueue+0x50>)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	4413      	add	r3, r2
 8006b60:	2200      	movs	r2, #0
 8006b62:	605a      	str	r2, [r3, #4]
				break;
 8006b64:	e006      	b.n	8006b74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b07      	cmp	r3, #7
 8006b70:	d9e5      	bls.n	8006b3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006b72:	bf00      	nop
 8006b74:	bf00      	nop
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	200011f0 	.word	0x200011f0

08006b84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b94:	f001 fd02 	bl	800859c <vPortEnterCritical>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b9e:	b25b      	sxtb	r3, r3
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d103      	bne.n	8006bae <vQueueWaitForMessageRestricted+0x2a>
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bb4:	b25b      	sxtb	r3, r3
 8006bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bba:	d103      	bne.n	8006bc4 <vQueueWaitForMessageRestricted+0x40>
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bc4:	f001 fd20 	bl	8008608 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d106      	bne.n	8006bde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	3324      	adds	r3, #36	@ 0x24
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fc83 	bl	80074e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bde:	6978      	ldr	r0, [r7, #20]
 8006be0:	f7ff fefc 	bl	80069dc <prvUnlockQueue>
	}
 8006be4:	bf00      	nop
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08e      	sub	sp, #56	@ 0x38
 8006bf0:	af04      	add	r7, sp, #16
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10d      	bne.n	8006c1c <xTaskCreateStatic+0x30>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c04:	b672      	cpsid	i
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	b662      	cpsie	i
 8006c14:	623b      	str	r3, [r7, #32]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10d      	bne.n	8006c3e <xTaskCreateStatic+0x52>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c26:	b672      	cpsid	i
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	b662      	cpsie	i
 8006c36:	61fb      	str	r3, [r7, #28]
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	e7fd      	b.n	8006c3a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c3e:	23a8      	movs	r3, #168	@ 0xa8
 8006c40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	2ba8      	cmp	r3, #168	@ 0xa8
 8006c46:	d00d      	beq.n	8006c64 <xTaskCreateStatic+0x78>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4c:	b672      	cpsid	i
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	b662      	cpsie	i
 8006c5c:	61bb      	str	r3, [r7, #24]
}
 8006c5e:	bf00      	nop
 8006c60:	bf00      	nop
 8006c62:	e7fd      	b.n	8006c60 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01e      	beq.n	8006caa <xTaskCreateStatic+0xbe>
 8006c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d01b      	beq.n	8006caa <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c84:	2300      	movs	r3, #0
 8006c86:	9303      	str	r3, [sp, #12]
 8006c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8a:	9302      	str	r3, [sp, #8]
 8006c8c:	f107 0314 	add.w	r3, r7, #20
 8006c90:	9301      	str	r3, [sp, #4]
 8006c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f851 	bl	8006d44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ca2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ca4:	f000 f8f8 	bl	8006e98 <prvAddNewTaskToReadyList>
 8006ca8:	e001      	b.n	8006cae <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006cae:	697b      	ldr	r3, [r7, #20]
	}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3728      	adds	r7, #40	@ 0x28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08c      	sub	sp, #48	@ 0x30
 8006cbc:	af04      	add	r7, sp, #16
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006cc8:	88fb      	ldrh	r3, [r7, #6]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f001 fd93 	bl	80087f8 <pvPortMalloc>
 8006cd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00e      	beq.n	8006cf8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006cda:	20a8      	movs	r0, #168	@ 0xa8
 8006cdc:	f001 fd8c 	bl	80087f8 <pvPortMalloc>
 8006ce0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cee:	e005      	b.n	8006cfc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cf0:	6978      	ldr	r0, [r7, #20]
 8006cf2:	f001 fe4f 	bl	8008994 <vPortFree>
 8006cf6:	e001      	b.n	8006cfc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d017      	beq.n	8006d32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d0a:	88fa      	ldrh	r2, [r7, #6]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9303      	str	r3, [sp, #12]
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	9302      	str	r3, [sp, #8]
 8006d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d16:	9301      	str	r3, [sp, #4]
 8006d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 f80f 	bl	8006d44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d26:	69f8      	ldr	r0, [r7, #28]
 8006d28:	f000 f8b6 	bl	8006e98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	e002      	b.n	8006d38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d32:	f04f 33ff 	mov.w	r3, #4294967295
 8006d36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d38:	69bb      	ldr	r3, [r7, #24]
	}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3720      	adds	r7, #32
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d54:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	21a5      	movs	r1, #165	@ 0xa5
 8006d5e:	f002 fca4 	bl	80096aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006d6c:	440b      	add	r3, r1
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	f023 0307 	bic.w	r3, r3, #7
 8006d7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00d      	beq.n	8006da2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8a:	b672      	cpsid	i
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	b662      	cpsie	i
 8006d9a:	617b      	str	r3, [r7, #20]
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	e7fd      	b.n	8006d9e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d01f      	beq.n	8006de8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006da8:	2300      	movs	r3, #0
 8006daa:	61fb      	str	r3, [r7, #28]
 8006dac:	e012      	b.n	8006dd4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	4413      	add	r3, r2
 8006db4:	7819      	ldrb	r1, [r3, #0]
 8006db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	4413      	add	r3, r2
 8006dbc:	3334      	adds	r3, #52	@ 0x34
 8006dbe:	460a      	mov	r2, r1
 8006dc0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d006      	beq.n	8006ddc <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	61fb      	str	r3, [r7, #28]
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	2b0f      	cmp	r3, #15
 8006dd8:	d9e9      	bls.n	8006dae <prvInitialiseNewTask+0x6a>
 8006dda:	e000      	b.n	8006dde <prvInitialiseNewTask+0x9a>
			{
				break;
 8006ddc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006de6:	e003      	b.n	8006df0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df2:	2b37      	cmp	r3, #55	@ 0x37
 8006df4:	d901      	bls.n	8006dfa <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006df6:	2337      	movs	r3, #55	@ 0x37
 8006df8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	2200      	movs	r2, #0
 8006e0a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fe fde3 	bl	80059dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	3318      	adds	r3, #24
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe fdde 	bl	80059dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	3354      	adds	r3, #84	@ 0x54
 8006e4a:	224c      	movs	r2, #76	@ 0x4c
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f002 fc2b 	bl	80096aa <memset>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	4a0d      	ldr	r2, [pc, #52]	@ (8006e8c <prvInitialiseNewTask+0x148>)
 8006e58:	659a      	str	r2, [r3, #88]	@ 0x58
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8006e90 <prvInitialiseNewTask+0x14c>)
 8006e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e62:	4a0c      	ldr	r2, [pc, #48]	@ (8006e94 <prvInitialiseNewTask+0x150>)
 8006e64:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	68f9      	ldr	r1, [r7, #12]
 8006e6a:	69b8      	ldr	r0, [r7, #24]
 8006e6c:	f001 fa88 	bl	8008380 <pxPortInitialiseStack>
 8006e70:	4602      	mov	r2, r0
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e82:	bf00      	nop
 8006e84:	3720      	adds	r7, #32
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	2000547c 	.word	0x2000547c
 8006e90:	200054e4 	.word	0x200054e4
 8006e94:	2000554c 	.word	0x2000554c

08006e98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ea0:	f001 fb7c 	bl	800859c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8006f5c <prvAddNewTaskToReadyList+0xc4>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8006f5c <prvAddNewTaskToReadyList+0xc4>)
 8006eac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006eae:	4b2c      	ldr	r3, [pc, #176]	@ (8006f60 <prvAddNewTaskToReadyList+0xc8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d109      	bne.n	8006eca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8006f60 <prvAddNewTaskToReadyList+0xc8>)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ebc:	4b27      	ldr	r3, [pc, #156]	@ (8006f5c <prvAddNewTaskToReadyList+0xc4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d110      	bne.n	8006ee6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ec4:	f000 fc44 	bl	8007750 <prvInitialiseTaskLists>
 8006ec8:	e00d      	b.n	8006ee6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006eca:	4b26      	ldr	r3, [pc, #152]	@ (8006f64 <prvAddNewTaskToReadyList+0xcc>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ed2:	4b23      	ldr	r3, [pc, #140]	@ (8006f60 <prvAddNewTaskToReadyList+0xc8>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d802      	bhi.n	8006ee6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8006f60 <prvAddNewTaskToReadyList+0xc8>)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ee6:	4b20      	ldr	r3, [pc, #128]	@ (8006f68 <prvAddNewTaskToReadyList+0xd0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3301      	adds	r3, #1
 8006eec:	4a1e      	ldr	r2, [pc, #120]	@ (8006f68 <prvAddNewTaskToReadyList+0xd0>)
 8006eee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f68 <prvAddNewTaskToReadyList+0xd0>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006efc:	4b1b      	ldr	r3, [pc, #108]	@ (8006f6c <prvAddNewTaskToReadyList+0xd4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d903      	bls.n	8006f0c <prvAddNewTaskToReadyList+0x74>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f08:	4a18      	ldr	r2, [pc, #96]	@ (8006f6c <prvAddNewTaskToReadyList+0xd4>)
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4a15      	ldr	r2, [pc, #84]	@ (8006f70 <prvAddNewTaskToReadyList+0xd8>)
 8006f1a:	441a      	add	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4619      	mov	r1, r3
 8006f22:	4610      	mov	r0, r2
 8006f24:	f7fe fd67 	bl	80059f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f28:	f001 fb6e 	bl	8008608 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f64 <prvAddNewTaskToReadyList+0xcc>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00e      	beq.n	8006f52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f34:	4b0a      	ldr	r3, [pc, #40]	@ (8006f60 <prvAddNewTaskToReadyList+0xc8>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d207      	bcs.n	8006f52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f42:	4b0c      	ldr	r3, [pc, #48]	@ (8006f74 <prvAddNewTaskToReadyList+0xdc>)
 8006f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f52:	bf00      	nop
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20001704 	.word	0x20001704
 8006f60:	20001230 	.word	0x20001230
 8006f64:	20001710 	.word	0x20001710
 8006f68:	20001720 	.word	0x20001720
 8006f6c:	2000170c 	.word	0x2000170c
 8006f70:	20001234 	.word	0x20001234
 8006f74:	e000ed04 	.word	0xe000ed04

08006f78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d01a      	beq.n	8006fc0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f8a:	4b15      	ldr	r3, [pc, #84]	@ (8006fe0 <vTaskDelay+0x68>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00d      	beq.n	8006fae <vTaskDelay+0x36>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f96:	b672      	cpsid	i
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	b662      	cpsie	i
 8006fa6:	60bb      	str	r3, [r7, #8]
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	e7fd      	b.n	8006faa <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006fae:	f000 f88f 	bl	80070d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fe27 	bl	8007c08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006fba:	f000 f897 	bl	80070ec <xTaskResumeAll>
 8006fbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d107      	bne.n	8006fd6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006fc6:	4b07      	ldr	r3, [pc, #28]	@ (8006fe4 <vTaskDelay+0x6c>)
 8006fc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fd6:	bf00      	nop
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	2000172c 	.word	0x2000172c
 8006fe4:	e000ed04 	.word	0xe000ed04

08006fe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	@ 0x28
 8006fec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ff6:	463a      	mov	r2, r7
 8006ff8:	1d39      	adds	r1, r7, #4
 8006ffa:	f107 0308 	add.w	r3, r7, #8
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fc98 	bl	8005934 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	9202      	str	r2, [sp, #8]
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	2300      	movs	r3, #0
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	2300      	movs	r3, #0
 8007014:	460a      	mov	r2, r1
 8007016:	4926      	ldr	r1, [pc, #152]	@ (80070b0 <vTaskStartScheduler+0xc8>)
 8007018:	4826      	ldr	r0, [pc, #152]	@ (80070b4 <vTaskStartScheduler+0xcc>)
 800701a:	f7ff fde7 	bl	8006bec <xTaskCreateStatic>
 800701e:	4603      	mov	r3, r0
 8007020:	4a25      	ldr	r2, [pc, #148]	@ (80070b8 <vTaskStartScheduler+0xd0>)
 8007022:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007024:	4b24      	ldr	r3, [pc, #144]	@ (80070b8 <vTaskStartScheduler+0xd0>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800702c:	2301      	movs	r3, #1
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	e001      	b.n	8007036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d102      	bne.n	8007042 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800703c:	f000 fe38 	bl	8007cb0 <xTimerCreateTimerTask>
 8007040:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d11d      	bne.n	8007084 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704c:	b672      	cpsid	i
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	b662      	cpsie	i
 800705c:	613b      	str	r3, [r7, #16]
}
 800705e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007060:	4b16      	ldr	r3, [pc, #88]	@ (80070bc <vTaskStartScheduler+0xd4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3354      	adds	r3, #84	@ 0x54
 8007066:	4a16      	ldr	r2, [pc, #88]	@ (80070c0 <vTaskStartScheduler+0xd8>)
 8007068:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800706a:	4b16      	ldr	r3, [pc, #88]	@ (80070c4 <vTaskStartScheduler+0xdc>)
 800706c:	f04f 32ff 	mov.w	r2, #4294967295
 8007070:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007072:	4b15      	ldr	r3, [pc, #84]	@ (80070c8 <vTaskStartScheduler+0xe0>)
 8007074:	2201      	movs	r2, #1
 8007076:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007078:	4b14      	ldr	r3, [pc, #80]	@ (80070cc <vTaskStartScheduler+0xe4>)
 800707a:	2200      	movs	r2, #0
 800707c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800707e:	f001 fa0f 	bl	80084a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007082:	e011      	b.n	80070a8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708a:	d10d      	bne.n	80070a8 <vTaskStartScheduler+0xc0>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007090:	b672      	cpsid	i
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	b662      	cpsie	i
 80070a0:	60fb      	str	r3, [r7, #12]
}
 80070a2:	bf00      	nop
 80070a4:	bf00      	nop
 80070a6:	e7fd      	b.n	80070a4 <vTaskStartScheduler+0xbc>
}
 80070a8:	bf00      	nop
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	0800b888 	.word	0x0800b888
 80070b4:	08007721 	.word	0x08007721
 80070b8:	20001728 	.word	0x20001728
 80070bc:	20001230 	.word	0x20001230
 80070c0:	2000001c 	.word	0x2000001c
 80070c4:	20001724 	.word	0x20001724
 80070c8:	20001710 	.word	0x20001710
 80070cc:	20001708 	.word	0x20001708

080070d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80070d4:	4b04      	ldr	r3, [pc, #16]	@ (80070e8 <vTaskSuspendAll+0x18>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3301      	adds	r3, #1
 80070da:	4a03      	ldr	r2, [pc, #12]	@ (80070e8 <vTaskSuspendAll+0x18>)
 80070dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80070de:	bf00      	nop
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	2000172c 	.word	0x2000172c

080070ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070fa:	4b43      	ldr	r3, [pc, #268]	@ (8007208 <xTaskResumeAll+0x11c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10d      	bne.n	800711e <xTaskResumeAll+0x32>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007106:	b672      	cpsid	i
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	b662      	cpsie	i
 8007116:	603b      	str	r3, [r7, #0]
}
 8007118:	bf00      	nop
 800711a:	bf00      	nop
 800711c:	e7fd      	b.n	800711a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800711e:	f001 fa3d 	bl	800859c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007122:	4b39      	ldr	r3, [pc, #228]	@ (8007208 <xTaskResumeAll+0x11c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3b01      	subs	r3, #1
 8007128:	4a37      	ldr	r2, [pc, #220]	@ (8007208 <xTaskResumeAll+0x11c>)
 800712a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800712c:	4b36      	ldr	r3, [pc, #216]	@ (8007208 <xTaskResumeAll+0x11c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d162      	bne.n	80071fa <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007134:	4b35      	ldr	r3, [pc, #212]	@ (800720c <xTaskResumeAll+0x120>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d05e      	beq.n	80071fa <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800713c:	e02f      	b.n	800719e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800713e:	4b34      	ldr	r3, [pc, #208]	@ (8007210 <xTaskResumeAll+0x124>)
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	3318      	adds	r3, #24
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe fcb0 	bl	8005ab0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3304      	adds	r3, #4
 8007154:	4618      	mov	r0, r3
 8007156:	f7fe fcab 	bl	8005ab0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800715e:	4b2d      	ldr	r3, [pc, #180]	@ (8007214 <xTaskResumeAll+0x128>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d903      	bls.n	800716e <xTaskResumeAll+0x82>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716a:	4a2a      	ldr	r2, [pc, #168]	@ (8007214 <xTaskResumeAll+0x128>)
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4a27      	ldr	r2, [pc, #156]	@ (8007218 <xTaskResumeAll+0x12c>)
 800717c:	441a      	add	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3304      	adds	r3, #4
 8007182:	4619      	mov	r1, r3
 8007184:	4610      	mov	r0, r2
 8007186:	f7fe fc36 	bl	80059f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718e:	4b23      	ldr	r3, [pc, #140]	@ (800721c <xTaskResumeAll+0x130>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007194:	429a      	cmp	r2, r3
 8007196:	d302      	bcc.n	800719e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8007198:	4b21      	ldr	r3, [pc, #132]	@ (8007220 <xTaskResumeAll+0x134>)
 800719a:	2201      	movs	r2, #1
 800719c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800719e:	4b1c      	ldr	r3, [pc, #112]	@ (8007210 <xTaskResumeAll+0x124>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1cb      	bne.n	800713e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071ac:	f000 fb76 	bl	800789c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80071b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007224 <xTaskResumeAll+0x138>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d010      	beq.n	80071de <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80071bc:	f000 f846 	bl	800724c <xTaskIncrementTick>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80071c6:	4b16      	ldr	r3, [pc, #88]	@ (8007220 <xTaskResumeAll+0x134>)
 80071c8:	2201      	movs	r2, #1
 80071ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1f1      	bne.n	80071bc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80071d8:	4b12      	ldr	r3, [pc, #72]	@ (8007224 <xTaskResumeAll+0x138>)
 80071da:	2200      	movs	r2, #0
 80071dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071de:	4b10      	ldr	r3, [pc, #64]	@ (8007220 <xTaskResumeAll+0x134>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071e6:	2301      	movs	r3, #1
 80071e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007228 <xTaskResumeAll+0x13c>)
 80071ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071fa:	f001 fa05 	bl	8008608 <vPortExitCritical>

	return xAlreadyYielded;
 80071fe:	68bb      	ldr	r3, [r7, #8]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	2000172c 	.word	0x2000172c
 800720c:	20001704 	.word	0x20001704
 8007210:	200016c4 	.word	0x200016c4
 8007214:	2000170c 	.word	0x2000170c
 8007218:	20001234 	.word	0x20001234
 800721c:	20001230 	.word	0x20001230
 8007220:	20001718 	.word	0x20001718
 8007224:	20001714 	.word	0x20001714
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007232:	4b05      	ldr	r3, [pc, #20]	@ (8007248 <xTaskGetTickCount+0x1c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007238:	687b      	ldr	r3, [r7, #4]
}
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20001708 	.word	0x20001708

0800724c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007252:	2300      	movs	r3, #0
 8007254:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007256:	4b50      	ldr	r3, [pc, #320]	@ (8007398 <xTaskIncrementTick+0x14c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	f040 808c 	bne.w	8007378 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007260:	4b4e      	ldr	r3, [pc, #312]	@ (800739c <xTaskIncrementTick+0x150>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007268:	4a4c      	ldr	r2, [pc, #304]	@ (800739c <xTaskIncrementTick+0x150>)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d123      	bne.n	80072bc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007274:	4b4a      	ldr	r3, [pc, #296]	@ (80073a0 <xTaskIncrementTick+0x154>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00d      	beq.n	800729a <xTaskIncrementTick+0x4e>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	b672      	cpsid	i
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	b662      	cpsie	i
 8007292:	603b      	str	r3, [r7, #0]
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	e7fd      	b.n	8007296 <xTaskIncrementTick+0x4a>
 800729a:	4b41      	ldr	r3, [pc, #260]	@ (80073a0 <xTaskIncrementTick+0x154>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	4b40      	ldr	r3, [pc, #256]	@ (80073a4 <xTaskIncrementTick+0x158>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a3e      	ldr	r2, [pc, #248]	@ (80073a0 <xTaskIncrementTick+0x154>)
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	4a3e      	ldr	r2, [pc, #248]	@ (80073a4 <xTaskIncrementTick+0x158>)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	4b3e      	ldr	r3, [pc, #248]	@ (80073a8 <xTaskIncrementTick+0x15c>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3301      	adds	r3, #1
 80072b4:	4a3c      	ldr	r2, [pc, #240]	@ (80073a8 <xTaskIncrementTick+0x15c>)
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	f000 faf0 	bl	800789c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072bc:	4b3b      	ldr	r3, [pc, #236]	@ (80073ac <xTaskIncrementTick+0x160>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d349      	bcc.n	800735a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072c6:	4b36      	ldr	r3, [pc, #216]	@ (80073a0 <xTaskIncrementTick+0x154>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d104      	bne.n	80072da <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d0:	4b36      	ldr	r3, [pc, #216]	@ (80073ac <xTaskIncrementTick+0x160>)
 80072d2:	f04f 32ff 	mov.w	r2, #4294967295
 80072d6:	601a      	str	r2, [r3, #0]
					break;
 80072d8:	e03f      	b.n	800735a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072da:	4b31      	ldr	r3, [pc, #196]	@ (80073a0 <xTaskIncrementTick+0x154>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d203      	bcs.n	80072fa <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072f2:	4a2e      	ldr	r2, [pc, #184]	@ (80073ac <xTaskIncrementTick+0x160>)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80072f8:	e02f      	b.n	800735a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	3304      	adds	r3, #4
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fbd6 	bl	8005ab0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007308:	2b00      	cmp	r3, #0
 800730a:	d004      	beq.n	8007316 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	3318      	adds	r3, #24
 8007310:	4618      	mov	r0, r3
 8007312:	f7fe fbcd 	bl	8005ab0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800731a:	4b25      	ldr	r3, [pc, #148]	@ (80073b0 <xTaskIncrementTick+0x164>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d903      	bls.n	800732a <xTaskIncrementTick+0xde>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007326:	4a22      	ldr	r2, [pc, #136]	@ (80073b0 <xTaskIncrementTick+0x164>)
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4a1f      	ldr	r2, [pc, #124]	@ (80073b4 <xTaskIncrementTick+0x168>)
 8007338:	441a      	add	r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	3304      	adds	r3, #4
 800733e:	4619      	mov	r1, r3
 8007340:	4610      	mov	r0, r2
 8007342:	f7fe fb58 	bl	80059f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800734a:	4b1b      	ldr	r3, [pc, #108]	@ (80073b8 <xTaskIncrementTick+0x16c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007350:	429a      	cmp	r2, r3
 8007352:	d3b8      	bcc.n	80072c6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007354:	2301      	movs	r3, #1
 8007356:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007358:	e7b5      	b.n	80072c6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800735a:	4b17      	ldr	r3, [pc, #92]	@ (80073b8 <xTaskIncrementTick+0x16c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007360:	4914      	ldr	r1, [pc, #80]	@ (80073b4 <xTaskIncrementTick+0x168>)
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	440b      	add	r3, r1
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d907      	bls.n	8007382 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007372:	2301      	movs	r3, #1
 8007374:	617b      	str	r3, [r7, #20]
 8007376:	e004      	b.n	8007382 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007378:	4b10      	ldr	r3, [pc, #64]	@ (80073bc <xTaskIncrementTick+0x170>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3301      	adds	r3, #1
 800737e:	4a0f      	ldr	r2, [pc, #60]	@ (80073bc <xTaskIncrementTick+0x170>)
 8007380:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007382:	4b0f      	ldr	r3, [pc, #60]	@ (80073c0 <xTaskIncrementTick+0x174>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800738a:	2301      	movs	r3, #1
 800738c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800738e:	697b      	ldr	r3, [r7, #20]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	2000172c 	.word	0x2000172c
 800739c:	20001708 	.word	0x20001708
 80073a0:	200016bc 	.word	0x200016bc
 80073a4:	200016c0 	.word	0x200016c0
 80073a8:	2000171c 	.word	0x2000171c
 80073ac:	20001724 	.word	0x20001724
 80073b0:	2000170c 	.word	0x2000170c
 80073b4:	20001234 	.word	0x20001234
 80073b8:	20001230 	.word	0x20001230
 80073bc:	20001714 	.word	0x20001714
 80073c0:	20001718 	.word	0x20001718

080073c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073ca:	4b2c      	ldr	r3, [pc, #176]	@ (800747c <vTaskSwitchContext+0xb8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073d2:	4b2b      	ldr	r3, [pc, #172]	@ (8007480 <vTaskSwitchContext+0xbc>)
 80073d4:	2201      	movs	r2, #1
 80073d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073d8:	e049      	b.n	800746e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80073da:	4b29      	ldr	r3, [pc, #164]	@ (8007480 <vTaskSwitchContext+0xbc>)
 80073dc:	2200      	movs	r2, #0
 80073de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e0:	4b28      	ldr	r3, [pc, #160]	@ (8007484 <vTaskSwitchContext+0xc0>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	e013      	b.n	8007410 <vTaskSwitchContext+0x4c>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10d      	bne.n	800740a <vTaskSwitchContext+0x46>
	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f2:	b672      	cpsid	i
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	b662      	cpsie	i
 8007402:	607b      	str	r3, [r7, #4]
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	e7fd      	b.n	8007406 <vTaskSwitchContext+0x42>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3b01      	subs	r3, #1
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	491d      	ldr	r1, [pc, #116]	@ (8007488 <vTaskSwitchContext+0xc4>)
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0e1      	beq.n	80073e8 <vTaskSwitchContext+0x24>
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4a16      	ldr	r2, [pc, #88]	@ (8007488 <vTaskSwitchContext+0xc4>)
 8007430:	4413      	add	r3, r2
 8007432:	60bb      	str	r3, [r7, #8]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	605a      	str	r2, [r3, #4]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	3308      	adds	r3, #8
 8007446:	429a      	cmp	r2, r3
 8007448:	d104      	bne.n	8007454 <vTaskSwitchContext+0x90>
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	605a      	str	r2, [r3, #4]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	4a0c      	ldr	r2, [pc, #48]	@ (800748c <vTaskSwitchContext+0xc8>)
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	4a09      	ldr	r2, [pc, #36]	@ (8007484 <vTaskSwitchContext+0xc0>)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007464:	4b09      	ldr	r3, [pc, #36]	@ (800748c <vTaskSwitchContext+0xc8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3354      	adds	r3, #84	@ 0x54
 800746a:	4a09      	ldr	r2, [pc, #36]	@ (8007490 <vTaskSwitchContext+0xcc>)
 800746c:	6013      	str	r3, [r2, #0]
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	2000172c 	.word	0x2000172c
 8007480:	20001718 	.word	0x20001718
 8007484:	2000170c 	.word	0x2000170c
 8007488:	20001234 	.word	0x20001234
 800748c:	20001230 	.word	0x20001230
 8007490:	2000001c 	.word	0x2000001c

08007494 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10d      	bne.n	80074c0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a8:	b672      	cpsid	i
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	b662      	cpsie	i
 80074b8:	60fb      	str	r3, [r7, #12]
}
 80074ba:	bf00      	nop
 80074bc:	bf00      	nop
 80074be:	e7fd      	b.n	80074bc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074c0:	4b07      	ldr	r3, [pc, #28]	@ (80074e0 <vTaskPlaceOnEventList+0x4c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3318      	adds	r3, #24
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7fe fab8 	bl	8005a3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074ce:	2101      	movs	r1, #1
 80074d0:	6838      	ldr	r0, [r7, #0]
 80074d2:	f000 fb99 	bl	8007c08 <prvAddCurrentTaskToDelayedList>
}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20001230 	.word	0x20001230

080074e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10d      	bne.n	8007512 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	b672      	cpsid	i
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	b662      	cpsie	i
 800750a:	617b      	str	r3, [r7, #20]
}
 800750c:	bf00      	nop
 800750e:	bf00      	nop
 8007510:	e7fd      	b.n	800750e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007512:	4b0a      	ldr	r3, [pc, #40]	@ (800753c <vTaskPlaceOnEventListRestricted+0x58>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3318      	adds	r3, #24
 8007518:	4619      	mov	r1, r3
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7fe fa6b 	bl	80059f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007526:	f04f 33ff 	mov.w	r3, #4294967295
 800752a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	68b8      	ldr	r0, [r7, #8]
 8007530:	f000 fb6a 	bl	8007c08 <prvAddCurrentTaskToDelayedList>
	}
 8007534:	bf00      	nop
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	20001230 	.word	0x20001230

08007540 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10d      	bne.n	8007572 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755a:	b672      	cpsid	i
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	b662      	cpsie	i
 800756a:	60fb      	str	r3, [r7, #12]
}
 800756c:	bf00      	nop
 800756e:	bf00      	nop
 8007570:	e7fd      	b.n	800756e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	3318      	adds	r3, #24
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fa9a 	bl	8005ab0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800757c:	4b1d      	ldr	r3, [pc, #116]	@ (80075f4 <xTaskRemoveFromEventList+0xb4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d11d      	bne.n	80075c0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	3304      	adds	r3, #4
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe fa91 	bl	8005ab0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007592:	4b19      	ldr	r3, [pc, #100]	@ (80075f8 <xTaskRemoveFromEventList+0xb8>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d903      	bls.n	80075a2 <xTaskRemoveFromEventList+0x62>
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	4a16      	ldr	r2, [pc, #88]	@ (80075f8 <xTaskRemoveFromEventList+0xb8>)
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4a13      	ldr	r2, [pc, #76]	@ (80075fc <xTaskRemoveFromEventList+0xbc>)
 80075b0:	441a      	add	r2, r3
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f7fe fa1c 	bl	80059f6 <vListInsertEnd>
 80075be:	e005      	b.n	80075cc <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	3318      	adds	r3, #24
 80075c4:	4619      	mov	r1, r3
 80075c6:	480e      	ldr	r0, [pc, #56]	@ (8007600 <xTaskRemoveFromEventList+0xc0>)
 80075c8:	f7fe fa15 	bl	80059f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007604 <xTaskRemoveFromEventList+0xc4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d905      	bls.n	80075e6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075da:	2301      	movs	r3, #1
 80075dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075de:	4b0a      	ldr	r3, [pc, #40]	@ (8007608 <xTaskRemoveFromEventList+0xc8>)
 80075e0:	2201      	movs	r2, #1
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	e001      	b.n	80075ea <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80075e6:	2300      	movs	r3, #0
 80075e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80075ea:	697b      	ldr	r3, [r7, #20]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	2000172c 	.word	0x2000172c
 80075f8:	2000170c 	.word	0x2000170c
 80075fc:	20001234 	.word	0x20001234
 8007600:	200016c4 	.word	0x200016c4
 8007604:	20001230 	.word	0x20001230
 8007608:	20001718 	.word	0x20001718

0800760c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007614:	4b06      	ldr	r3, [pc, #24]	@ (8007630 <vTaskInternalSetTimeOutState+0x24>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800761c:	4b05      	ldr	r3, [pc, #20]	@ (8007634 <vTaskInternalSetTimeOutState+0x28>)
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	605a      	str	r2, [r3, #4]
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	2000171c 	.word	0x2000171c
 8007634:	20001708 	.word	0x20001708

08007638 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10d      	bne.n	8007664 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764c:	b672      	cpsid	i
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	b662      	cpsie	i
 800765c:	613b      	str	r3, [r7, #16]
}
 800765e:	bf00      	nop
 8007660:	bf00      	nop
 8007662:	e7fd      	b.n	8007660 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10d      	bne.n	8007686 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766e:	b672      	cpsid	i
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	b662      	cpsie	i
 800767e:	60fb      	str	r3, [r7, #12]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007686:	f000 ff89 	bl	800859c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800768a:	4b1d      	ldr	r3, [pc, #116]	@ (8007700 <xTaskCheckForTimeOut+0xc8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a2:	d102      	bne.n	80076aa <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	61fb      	str	r3, [r7, #28]
 80076a8:	e023      	b.n	80076f2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4b15      	ldr	r3, [pc, #84]	@ (8007704 <xTaskCheckForTimeOut+0xcc>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d007      	beq.n	80076c6 <xTaskCheckForTimeOut+0x8e>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d302      	bcc.n	80076c6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076c0:	2301      	movs	r3, #1
 80076c2:	61fb      	str	r3, [r7, #28]
 80076c4:	e015      	b.n	80076f2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d20b      	bcs.n	80076e8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	1ad2      	subs	r2, r2, r3
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff ff95 	bl	800760c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]
 80076e6:	e004      	b.n	80076f2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076ee:	2301      	movs	r3, #1
 80076f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076f2:	f000 ff89 	bl	8008608 <vPortExitCritical>

	return xReturn;
 80076f6:	69fb      	ldr	r3, [r7, #28]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3720      	adds	r7, #32
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	20001708 	.word	0x20001708
 8007704:	2000171c 	.word	0x2000171c

08007708 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800770c:	4b03      	ldr	r3, [pc, #12]	@ (800771c <vTaskMissedYield+0x14>)
 800770e:	2201      	movs	r2, #1
 8007710:	601a      	str	r2, [r3, #0]
}
 8007712:	bf00      	nop
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	20001718 	.word	0x20001718

08007720 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007728:	f000 f852 	bl	80077d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800772c:	4b06      	ldr	r3, [pc, #24]	@ (8007748 <prvIdleTask+0x28>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d9f9      	bls.n	8007728 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007734:	4b05      	ldr	r3, [pc, #20]	@ (800774c <prvIdleTask+0x2c>)
 8007736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007744:	e7f0      	b.n	8007728 <prvIdleTask+0x8>
 8007746:	bf00      	nop
 8007748:	20001234 	.word	0x20001234
 800774c:	e000ed04 	.word	0xe000ed04

08007750 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007756:	2300      	movs	r3, #0
 8007758:	607b      	str	r3, [r7, #4]
 800775a:	e00c      	b.n	8007776 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4a12      	ldr	r2, [pc, #72]	@ (80077b0 <prvInitialiseTaskLists+0x60>)
 8007768:	4413      	add	r3, r2
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe f916 	bl	800599c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3301      	adds	r3, #1
 8007774:	607b      	str	r3, [r7, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b37      	cmp	r3, #55	@ 0x37
 800777a:	d9ef      	bls.n	800775c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800777c:	480d      	ldr	r0, [pc, #52]	@ (80077b4 <prvInitialiseTaskLists+0x64>)
 800777e:	f7fe f90d 	bl	800599c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007782:	480d      	ldr	r0, [pc, #52]	@ (80077b8 <prvInitialiseTaskLists+0x68>)
 8007784:	f7fe f90a 	bl	800599c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007788:	480c      	ldr	r0, [pc, #48]	@ (80077bc <prvInitialiseTaskLists+0x6c>)
 800778a:	f7fe f907 	bl	800599c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800778e:	480c      	ldr	r0, [pc, #48]	@ (80077c0 <prvInitialiseTaskLists+0x70>)
 8007790:	f7fe f904 	bl	800599c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007794:	480b      	ldr	r0, [pc, #44]	@ (80077c4 <prvInitialiseTaskLists+0x74>)
 8007796:	f7fe f901 	bl	800599c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800779a:	4b0b      	ldr	r3, [pc, #44]	@ (80077c8 <prvInitialiseTaskLists+0x78>)
 800779c:	4a05      	ldr	r2, [pc, #20]	@ (80077b4 <prvInitialiseTaskLists+0x64>)
 800779e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077a0:	4b0a      	ldr	r3, [pc, #40]	@ (80077cc <prvInitialiseTaskLists+0x7c>)
 80077a2:	4a05      	ldr	r2, [pc, #20]	@ (80077b8 <prvInitialiseTaskLists+0x68>)
 80077a4:	601a      	str	r2, [r3, #0]
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20001234 	.word	0x20001234
 80077b4:	20001694 	.word	0x20001694
 80077b8:	200016a8 	.word	0x200016a8
 80077bc:	200016c4 	.word	0x200016c4
 80077c0:	200016d8 	.word	0x200016d8
 80077c4:	200016f0 	.word	0x200016f0
 80077c8:	200016bc 	.word	0x200016bc
 80077cc:	200016c0 	.word	0x200016c0

080077d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077d6:	e019      	b.n	800780c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077d8:	f000 fee0 	bl	800859c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077dc:	4b10      	ldr	r3, [pc, #64]	@ (8007820 <prvCheckTasksWaitingTermination+0x50>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fe f961 	bl	8005ab0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007824 <prvCheckTasksWaitingTermination+0x54>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	4a0b      	ldr	r2, [pc, #44]	@ (8007824 <prvCheckTasksWaitingTermination+0x54>)
 80077f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007828 <prvCheckTasksWaitingTermination+0x58>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007828 <prvCheckTasksWaitingTermination+0x58>)
 8007800:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007802:	f000 ff01 	bl	8008608 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f810 	bl	800782c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800780c:	4b06      	ldr	r3, [pc, #24]	@ (8007828 <prvCheckTasksWaitingTermination+0x58>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e1      	bne.n	80077d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	200016d8 	.word	0x200016d8
 8007824:	20001704 	.word	0x20001704
 8007828:	200016ec 	.word	0x200016ec

0800782c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3354      	adds	r3, #84	@ 0x54
 8007838:	4618      	mov	r0, r3
 800783a:	f001 ff53 	bl	80096e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007844:	2b00      	cmp	r3, #0
 8007846:	d108      	bne.n	800785a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784c:	4618      	mov	r0, r3
 800784e:	f001 f8a1 	bl	8008994 <vPortFree>
				vPortFree( pxTCB );
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 f89e 	bl	8008994 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007858:	e01b      	b.n	8007892 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007860:	2b01      	cmp	r3, #1
 8007862:	d103      	bne.n	800786c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 f895 	bl	8008994 <vPortFree>
	}
 800786a:	e012      	b.n	8007892 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007872:	2b02      	cmp	r3, #2
 8007874:	d00d      	beq.n	8007892 <prvDeleteTCB+0x66>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	b672      	cpsid	i
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	b662      	cpsie	i
 800788a:	60fb      	str	r3, [r7, #12]
}
 800788c:	bf00      	nop
 800788e:	bf00      	nop
 8007890:	e7fd      	b.n	800788e <prvDeleteTCB+0x62>
	}
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078a2:	4b0c      	ldr	r3, [pc, #48]	@ (80078d4 <prvResetNextTaskUnblockTime+0x38>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d104      	bne.n	80078b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078ac:	4b0a      	ldr	r3, [pc, #40]	@ (80078d8 <prvResetNextTaskUnblockTime+0x3c>)
 80078ae:	f04f 32ff 	mov.w	r2, #4294967295
 80078b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078b4:	e008      	b.n	80078c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b6:	4b07      	ldr	r3, [pc, #28]	@ (80078d4 <prvResetNextTaskUnblockTime+0x38>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	4a04      	ldr	r2, [pc, #16]	@ (80078d8 <prvResetNextTaskUnblockTime+0x3c>)
 80078c6:	6013      	str	r3, [r2, #0]
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	200016bc 	.word	0x200016bc
 80078d8:	20001724 	.word	0x20001724

080078dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007910 <xTaskGetSchedulerState+0x34>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d102      	bne.n	80078f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078ea:	2301      	movs	r3, #1
 80078ec:	607b      	str	r3, [r7, #4]
 80078ee:	e008      	b.n	8007902 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078f0:	4b08      	ldr	r3, [pc, #32]	@ (8007914 <xTaskGetSchedulerState+0x38>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d102      	bne.n	80078fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078f8:	2302      	movs	r3, #2
 80078fa:	607b      	str	r3, [r7, #4]
 80078fc:	e001      	b.n	8007902 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078fe:	2300      	movs	r3, #0
 8007900:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007902:	687b      	ldr	r3, [r7, #4]
	}
 8007904:	4618      	mov	r0, r3
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	20001710 	.word	0x20001710
 8007914:	2000172c 	.word	0x2000172c

08007918 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007924:	2300      	movs	r3, #0
 8007926:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d051      	beq.n	80079d2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007932:	4b2a      	ldr	r3, [pc, #168]	@ (80079dc <xTaskPriorityInherit+0xc4>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007938:	429a      	cmp	r2, r3
 800793a:	d241      	bcs.n	80079c0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	2b00      	cmp	r3, #0
 8007942:	db06      	blt.n	8007952 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007944:	4b25      	ldr	r3, [pc, #148]	@ (80079dc <xTaskPriorityInherit+0xc4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6959      	ldr	r1, [r3, #20]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4a1f      	ldr	r2, [pc, #124]	@ (80079e0 <xTaskPriorityInherit+0xc8>)
 8007964:	4413      	add	r3, r2
 8007966:	4299      	cmp	r1, r3
 8007968:	d122      	bne.n	80079b0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	3304      	adds	r3, #4
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe f89e 	bl	8005ab0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007974:	4b19      	ldr	r3, [pc, #100]	@ (80079dc <xTaskPriorityInherit+0xc4>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007982:	4b18      	ldr	r3, [pc, #96]	@ (80079e4 <xTaskPriorityInherit+0xcc>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d903      	bls.n	8007992 <xTaskPriorityInherit+0x7a>
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	4a15      	ldr	r2, [pc, #84]	@ (80079e4 <xTaskPriorityInherit+0xcc>)
 8007990:	6013      	str	r3, [r2, #0]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4a10      	ldr	r2, [pc, #64]	@ (80079e0 <xTaskPriorityInherit+0xc8>)
 80079a0:	441a      	add	r2, r3
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	3304      	adds	r3, #4
 80079a6:	4619      	mov	r1, r3
 80079a8:	4610      	mov	r0, r2
 80079aa:	f7fe f824 	bl	80059f6 <vListInsertEnd>
 80079ae:	e004      	b.n	80079ba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079b0:	4b0a      	ldr	r3, [pc, #40]	@ (80079dc <xTaskPriorityInherit+0xc4>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079ba:	2301      	movs	r3, #1
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	e008      	b.n	80079d2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079c4:	4b05      	ldr	r3, [pc, #20]	@ (80079dc <xTaskPriorityInherit+0xc4>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d201      	bcs.n	80079d2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079ce:	2301      	movs	r3, #1
 80079d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079d2:	68fb      	ldr	r3, [r7, #12]
	}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	20001230 	.word	0x20001230
 80079e0:	20001234 	.word	0x20001234
 80079e4:	2000170c 	.word	0x2000170c

080079e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d05c      	beq.n	8007ab8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079fe:	4b31      	ldr	r3, [pc, #196]	@ (8007ac4 <xTaskPriorityDisinherit+0xdc>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d00d      	beq.n	8007a24 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0c:	b672      	cpsid	i
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	b662      	cpsie	i
 8007a1c:	60fb      	str	r3, [r7, #12]
}
 8007a1e:	bf00      	nop
 8007a20:	bf00      	nop
 8007a22:	e7fd      	b.n	8007a20 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10d      	bne.n	8007a48 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a30:	b672      	cpsid	i
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	b662      	cpsie	i
 8007a40:	60bb      	str	r3, [r7, #8]
}
 8007a42:	bf00      	nop
 8007a44:	bf00      	nop
 8007a46:	e7fd      	b.n	8007a44 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a4c:	1e5a      	subs	r2, r3, #1
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d02c      	beq.n	8007ab8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d128      	bne.n	8007ab8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe f820 	bl	8005ab0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a88:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac8 <xTaskPriorityDisinherit+0xe0>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d903      	bls.n	8007a98 <xTaskPriorityDisinherit+0xb0>
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a94:	4a0c      	ldr	r2, [pc, #48]	@ (8007ac8 <xTaskPriorityDisinherit+0xe0>)
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4a09      	ldr	r2, [pc, #36]	@ (8007acc <xTaskPriorityDisinherit+0xe4>)
 8007aa6:	441a      	add	r2, r3
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	4619      	mov	r1, r3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	f7fd ffa1 	bl	80059f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ab8:	697b      	ldr	r3, [r7, #20]
	}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20001230 	.word	0x20001230
 8007ac8:	2000170c 	.word	0x2000170c
 8007acc:	20001234 	.word	0x20001234

08007ad0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d070      	beq.n	8007bca <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10d      	bne.n	8007b0c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af4:	b672      	cpsid	i
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	b662      	cpsie	i
 8007b04:	60fb      	str	r3, [r7, #12]
}
 8007b06:	bf00      	nop
 8007b08:	bf00      	nop
 8007b0a:	e7fd      	b.n	8007b08 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d902      	bls.n	8007b1c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	61fb      	str	r3, [r7, #28]
 8007b1a:	e002      	b.n	8007b22 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b20:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b26:	69fa      	ldr	r2, [r7, #28]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d04e      	beq.n	8007bca <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d149      	bne.n	8007bca <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b36:	4b27      	ldr	r3, [pc, #156]	@ (8007bd4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d10d      	bne.n	8007b5c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b44:	b672      	cpsid	i
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	b662      	cpsie	i
 8007b54:	60bb      	str	r3, [r7, #8]
}
 8007b56:	bf00      	nop
 8007b58:	bf00      	nop
 8007b5a:	e7fd      	b.n	8007b58 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	69fa      	ldr	r2, [r7, #28]
 8007b66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	db04      	blt.n	8007b7a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	6959      	ldr	r1, [r3, #20]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4a13      	ldr	r2, [pc, #76]	@ (8007bd8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007b8a:	4413      	add	r3, r2
 8007b8c:	4299      	cmp	r1, r3
 8007b8e:	d11c      	bne.n	8007bca <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	3304      	adds	r3, #4
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fd ff8b 	bl	8005ab0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007bdc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d903      	bls.n	8007bae <vTaskPriorityDisinheritAfterTimeout+0xde>
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007baa:	4a0c      	ldr	r2, [pc, #48]	@ (8007bdc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007bac:	6013      	str	r3, [r2, #0]
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4a07      	ldr	r2, [pc, #28]	@ (8007bd8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007bbc:	441a      	add	r2, r3
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	f7fd ff16 	bl	80059f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bca:	bf00      	nop
 8007bcc:	3720      	adds	r7, #32
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20001230 	.word	0x20001230
 8007bd8:	20001234 	.word	0x20001234
 8007bdc:	2000170c 	.word	0x2000170c

08007be0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007be4:	4b07      	ldr	r3, [pc, #28]	@ (8007c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d004      	beq.n	8007bf6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007bec:	4b05      	ldr	r3, [pc, #20]	@ (8007c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bf2:	3201      	adds	r2, #1
 8007bf4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007bf6:	4b03      	ldr	r3, [pc, #12]	@ (8007c04 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
	}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	20001230 	.word	0x20001230

08007c08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c12:	4b21      	ldr	r3, [pc, #132]	@ (8007c98 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c18:	4b20      	ldr	r3, [pc, #128]	@ (8007c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd ff46 	bl	8005ab0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2a:	d10a      	bne.n	8007c42 <prvAddCurrentTaskToDelayedList+0x3a>
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d007      	beq.n	8007c42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c32:	4b1a      	ldr	r3, [pc, #104]	@ (8007c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3304      	adds	r3, #4
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4819      	ldr	r0, [pc, #100]	@ (8007ca0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c3c:	f7fd fedb 	bl	80059f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c40:	e026      	b.n	8007c90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4413      	add	r3, r2
 8007c48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c4a:	4b14      	ldr	r3, [pc, #80]	@ (8007c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d209      	bcs.n	8007c6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c5a:	4b12      	ldr	r3, [pc, #72]	@ (8007ca4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8007c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3304      	adds	r3, #4
 8007c64:	4619      	mov	r1, r3
 8007c66:	4610      	mov	r0, r2
 8007c68:	f7fd fee9 	bl	8005a3e <vListInsert>
}
 8007c6c:	e010      	b.n	8007c90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ca8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	4b0a      	ldr	r3, [pc, #40]	@ (8007c9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f7fd fedf 	bl	8005a3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c80:	4b0a      	ldr	r3, [pc, #40]	@ (8007cac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d202      	bcs.n	8007c90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c8a:	4a08      	ldr	r2, [pc, #32]	@ (8007cac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	6013      	str	r3, [r2, #0]
}
 8007c90:	bf00      	nop
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20001708 	.word	0x20001708
 8007c9c:	20001230 	.word	0x20001230
 8007ca0:	200016f0 	.word	0x200016f0
 8007ca4:	200016c0 	.word	0x200016c0
 8007ca8:	200016bc 	.word	0x200016bc
 8007cac:	20001724 	.word	0x20001724

08007cb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08a      	sub	sp, #40	@ 0x28
 8007cb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cba:	f000 fb21 	bl	8008300 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8007d38 <xTimerCreateTimerTask+0x88>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d021      	beq.n	8007d0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007cce:	1d3a      	adds	r2, r7, #4
 8007cd0:	f107 0108 	add.w	r1, r7, #8
 8007cd4:	f107 030c 	add.w	r3, r7, #12
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fd fe45 	bl	8005968 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	9202      	str	r2, [sp, #8]
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	2302      	movs	r3, #2
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	2300      	movs	r3, #0
 8007cee:	460a      	mov	r2, r1
 8007cf0:	4912      	ldr	r1, [pc, #72]	@ (8007d3c <xTimerCreateTimerTask+0x8c>)
 8007cf2:	4813      	ldr	r0, [pc, #76]	@ (8007d40 <xTimerCreateTimerTask+0x90>)
 8007cf4:	f7fe ff7a 	bl	8006bec <xTaskCreateStatic>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	4a12      	ldr	r2, [pc, #72]	@ (8007d44 <xTimerCreateTimerTask+0x94>)
 8007cfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cfe:	4b11      	ldr	r3, [pc, #68]	@ (8007d44 <xTimerCreateTimerTask+0x94>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d06:	2301      	movs	r3, #1
 8007d08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10d      	bne.n	8007d2c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d14:	b672      	cpsid	i
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	b662      	cpsie	i
 8007d24:	613b      	str	r3, [r7, #16]
}
 8007d26:	bf00      	nop
 8007d28:	bf00      	nop
 8007d2a:	e7fd      	b.n	8007d28 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007d2c:	697b      	ldr	r3, [r7, #20]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20001760 	.word	0x20001760
 8007d3c:	0800b890 	.word	0x0800b890
 8007d40:	08007e89 	.word	0x08007e89
 8007d44:	20001764 	.word	0x20001764

08007d48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08a      	sub	sp, #40	@ 0x28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10d      	bne.n	8007d7c <xTimerGenericCommand+0x34>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d64:	b672      	cpsid	i
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	b662      	cpsie	i
 8007d74:	623b      	str	r3, [r7, #32]
}
 8007d76:	bf00      	nop
 8007d78:	bf00      	nop
 8007d7a:	e7fd      	b.n	8007d78 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d7c:	4b19      	ldr	r3, [pc, #100]	@ (8007de4 <xTimerGenericCommand+0x9c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d02a      	beq.n	8007dda <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b05      	cmp	r3, #5
 8007d94:	dc18      	bgt.n	8007dc8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d96:	f7ff fda1 	bl	80078dc <xTaskGetSchedulerState>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d109      	bne.n	8007db4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007da0:	4b10      	ldr	r3, [pc, #64]	@ (8007de4 <xTimerGenericCommand+0x9c>)
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	f107 0110 	add.w	r1, r7, #16
 8007da8:	2300      	movs	r3, #0
 8007daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dac:	f7fe f87a 	bl	8005ea4 <xQueueGenericSend>
 8007db0:	6278      	str	r0, [r7, #36]	@ 0x24
 8007db2:	e012      	b.n	8007dda <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007db4:	4b0b      	ldr	r3, [pc, #44]	@ (8007de4 <xTimerGenericCommand+0x9c>)
 8007db6:	6818      	ldr	r0, [r3, #0]
 8007db8:	f107 0110 	add.w	r1, r7, #16
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f7fe f870 	bl	8005ea4 <xQueueGenericSend>
 8007dc4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007dc6:	e008      	b.n	8007dda <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007dc8:	4b06      	ldr	r3, [pc, #24]	@ (8007de4 <xTimerGenericCommand+0x9c>)
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	f107 0110 	add.w	r1, r7, #16
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	f7fe f970 	bl	80060b8 <xQueueGenericSendFromISR>
 8007dd8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3728      	adds	r7, #40	@ 0x28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20001760 	.word	0x20001760

08007de8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b088      	sub	sp, #32
 8007dec:	af02      	add	r7, sp, #8
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df2:	4b24      	ldr	r3, [pc, #144]	@ (8007e84 <prvProcessExpiredTimer+0x9c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fd fe55 	bl	8005ab0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d025      	beq.n	8007e60 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	699a      	ldr	r2, [r3, #24]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	18d1      	adds	r1, r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	6978      	ldr	r0, [r7, #20]
 8007e22:	f000 f8d7 	bl	8007fd4 <prvInsertTimerInActiveList>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d022      	beq.n	8007e72 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	2300      	movs	r3, #0
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	2100      	movs	r1, #0
 8007e36:	6978      	ldr	r0, [r7, #20]
 8007e38:	f7ff ff86 	bl	8007d48 <xTimerGenericCommand>
 8007e3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d116      	bne.n	8007e72 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e48:	b672      	cpsid	i
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	b662      	cpsie	i
 8007e58:	60fb      	str	r3, [r7, #12]
}
 8007e5a:	bf00      	nop
 8007e5c:	bf00      	nop
 8007e5e:	e7fd      	b.n	8007e5c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e66:	f023 0301 	bic.w	r3, r3, #1
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	6978      	ldr	r0, [r7, #20]
 8007e78:	4798      	blx	r3
}
 8007e7a:	bf00      	nop
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20001758 	.word	0x20001758

08007e88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e90:	f107 0308 	add.w	r3, r7, #8
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 f859 	bl	8007f4c <prvGetNextExpireTime>
 8007e9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 f805 	bl	8007eb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ea6:	f000 f8d7 	bl	8008058 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007eaa:	bf00      	nop
 8007eac:	e7f0      	b.n	8007e90 <prvTimerTask+0x8>
	...

08007eb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007eba:	f7ff f909 	bl	80070d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ebe:	f107 0308 	add.w	r3, r7, #8
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 f866 	bl	8007f94 <prvSampleTimeNow>
 8007ec8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d130      	bne.n	8007f32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10a      	bne.n	8007eec <prvProcessTimerOrBlockTask+0x3c>
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d806      	bhi.n	8007eec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ede:	f7ff f905 	bl	80070ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ee2:	68f9      	ldr	r1, [r7, #12]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff ff7f 	bl	8007de8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007eea:	e024      	b.n	8007f36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d008      	beq.n	8007f04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ef2:	4b13      	ldr	r3, [pc, #76]	@ (8007f40 <prvProcessTimerOrBlockTask+0x90>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <prvProcessTimerOrBlockTask+0x50>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e000      	b.n	8007f02 <prvProcessTimerOrBlockTask+0x52>
 8007f00:	2300      	movs	r3, #0
 8007f02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f04:	4b0f      	ldr	r3, [pc, #60]	@ (8007f44 <prvProcessTimerOrBlockTask+0x94>)
 8007f06:	6818      	ldr	r0, [r3, #0]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	4619      	mov	r1, r3
 8007f12:	f7fe fe37 	bl	8006b84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f16:	f7ff f8e9 	bl	80070ec <xTaskResumeAll>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10a      	bne.n	8007f36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f20:	4b09      	ldr	r3, [pc, #36]	@ (8007f48 <prvProcessTimerOrBlockTask+0x98>)
 8007f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	f3bf 8f6f 	isb	sy
}
 8007f30:	e001      	b.n	8007f36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f32:	f7ff f8db 	bl	80070ec <xTaskResumeAll>
}
 8007f36:	bf00      	nop
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	2000175c 	.word	0x2000175c
 8007f44:	20001760 	.word	0x20001760
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f54:	4b0e      	ldr	r3, [pc, #56]	@ (8007f90 <prvGetNextExpireTime+0x44>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <prvGetNextExpireTime+0x16>
 8007f5e:	2201      	movs	r2, #1
 8007f60:	e000      	b.n	8007f64 <prvGetNextExpireTime+0x18>
 8007f62:	2200      	movs	r2, #0
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d105      	bne.n	8007f7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f70:	4b07      	ldr	r3, [pc, #28]	@ (8007f90 <prvGetNextExpireTime+0x44>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	60fb      	str	r3, [r7, #12]
 8007f7a:	e001      	b.n	8007f80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f80:	68fb      	ldr	r3, [r7, #12]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3714      	adds	r7, #20
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	20001758 	.word	0x20001758

08007f94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f9c:	f7ff f946 	bl	800722c <xTaskGetTickCount>
 8007fa0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd0 <prvSampleTimeNow+0x3c>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d205      	bcs.n	8007fb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007fac:	f000 f940 	bl	8008230 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	601a      	str	r2, [r3, #0]
 8007fb6:	e002      	b.n	8007fbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007fbe:	4a04      	ldr	r2, [pc, #16]	@ (8007fd0 <prvSampleTimeNow+0x3c>)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	20001768 	.word	0x20001768

08007fd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
 8007fe0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d812      	bhi.n	8008020 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	1ad2      	subs	r2, r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	429a      	cmp	r2, r3
 8008006:	d302      	bcc.n	800800e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008008:	2301      	movs	r3, #1
 800800a:	617b      	str	r3, [r7, #20]
 800800c:	e01b      	b.n	8008046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800800e:	4b10      	ldr	r3, [pc, #64]	@ (8008050 <prvInsertTimerInActiveList+0x7c>)
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3304      	adds	r3, #4
 8008016:	4619      	mov	r1, r3
 8008018:	4610      	mov	r0, r2
 800801a:	f7fd fd10 	bl	8005a3e <vListInsert>
 800801e:	e012      	b.n	8008046 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d206      	bcs.n	8008036 <prvInsertTimerInActiveList+0x62>
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d302      	bcc.n	8008036 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008030:	2301      	movs	r3, #1
 8008032:	617b      	str	r3, [r7, #20]
 8008034:	e007      	b.n	8008046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008036:	4b07      	ldr	r3, [pc, #28]	@ (8008054 <prvInsertTimerInActiveList+0x80>)
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3304      	adds	r3, #4
 800803e:	4619      	mov	r1, r3
 8008040:	4610      	mov	r0, r2
 8008042:	f7fd fcfc 	bl	8005a3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008046:	697b      	ldr	r3, [r7, #20]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	2000175c 	.word	0x2000175c
 8008054:	20001758 	.word	0x20001758

08008058 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b08e      	sub	sp, #56	@ 0x38
 800805c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800805e:	e0d4      	b.n	800820a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	da1b      	bge.n	800809e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008066:	1d3b      	adds	r3, r7, #4
 8008068:	3304      	adds	r3, #4
 800806a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800806c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10d      	bne.n	800808e <prvProcessReceivedCommands+0x36>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008076:	b672      	cpsid	i
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	b662      	cpsie	i
 8008086:	61fb      	str	r3, [r7, #28]
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800808e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008094:	6850      	ldr	r0, [r2, #4]
 8008096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008098:	6892      	ldr	r2, [r2, #8]
 800809a:	4611      	mov	r1, r2
 800809c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f2c0 80b2 	blt.w	800820a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d004      	beq.n	80080bc <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b4:	3304      	adds	r3, #4
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fd fcfa 	bl	8005ab0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080bc:	463b      	mov	r3, r7
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff ff68 	bl	8007f94 <prvSampleTimeNow>
 80080c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b09      	cmp	r3, #9
 80080ca:	f200 809b 	bhi.w	8008204 <prvProcessReceivedCommands+0x1ac>
 80080ce:	a201      	add	r2, pc, #4	@ (adr r2, 80080d4 <prvProcessReceivedCommands+0x7c>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	080080fd 	.word	0x080080fd
 80080d8:	080080fd 	.word	0x080080fd
 80080dc:	080080fd 	.word	0x080080fd
 80080e0:	08008177 	.word	0x08008177
 80080e4:	0800818b 	.word	0x0800818b
 80080e8:	080081db 	.word	0x080081db
 80080ec:	080080fd 	.word	0x080080fd
 80080f0:	080080fd 	.word	0x080080fd
 80080f4:	08008177 	.word	0x08008177
 80080f8:	0800818b 	.word	0x0800818b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008102:	f043 0301 	orr.w	r3, r3, #1
 8008106:	b2da      	uxtb	r2, r3
 8008108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	18d1      	adds	r1, r2, r3
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800811a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800811c:	f7ff ff5a 	bl	8007fd4 <prvInsertTimerInActiveList>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d070      	beq.n	8008208 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800812c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800812e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008130:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	d065      	beq.n	8008208 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	441a      	add	r2, r3
 8008144:	2300      	movs	r3, #0
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	2300      	movs	r3, #0
 800814a:	2100      	movs	r1, #0
 800814c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800814e:	f7ff fdfb 	bl	8007d48 <xTimerGenericCommand>
 8008152:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d156      	bne.n	8008208 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815e:	b672      	cpsid	i
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	b662      	cpsie	i
 800816e:	61bb      	str	r3, [r7, #24]
}
 8008170:	bf00      	nop
 8008172:	bf00      	nop
 8008174:	e7fd      	b.n	8008172 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008178:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800817c:	f023 0301 	bic.w	r3, r3, #1
 8008180:	b2da      	uxtb	r2, r3
 8008182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008184:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008188:	e03f      	b.n	800820a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800818a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008190:	f043 0301 	orr.w	r3, r3, #1
 8008194:	b2da      	uxtb	r2, r3
 8008196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008198:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10d      	bne.n	80081c6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ae:	b672      	cpsid	i
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	b662      	cpsie	i
 80081be:	617b      	str	r3, [r7, #20]
}
 80081c0:	bf00      	nop
 80081c2:	bf00      	nop
 80081c4:	e7fd      	b.n	80081c2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c8:	699a      	ldr	r2, [r3, #24]
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	18d1      	adds	r1, r2, r3
 80081ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081d4:	f7ff fefe 	bl	8007fd4 <prvInsertTimerInActiveList>
					break;
 80081d8:	e017      	b.n	800820a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d103      	bne.n	80081f0 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80081e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081ea:	f000 fbd3 	bl	8008994 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081ee:	e00c      	b.n	800820a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081f6:	f023 0301 	bic.w	r3, r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008202:	e002      	b.n	800820a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008204:	bf00      	nop
 8008206:	e000      	b.n	800820a <prvProcessReceivedCommands+0x1b2>
					break;
 8008208:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800820a:	4b08      	ldr	r3, [pc, #32]	@ (800822c <prvProcessReceivedCommands+0x1d4>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	1d39      	adds	r1, r7, #4
 8008210:	2200      	movs	r2, #0
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe f88c 	bl	8006330 <xQueueReceive>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	f47f af20 	bne.w	8008060 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	3730      	adds	r7, #48	@ 0x30
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20001760 	.word	0x20001760

08008230 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008236:	e04b      	b.n	80082d0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008238:	4b2f      	ldr	r3, [pc, #188]	@ (80082f8 <prvSwitchTimerLists+0xc8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008242:	4b2d      	ldr	r3, [pc, #180]	@ (80082f8 <prvSwitchTimerLists+0xc8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3304      	adds	r3, #4
 8008250:	4618      	mov	r0, r3
 8008252:	f7fd fc2d 	bl	8005ab0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d031      	beq.n	80082d0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	4413      	add	r3, r2
 8008274:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	429a      	cmp	r2, r3
 800827c:	d90e      	bls.n	800829c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800828a:	4b1b      	ldr	r3, [pc, #108]	@ (80082f8 <prvSwitchTimerLists+0xc8>)
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3304      	adds	r3, #4
 8008292:	4619      	mov	r1, r3
 8008294:	4610      	mov	r0, r2
 8008296:	f7fd fbd2 	bl	8005a3e <vListInsert>
 800829a:	e019      	b.n	80082d0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800829c:	2300      	movs	r3, #0
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	2300      	movs	r3, #0
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	2100      	movs	r1, #0
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f7ff fd4e 	bl	8007d48 <xTimerGenericCommand>
 80082ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10d      	bne.n	80082d0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b8:	b672      	cpsid	i
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	b662      	cpsie	i
 80082c8:	603b      	str	r3, [r7, #0]
}
 80082ca:	bf00      	nop
 80082cc:	bf00      	nop
 80082ce:	e7fd      	b.n	80082cc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082d0:	4b09      	ldr	r3, [pc, #36]	@ (80082f8 <prvSwitchTimerLists+0xc8>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1ae      	bne.n	8008238 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80082da:	4b07      	ldr	r3, [pc, #28]	@ (80082f8 <prvSwitchTimerLists+0xc8>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082e0:	4b06      	ldr	r3, [pc, #24]	@ (80082fc <prvSwitchTimerLists+0xcc>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a04      	ldr	r2, [pc, #16]	@ (80082f8 <prvSwitchTimerLists+0xc8>)
 80082e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082e8:	4a04      	ldr	r2, [pc, #16]	@ (80082fc <prvSwitchTimerLists+0xcc>)
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	6013      	str	r3, [r2, #0]
}
 80082ee:	bf00      	nop
 80082f0:	3718      	adds	r7, #24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20001758 	.word	0x20001758
 80082fc:	2000175c 	.word	0x2000175c

08008300 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008306:	f000 f949 	bl	800859c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800830a:	4b15      	ldr	r3, [pc, #84]	@ (8008360 <prvCheckForValidListAndQueue+0x60>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d120      	bne.n	8008354 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008312:	4814      	ldr	r0, [pc, #80]	@ (8008364 <prvCheckForValidListAndQueue+0x64>)
 8008314:	f7fd fb42 	bl	800599c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008318:	4813      	ldr	r0, [pc, #76]	@ (8008368 <prvCheckForValidListAndQueue+0x68>)
 800831a:	f7fd fb3f 	bl	800599c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800831e:	4b13      	ldr	r3, [pc, #76]	@ (800836c <prvCheckForValidListAndQueue+0x6c>)
 8008320:	4a10      	ldr	r2, [pc, #64]	@ (8008364 <prvCheckForValidListAndQueue+0x64>)
 8008322:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008324:	4b12      	ldr	r3, [pc, #72]	@ (8008370 <prvCheckForValidListAndQueue+0x70>)
 8008326:	4a10      	ldr	r2, [pc, #64]	@ (8008368 <prvCheckForValidListAndQueue+0x68>)
 8008328:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800832a:	2300      	movs	r3, #0
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	4b11      	ldr	r3, [pc, #68]	@ (8008374 <prvCheckForValidListAndQueue+0x74>)
 8008330:	4a11      	ldr	r2, [pc, #68]	@ (8008378 <prvCheckForValidListAndQueue+0x78>)
 8008332:	2110      	movs	r1, #16
 8008334:	200a      	movs	r0, #10
 8008336:	f7fd fc51 	bl	8005bdc <xQueueGenericCreateStatic>
 800833a:	4603      	mov	r3, r0
 800833c:	4a08      	ldr	r2, [pc, #32]	@ (8008360 <prvCheckForValidListAndQueue+0x60>)
 800833e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008340:	4b07      	ldr	r3, [pc, #28]	@ (8008360 <prvCheckForValidListAndQueue+0x60>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d005      	beq.n	8008354 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008348:	4b05      	ldr	r3, [pc, #20]	@ (8008360 <prvCheckForValidListAndQueue+0x60>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	490b      	ldr	r1, [pc, #44]	@ (800837c <prvCheckForValidListAndQueue+0x7c>)
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fbc4 	bl	8006adc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008354:	f000 f958 	bl	8008608 <vPortExitCritical>
}
 8008358:	bf00      	nop
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	20001760 	.word	0x20001760
 8008364:	20001730 	.word	0x20001730
 8008368:	20001744 	.word	0x20001744
 800836c:	20001758 	.word	0x20001758
 8008370:	2000175c 	.word	0x2000175c
 8008374:	2000180c 	.word	0x2000180c
 8008378:	2000176c 	.word	0x2000176c
 800837c:	0800b898 	.word	0x0800b898

08008380 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	3b04      	subs	r3, #4
 8008390:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3b04      	subs	r3, #4
 800839e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f023 0201 	bic.w	r2, r3, #1
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3b04      	subs	r3, #4
 80083ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083b0:	4a0c      	ldr	r2, [pc, #48]	@ (80083e4 <pxPortInitialiseStack+0x64>)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3b14      	subs	r3, #20
 80083ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3b04      	subs	r3, #4
 80083c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f06f 0202 	mvn.w	r2, #2
 80083ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3b20      	subs	r3, #32
 80083d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083d6:	68fb      	ldr	r3, [r7, #12]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	080083e9 	.word	0x080083e9

080083e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083f2:	4b15      	ldr	r3, [pc, #84]	@ (8008448 <prvTaskExitError+0x60>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fa:	d00d      	beq.n	8008418 <prvTaskExitError+0x30>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008400:	b672      	cpsid	i
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	b662      	cpsie	i
 8008410:	60fb      	str	r3, [r7, #12]
}
 8008412:	bf00      	nop
 8008414:	bf00      	nop
 8008416:	e7fd      	b.n	8008414 <prvTaskExitError+0x2c>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841c:	b672      	cpsid	i
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	b662      	cpsie	i
 800842c:	60bb      	str	r3, [r7, #8]
}
 800842e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008430:	bf00      	nop
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d0fc      	beq.n	8008432 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	2000000c 	.word	0x2000000c
 800844c:	00000000 	.word	0x00000000

08008450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008450:	4b07      	ldr	r3, [pc, #28]	@ (8008470 <pxCurrentTCBConst2>)
 8008452:	6819      	ldr	r1, [r3, #0]
 8008454:	6808      	ldr	r0, [r1, #0]
 8008456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845a:	f380 8809 	msr	PSP, r0
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f04f 0000 	mov.w	r0, #0
 8008466:	f380 8811 	msr	BASEPRI, r0
 800846a:	4770      	bx	lr
 800846c:	f3af 8000 	nop.w

08008470 <pxCurrentTCBConst2>:
 8008470:	20001230 	.word	0x20001230
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop

08008478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008478:	4808      	ldr	r0, [pc, #32]	@ (800849c <prvPortStartFirstTask+0x24>)
 800847a:	6800      	ldr	r0, [r0, #0]
 800847c:	6800      	ldr	r0, [r0, #0]
 800847e:	f380 8808 	msr	MSP, r0
 8008482:	f04f 0000 	mov.w	r0, #0
 8008486:	f380 8814 	msr	CONTROL, r0
 800848a:	b662      	cpsie	i
 800848c:	b661      	cpsie	f
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	df00      	svc	0
 8008498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800849a:	bf00      	nop
 800849c:	e000ed08 	.word	0xe000ed08

080084a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084a6:	4b37      	ldr	r3, [pc, #220]	@ (8008584 <xPortStartScheduler+0xe4>)
 80084a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	22ff      	movs	r2, #255	@ 0xff
 80084b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008588 <xPortStartScheduler+0xe8>)
 80084cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084ce:	4b2f      	ldr	r3, [pc, #188]	@ (800858c <xPortStartScheduler+0xec>)
 80084d0:	2207      	movs	r2, #7
 80084d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084d4:	e009      	b.n	80084ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80084d6:	4b2d      	ldr	r3, [pc, #180]	@ (800858c <xPortStartScheduler+0xec>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3b01      	subs	r3, #1
 80084dc:	4a2b      	ldr	r2, [pc, #172]	@ (800858c <xPortStartScheduler+0xec>)
 80084de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084ea:	78fb      	ldrb	r3, [r7, #3]
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084f2:	2b80      	cmp	r3, #128	@ 0x80
 80084f4:	d0ef      	beq.n	80084d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084f6:	4b25      	ldr	r3, [pc, #148]	@ (800858c <xPortStartScheduler+0xec>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f1c3 0307 	rsb	r3, r3, #7
 80084fe:	2b04      	cmp	r3, #4
 8008500:	d00d      	beq.n	800851e <xPortStartScheduler+0x7e>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008506:	b672      	cpsid	i
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	b662      	cpsie	i
 8008516:	60bb      	str	r3, [r7, #8]
}
 8008518:	bf00      	nop
 800851a:	bf00      	nop
 800851c:	e7fd      	b.n	800851a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800851e:	4b1b      	ldr	r3, [pc, #108]	@ (800858c <xPortStartScheduler+0xec>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	021b      	lsls	r3, r3, #8
 8008524:	4a19      	ldr	r2, [pc, #100]	@ (800858c <xPortStartScheduler+0xec>)
 8008526:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008528:	4b18      	ldr	r3, [pc, #96]	@ (800858c <xPortStartScheduler+0xec>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008530:	4a16      	ldr	r2, [pc, #88]	@ (800858c <xPortStartScheduler+0xec>)
 8008532:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	b2da      	uxtb	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800853c:	4b14      	ldr	r3, [pc, #80]	@ (8008590 <xPortStartScheduler+0xf0>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a13      	ldr	r2, [pc, #76]	@ (8008590 <xPortStartScheduler+0xf0>)
 8008542:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008546:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008548:	4b11      	ldr	r3, [pc, #68]	@ (8008590 <xPortStartScheduler+0xf0>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a10      	ldr	r2, [pc, #64]	@ (8008590 <xPortStartScheduler+0xf0>)
 800854e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008552:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008554:	f000 f8dc 	bl	8008710 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008558:	4b0e      	ldr	r3, [pc, #56]	@ (8008594 <xPortStartScheduler+0xf4>)
 800855a:	2200      	movs	r2, #0
 800855c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800855e:	f000 f8fb 	bl	8008758 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008562:	4b0d      	ldr	r3, [pc, #52]	@ (8008598 <xPortStartScheduler+0xf8>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a0c      	ldr	r2, [pc, #48]	@ (8008598 <xPortStartScheduler+0xf8>)
 8008568:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800856c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800856e:	f7ff ff83 	bl	8008478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008572:	f7fe ff27 	bl	80073c4 <vTaskSwitchContext>
	prvTaskExitError();
 8008576:	f7ff ff37 	bl	80083e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	e000e400 	.word	0xe000e400
 8008588:	2000185c 	.word	0x2000185c
 800858c:	20001860 	.word	0x20001860
 8008590:	e000ed20 	.word	0xe000ed20
 8008594:	2000000c 	.word	0x2000000c
 8008598:	e000ef34 	.word	0xe000ef34

0800859c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a6:	b672      	cpsid	i
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	b662      	cpsie	i
 80085b6:	607b      	str	r3, [r7, #4]
}
 80085b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085ba:	4b11      	ldr	r3, [pc, #68]	@ (8008600 <vPortEnterCritical+0x64>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3301      	adds	r3, #1
 80085c0:	4a0f      	ldr	r2, [pc, #60]	@ (8008600 <vPortEnterCritical+0x64>)
 80085c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085c4:	4b0e      	ldr	r3, [pc, #56]	@ (8008600 <vPortEnterCritical+0x64>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d112      	bne.n	80085f2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008604 <vPortEnterCritical+0x68>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00d      	beq.n	80085f2 <vPortEnterCritical+0x56>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085da:	b672      	cpsid	i
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	b662      	cpsie	i
 80085ea:	603b      	str	r3, [r7, #0]
}
 80085ec:	bf00      	nop
 80085ee:	bf00      	nop
 80085f0:	e7fd      	b.n	80085ee <vPortEnterCritical+0x52>
	}
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	2000000c 	.word	0x2000000c
 8008604:	e000ed04 	.word	0xe000ed04

08008608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800860e:	4b13      	ldr	r3, [pc, #76]	@ (800865c <vPortExitCritical+0x54>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10d      	bne.n	8008632 <vPortExitCritical+0x2a>
	__asm volatile
 8008616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800861a:	b672      	cpsid	i
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	b662      	cpsie	i
 800862a:	607b      	str	r3, [r7, #4]
}
 800862c:	bf00      	nop
 800862e:	bf00      	nop
 8008630:	e7fd      	b.n	800862e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008632:	4b0a      	ldr	r3, [pc, #40]	@ (800865c <vPortExitCritical+0x54>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3b01      	subs	r3, #1
 8008638:	4a08      	ldr	r2, [pc, #32]	@ (800865c <vPortExitCritical+0x54>)
 800863a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800863c:	4b07      	ldr	r3, [pc, #28]	@ (800865c <vPortExitCritical+0x54>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d105      	bne.n	8008650 <vPortExitCritical+0x48>
 8008644:	2300      	movs	r3, #0
 8008646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	f383 8811 	msr	BASEPRI, r3
}
 800864e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	2000000c 	.word	0x2000000c

08008660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008660:	f3ef 8009 	mrs	r0, PSP
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	4b15      	ldr	r3, [pc, #84]	@ (80086c0 <pxCurrentTCBConst>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	f01e 0f10 	tst.w	lr, #16
 8008670:	bf08      	it	eq
 8008672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867a:	6010      	str	r0, [r2, #0]
 800867c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008680:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008684:	b672      	cpsid	i
 8008686:	f380 8811 	msr	BASEPRI, r0
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	b662      	cpsie	i
 8008694:	f7fe fe96 	bl	80073c4 <vTaskSwitchContext>
 8008698:	f04f 0000 	mov.w	r0, #0
 800869c:	f380 8811 	msr	BASEPRI, r0
 80086a0:	bc09      	pop	{r0, r3}
 80086a2:	6819      	ldr	r1, [r3, #0]
 80086a4:	6808      	ldr	r0, [r1, #0]
 80086a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086aa:	f01e 0f10 	tst.w	lr, #16
 80086ae:	bf08      	it	eq
 80086b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086b4:	f380 8809 	msr	PSP, r0
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop

080086c0 <pxCurrentTCBConst>:
 80086c0:	20001230 	.word	0x20001230
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop

080086c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	b672      	cpsid	i
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	b662      	cpsie	i
 80086e2:	607b      	str	r3, [r7, #4]
}
 80086e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086e6:	f7fe fdb1 	bl	800724c <xTaskIncrementTick>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086f0:	4b06      	ldr	r3, [pc, #24]	@ (800870c <SysTick_Handler+0x44>)
 80086f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	2300      	movs	r3, #0
 80086fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	f383 8811 	msr	BASEPRI, r3
}
 8008702:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	e000ed04 	.word	0xe000ed04

08008710 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008710:	b480      	push	{r7}
 8008712:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008714:	4b0b      	ldr	r3, [pc, #44]	@ (8008744 <vPortSetupTimerInterrupt+0x34>)
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800871a:	4b0b      	ldr	r3, [pc, #44]	@ (8008748 <vPortSetupTimerInterrupt+0x38>)
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008720:	4b0a      	ldr	r3, [pc, #40]	@ (800874c <vPortSetupTimerInterrupt+0x3c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a0a      	ldr	r2, [pc, #40]	@ (8008750 <vPortSetupTimerInterrupt+0x40>)
 8008726:	fba2 2303 	umull	r2, r3, r2, r3
 800872a:	099b      	lsrs	r3, r3, #6
 800872c:	4a09      	ldr	r2, [pc, #36]	@ (8008754 <vPortSetupTimerInterrupt+0x44>)
 800872e:	3b01      	subs	r3, #1
 8008730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008732:	4b04      	ldr	r3, [pc, #16]	@ (8008744 <vPortSetupTimerInterrupt+0x34>)
 8008734:	2207      	movs	r2, #7
 8008736:	601a      	str	r2, [r3, #0]
}
 8008738:	bf00      	nop
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	e000e010 	.word	0xe000e010
 8008748:	e000e018 	.word	0xe000e018
 800874c:	20000000 	.word	0x20000000
 8008750:	10624dd3 	.word	0x10624dd3
 8008754:	e000e014 	.word	0xe000e014

08008758 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008758:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008768 <vPortEnableVFP+0x10>
 800875c:	6801      	ldr	r1, [r0, #0]
 800875e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008762:	6001      	str	r1, [r0, #0]
 8008764:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008766:	bf00      	nop
 8008768:	e000ed88 	.word	0xe000ed88

0800876c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008772:	f3ef 8305 	mrs	r3, IPSR
 8008776:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b0f      	cmp	r3, #15
 800877c:	d917      	bls.n	80087ae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800877e:	4a1a      	ldr	r2, [pc, #104]	@ (80087e8 <vPortValidateInterruptPriority+0x7c>)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008788:	4b18      	ldr	r3, [pc, #96]	@ (80087ec <vPortValidateInterruptPriority+0x80>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	7afa      	ldrb	r2, [r7, #11]
 800878e:	429a      	cmp	r2, r3
 8008790:	d20d      	bcs.n	80087ae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008796:	b672      	cpsid	i
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	b662      	cpsie	i
 80087a6:	607b      	str	r3, [r7, #4]
}
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
 80087ac:	e7fd      	b.n	80087aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087ae:	4b10      	ldr	r3, [pc, #64]	@ (80087f0 <vPortValidateInterruptPriority+0x84>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80087b6:	4b0f      	ldr	r3, [pc, #60]	@ (80087f4 <vPortValidateInterruptPriority+0x88>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d90d      	bls.n	80087da <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	b672      	cpsid	i
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	b662      	cpsie	i
 80087d2:	603b      	str	r3, [r7, #0]
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop
 80087d8:	e7fd      	b.n	80087d6 <vPortValidateInterruptPriority+0x6a>
	}
 80087da:	bf00      	nop
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	e000e3f0 	.word	0xe000e3f0
 80087ec:	2000185c 	.word	0x2000185c
 80087f0:	e000ed0c 	.word	0xe000ed0c
 80087f4:	20001860 	.word	0x20001860

080087f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08a      	sub	sp, #40	@ 0x28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008800:	2300      	movs	r3, #0
 8008802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008804:	f7fe fc64 	bl	80070d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008808:	4b5d      	ldr	r3, [pc, #372]	@ (8008980 <pvPortMalloc+0x188>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008810:	f000 f920 	bl	8008a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008814:	4b5b      	ldr	r3, [pc, #364]	@ (8008984 <pvPortMalloc+0x18c>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4013      	ands	r3, r2
 800881c:	2b00      	cmp	r3, #0
 800881e:	f040 8094 	bne.w	800894a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d020      	beq.n	800886a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008828:	2208      	movs	r2, #8
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4413      	add	r3, r2
 800882e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	2b00      	cmp	r3, #0
 8008838:	d017      	beq.n	800886a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f023 0307 	bic.w	r3, r3, #7
 8008840:	3308      	adds	r3, #8
 8008842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f003 0307 	and.w	r3, r3, #7
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00d      	beq.n	800886a <pvPortMalloc+0x72>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008852:	b672      	cpsid	i
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	b662      	cpsie	i
 8008862:	617b      	str	r3, [r7, #20]
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	e7fd      	b.n	8008866 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d06c      	beq.n	800894a <pvPortMalloc+0x152>
 8008870:	4b45      	ldr	r3, [pc, #276]	@ (8008988 <pvPortMalloc+0x190>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	429a      	cmp	r2, r3
 8008878:	d867      	bhi.n	800894a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800887a:	4b44      	ldr	r3, [pc, #272]	@ (800898c <pvPortMalloc+0x194>)
 800887c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800887e:	4b43      	ldr	r3, [pc, #268]	@ (800898c <pvPortMalloc+0x194>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008884:	e004      	b.n	8008890 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008888:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800888a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	429a      	cmp	r2, r3
 8008898:	d903      	bls.n	80088a2 <pvPortMalloc+0xaa>
 800889a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1f1      	bne.n	8008886 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088a2:	4b37      	ldr	r3, [pc, #220]	@ (8008980 <pvPortMalloc+0x188>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d04e      	beq.n	800894a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2208      	movs	r2, #8
 80088b2:	4413      	add	r3, r2
 80088b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	6a3b      	ldr	r3, [r7, #32]
 80088bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	1ad2      	subs	r2, r2, r3
 80088c6:	2308      	movs	r3, #8
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d922      	bls.n	8008914 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4413      	add	r3, r2
 80088d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	f003 0307 	and.w	r3, r3, #7
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00d      	beq.n	80088fc <pvPortMalloc+0x104>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e4:	b672      	cpsid	i
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	b662      	cpsie	i
 80088f4:	613b      	str	r3, [r7, #16]
}
 80088f6:	bf00      	nop
 80088f8:	bf00      	nop
 80088fa:	e7fd      	b.n	80088f8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	1ad2      	subs	r2, r2, r3
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800890e:	69b8      	ldr	r0, [r7, #24]
 8008910:	f000 f902 	bl	8008b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008914:	4b1c      	ldr	r3, [pc, #112]	@ (8008988 <pvPortMalloc+0x190>)
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	4a1a      	ldr	r2, [pc, #104]	@ (8008988 <pvPortMalloc+0x190>)
 8008920:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008922:	4b19      	ldr	r3, [pc, #100]	@ (8008988 <pvPortMalloc+0x190>)
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	4b1a      	ldr	r3, [pc, #104]	@ (8008990 <pvPortMalloc+0x198>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	429a      	cmp	r2, r3
 800892c:	d203      	bcs.n	8008936 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800892e:	4b16      	ldr	r3, [pc, #88]	@ (8008988 <pvPortMalloc+0x190>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a17      	ldr	r2, [pc, #92]	@ (8008990 <pvPortMalloc+0x198>)
 8008934:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	4b12      	ldr	r3, [pc, #72]	@ (8008984 <pvPortMalloc+0x18c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	431a      	orrs	r2, r3
 8008940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008942:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008946:	2200      	movs	r2, #0
 8008948:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800894a:	f7fe fbcf 	bl	80070ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	f003 0307 	and.w	r3, r3, #7
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00d      	beq.n	8008974 <pvPortMalloc+0x17c>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895c:	b672      	cpsid	i
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	b662      	cpsie	i
 800896c:	60fb      	str	r3, [r7, #12]
}
 800896e:	bf00      	nop
 8008970:	bf00      	nop
 8008972:	e7fd      	b.n	8008970 <pvPortMalloc+0x178>
	return pvReturn;
 8008974:	69fb      	ldr	r3, [r7, #28]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3728      	adds	r7, #40	@ 0x28
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	2000546c 	.word	0x2000546c
 8008984:	20005478 	.word	0x20005478
 8008988:	20005470 	.word	0x20005470
 800898c:	20005464 	.word	0x20005464
 8008990:	20005474 	.word	0x20005474

08008994 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d04e      	beq.n	8008a44 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089a6:	2308      	movs	r3, #8
 80089a8:	425b      	negs	r3, r3
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	4413      	add	r3, r2
 80089ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	4b24      	ldr	r3, [pc, #144]	@ (8008a4c <vPortFree+0xb8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4013      	ands	r3, r2
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10d      	bne.n	80089de <vPortFree+0x4a>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c6:	b672      	cpsid	i
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	b662      	cpsie	i
 80089d6:	60fb      	str	r3, [r7, #12]
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	e7fd      	b.n	80089da <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00d      	beq.n	8008a02 <vPortFree+0x6e>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ea:	b672      	cpsid	i
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	b662      	cpsie	i
 80089fa:	60bb      	str	r3, [r7, #8]
}
 80089fc:	bf00      	nop
 80089fe:	bf00      	nop
 8008a00:	e7fd      	b.n	80089fe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	4b11      	ldr	r3, [pc, #68]	@ (8008a4c <vPortFree+0xb8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d019      	beq.n	8008a44 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d115      	bne.n	8008a44 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a4c <vPortFree+0xb8>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	43db      	mvns	r3, r3
 8008a22:	401a      	ands	r2, r3
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a28:	f7fe fb52 	bl	80070d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	4b07      	ldr	r3, [pc, #28]	@ (8008a50 <vPortFree+0xbc>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4413      	add	r3, r2
 8008a36:	4a06      	ldr	r2, [pc, #24]	@ (8008a50 <vPortFree+0xbc>)
 8008a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a3a:	6938      	ldr	r0, [r7, #16]
 8008a3c:	f000 f86c 	bl	8008b18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008a40:	f7fe fb54 	bl	80070ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a44:	bf00      	nop
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20005478 	.word	0x20005478
 8008a50:	20005470 	.word	0x20005470

08008a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a5a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a60:	4b27      	ldr	r3, [pc, #156]	@ (8008b00 <prvHeapInit+0xac>)
 8008a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f003 0307 	and.w	r3, r3, #7
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00c      	beq.n	8008a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3307      	adds	r3, #7
 8008a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f023 0307 	bic.w	r3, r3, #7
 8008a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	4a1f      	ldr	r2, [pc, #124]	@ (8008b00 <prvHeapInit+0xac>)
 8008a84:	4413      	add	r3, r2
 8008a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8008b04 <prvHeapInit+0xb0>)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a92:	4b1c      	ldr	r3, [pc, #112]	@ (8008b04 <prvHeapInit+0xb0>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008aa0:	2208      	movs	r2, #8
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	1a9b      	subs	r3, r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f023 0307 	bic.w	r3, r3, #7
 8008aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	4a15      	ldr	r2, [pc, #84]	@ (8008b08 <prvHeapInit+0xb4>)
 8008ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ab6:	4b14      	ldr	r3, [pc, #80]	@ (8008b08 <prvHeapInit+0xb4>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2200      	movs	r2, #0
 8008abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008abe:	4b12      	ldr	r3, [pc, #72]	@ (8008b08 <prvHeapInit+0xb4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	1ad2      	subs	r2, r2, r3
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8008b08 <prvHeapInit+0xb4>)
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8008b0c <prvHeapInit+0xb8>)
 8008ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	4a09      	ldr	r2, [pc, #36]	@ (8008b10 <prvHeapInit+0xbc>)
 8008aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008aec:	4b09      	ldr	r3, [pc, #36]	@ (8008b14 <prvHeapInit+0xc0>)
 8008aee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008af2:	601a      	str	r2, [r3, #0]
}
 8008af4:	bf00      	nop
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	20001864 	.word	0x20001864
 8008b04:	20005464 	.word	0x20005464
 8008b08:	2000546c 	.word	0x2000546c
 8008b0c:	20005474 	.word	0x20005474
 8008b10:	20005470 	.word	0x20005470
 8008b14:	20005478 	.word	0x20005478

08008b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b20:	4b28      	ldr	r3, [pc, #160]	@ (8008bc4 <prvInsertBlockIntoFreeList+0xac>)
 8008b22:	60fb      	str	r3, [r7, #12]
 8008b24:	e002      	b.n	8008b2c <prvInsertBlockIntoFreeList+0x14>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d8f7      	bhi.n	8008b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	4413      	add	r3, r2
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d108      	bne.n	8008b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	441a      	add	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	441a      	add	r2, r3
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d118      	bne.n	8008ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	4b15      	ldr	r3, [pc, #84]	@ (8008bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d00d      	beq.n	8008b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	441a      	add	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	e008      	b.n	8008ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b96:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	e003      	b.n	8008ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d002      	beq.n	8008bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bb6:	bf00      	nop
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	20005464 	.word	0x20005464
 8008bc8:	2000546c 	.word	0x2000546c

08008bcc <__cvt>:
 8008bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bce:	ed2d 8b02 	vpush	{d8}
 8008bd2:	eeb0 8b40 	vmov.f64	d8, d0
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	4617      	mov	r7, r2
 8008bda:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008bdc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bde:	ee18 2a90 	vmov	r2, s17
 8008be2:	f025 0520 	bic.w	r5, r5, #32
 8008be6:	2a00      	cmp	r2, #0
 8008be8:	bfb6      	itet	lt
 8008bea:	222d      	movlt	r2, #45	@ 0x2d
 8008bec:	2200      	movge	r2, #0
 8008bee:	eeb1 8b40 	vneglt.f64	d8, d0
 8008bf2:	2d46      	cmp	r5, #70	@ 0x46
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	701a      	strb	r2, [r3, #0]
 8008bf8:	d004      	beq.n	8008c04 <__cvt+0x38>
 8008bfa:	2d45      	cmp	r5, #69	@ 0x45
 8008bfc:	d100      	bne.n	8008c00 <__cvt+0x34>
 8008bfe:	3401      	adds	r4, #1
 8008c00:	2102      	movs	r1, #2
 8008c02:	e000      	b.n	8008c06 <__cvt+0x3a>
 8008c04:	2103      	movs	r1, #3
 8008c06:	ab03      	add	r3, sp, #12
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	ab02      	add	r3, sp, #8
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	4622      	mov	r2, r4
 8008c10:	4633      	mov	r3, r6
 8008c12:	eeb0 0b48 	vmov.f64	d0, d8
 8008c16:	f000 febf 	bl	8009998 <_dtoa_r>
 8008c1a:	2d47      	cmp	r5, #71	@ 0x47
 8008c1c:	d114      	bne.n	8008c48 <__cvt+0x7c>
 8008c1e:	07fb      	lsls	r3, r7, #31
 8008c20:	d50a      	bpl.n	8008c38 <__cvt+0x6c>
 8008c22:	1902      	adds	r2, r0, r4
 8008c24:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c2c:	bf08      	it	eq
 8008c2e:	9203      	streq	r2, [sp, #12]
 8008c30:	2130      	movs	r1, #48	@ 0x30
 8008c32:	9b03      	ldr	r3, [sp, #12]
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d319      	bcc.n	8008c6c <__cvt+0xa0>
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c3c:	1a1b      	subs	r3, r3, r0
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	b005      	add	sp, #20
 8008c42:	ecbd 8b02 	vpop	{d8}
 8008c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c48:	2d46      	cmp	r5, #70	@ 0x46
 8008c4a:	eb00 0204 	add.w	r2, r0, r4
 8008c4e:	d1e9      	bne.n	8008c24 <__cvt+0x58>
 8008c50:	7803      	ldrb	r3, [r0, #0]
 8008c52:	2b30      	cmp	r3, #48	@ 0x30
 8008c54:	d107      	bne.n	8008c66 <__cvt+0x9a>
 8008c56:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c5e:	bf1c      	itt	ne
 8008c60:	f1c4 0401 	rsbne	r4, r4, #1
 8008c64:	6034      	strne	r4, [r6, #0]
 8008c66:	6833      	ldr	r3, [r6, #0]
 8008c68:	441a      	add	r2, r3
 8008c6a:	e7db      	b.n	8008c24 <__cvt+0x58>
 8008c6c:	1c5c      	adds	r4, r3, #1
 8008c6e:	9403      	str	r4, [sp, #12]
 8008c70:	7019      	strb	r1, [r3, #0]
 8008c72:	e7de      	b.n	8008c32 <__cvt+0x66>

08008c74 <__exponent>:
 8008c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c76:	2900      	cmp	r1, #0
 8008c78:	bfba      	itte	lt
 8008c7a:	4249      	neglt	r1, r1
 8008c7c:	232d      	movlt	r3, #45	@ 0x2d
 8008c7e:	232b      	movge	r3, #43	@ 0x2b
 8008c80:	2909      	cmp	r1, #9
 8008c82:	7002      	strb	r2, [r0, #0]
 8008c84:	7043      	strb	r3, [r0, #1]
 8008c86:	dd29      	ble.n	8008cdc <__exponent+0x68>
 8008c88:	f10d 0307 	add.w	r3, sp, #7
 8008c8c:	461d      	mov	r5, r3
 8008c8e:	270a      	movs	r7, #10
 8008c90:	461a      	mov	r2, r3
 8008c92:	fbb1 f6f7 	udiv	r6, r1, r7
 8008c96:	fb07 1416 	mls	r4, r7, r6, r1
 8008c9a:	3430      	adds	r4, #48	@ 0x30
 8008c9c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	2c63      	cmp	r4, #99	@ 0x63
 8008ca4:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ca8:	4631      	mov	r1, r6
 8008caa:	dcf1      	bgt.n	8008c90 <__exponent+0x1c>
 8008cac:	3130      	adds	r1, #48	@ 0x30
 8008cae:	1e94      	subs	r4, r2, #2
 8008cb0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008cb4:	1c41      	adds	r1, r0, #1
 8008cb6:	4623      	mov	r3, r4
 8008cb8:	42ab      	cmp	r3, r5
 8008cba:	d30a      	bcc.n	8008cd2 <__exponent+0x5e>
 8008cbc:	f10d 0309 	add.w	r3, sp, #9
 8008cc0:	1a9b      	subs	r3, r3, r2
 8008cc2:	42ac      	cmp	r4, r5
 8008cc4:	bf88      	it	hi
 8008cc6:	2300      	movhi	r3, #0
 8008cc8:	3302      	adds	r3, #2
 8008cca:	4403      	add	r3, r0
 8008ccc:	1a18      	subs	r0, r3, r0
 8008cce:	b003      	add	sp, #12
 8008cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cd2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008cd6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008cda:	e7ed      	b.n	8008cb8 <__exponent+0x44>
 8008cdc:	2330      	movs	r3, #48	@ 0x30
 8008cde:	3130      	adds	r1, #48	@ 0x30
 8008ce0:	7083      	strb	r3, [r0, #2]
 8008ce2:	70c1      	strb	r1, [r0, #3]
 8008ce4:	1d03      	adds	r3, r0, #4
 8008ce6:	e7f1      	b.n	8008ccc <__exponent+0x58>

08008ce8 <_printf_float>:
 8008ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	b08d      	sub	sp, #52	@ 0x34
 8008cee:	460c      	mov	r4, r1
 8008cf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008cf4:	4616      	mov	r6, r2
 8008cf6:	461f      	mov	r7, r3
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	f000 fcdf 	bl	80096bc <_localeconv_r>
 8008cfe:	f8d0 b000 	ldr.w	fp, [r0]
 8008d02:	4658      	mov	r0, fp
 8008d04:	f7f7 faec 	bl	80002e0 <strlen>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d0c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008d14:	6822      	ldr	r2, [r4, #0]
 8008d16:	9005      	str	r0, [sp, #20]
 8008d18:	3307      	adds	r3, #7
 8008d1a:	f023 0307 	bic.w	r3, r3, #7
 8008d1e:	f103 0108 	add.w	r1, r3, #8
 8008d22:	f8c8 1000 	str.w	r1, [r8]
 8008d26:	ed93 0b00 	vldr	d0, [r3]
 8008d2a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008f88 <_printf_float+0x2a0>
 8008d2e:	eeb0 7bc0 	vabs.f64	d7, d0
 8008d32:	eeb4 7b46 	vcmp.f64	d7, d6
 8008d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008d3e:	dd24      	ble.n	8008d8a <_printf_float+0xa2>
 8008d40:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d48:	d502      	bpl.n	8008d50 <_printf_float+0x68>
 8008d4a:	232d      	movs	r3, #45	@ 0x2d
 8008d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d50:	498f      	ldr	r1, [pc, #572]	@ (8008f90 <_printf_float+0x2a8>)
 8008d52:	4b90      	ldr	r3, [pc, #576]	@ (8008f94 <_printf_float+0x2ac>)
 8008d54:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008d58:	bf8c      	ite	hi
 8008d5a:	4688      	movhi	r8, r1
 8008d5c:	4698      	movls	r8, r3
 8008d5e:	f022 0204 	bic.w	r2, r2, #4
 8008d62:	2303      	movs	r3, #3
 8008d64:	6123      	str	r3, [r4, #16]
 8008d66:	6022      	str	r2, [r4, #0]
 8008d68:	f04f 0a00 	mov.w	sl, #0
 8008d6c:	9700      	str	r7, [sp, #0]
 8008d6e:	4633      	mov	r3, r6
 8008d70:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008d72:	4621      	mov	r1, r4
 8008d74:	4628      	mov	r0, r5
 8008d76:	f000 f9d1 	bl	800911c <_printf_common>
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	f040 8089 	bne.w	8008e92 <_printf_float+0x1aa>
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	b00d      	add	sp, #52	@ 0x34
 8008d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8a:	eeb4 0b40 	vcmp.f64	d0, d0
 8008d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d92:	d709      	bvc.n	8008da8 <_printf_float+0xc0>
 8008d94:	ee10 3a90 	vmov	r3, s1
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	bfbc      	itt	lt
 8008d9c:	232d      	movlt	r3, #45	@ 0x2d
 8008d9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008da2:	497d      	ldr	r1, [pc, #500]	@ (8008f98 <_printf_float+0x2b0>)
 8008da4:	4b7d      	ldr	r3, [pc, #500]	@ (8008f9c <_printf_float+0x2b4>)
 8008da6:	e7d5      	b.n	8008d54 <_printf_float+0x6c>
 8008da8:	6863      	ldr	r3, [r4, #4]
 8008daa:	1c59      	adds	r1, r3, #1
 8008dac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008db0:	d139      	bne.n	8008e26 <_printf_float+0x13e>
 8008db2:	2306      	movs	r3, #6
 8008db4:	6063      	str	r3, [r4, #4]
 8008db6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008dba:	2300      	movs	r3, #0
 8008dbc:	6022      	str	r2, [r4, #0]
 8008dbe:	9303      	str	r3, [sp, #12]
 8008dc0:	ab0a      	add	r3, sp, #40	@ 0x28
 8008dc2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008dc6:	ab09      	add	r3, sp, #36	@ 0x24
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	6861      	ldr	r1, [r4, #4]
 8008dcc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f7ff fefb 	bl	8008bcc <__cvt>
 8008dd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008dda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ddc:	4680      	mov	r8, r0
 8008dde:	d129      	bne.n	8008e34 <_printf_float+0x14c>
 8008de0:	1cc8      	adds	r0, r1, #3
 8008de2:	db02      	blt.n	8008dea <_printf_float+0x102>
 8008de4:	6863      	ldr	r3, [r4, #4]
 8008de6:	4299      	cmp	r1, r3
 8008de8:	dd41      	ble.n	8008e6e <_printf_float+0x186>
 8008dea:	f1a9 0902 	sub.w	r9, r9, #2
 8008dee:	fa5f f989 	uxtb.w	r9, r9
 8008df2:	3901      	subs	r1, #1
 8008df4:	464a      	mov	r2, r9
 8008df6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008dfa:	9109      	str	r1, [sp, #36]	@ 0x24
 8008dfc:	f7ff ff3a 	bl	8008c74 <__exponent>
 8008e00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e02:	1813      	adds	r3, r2, r0
 8008e04:	2a01      	cmp	r2, #1
 8008e06:	4682      	mov	sl, r0
 8008e08:	6123      	str	r3, [r4, #16]
 8008e0a:	dc02      	bgt.n	8008e12 <_printf_float+0x12a>
 8008e0c:	6822      	ldr	r2, [r4, #0]
 8008e0e:	07d2      	lsls	r2, r2, #31
 8008e10:	d501      	bpl.n	8008e16 <_printf_float+0x12e>
 8008e12:	3301      	adds	r3, #1
 8008e14:	6123      	str	r3, [r4, #16]
 8008e16:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0a6      	beq.n	8008d6c <_printf_float+0x84>
 8008e1e:	232d      	movs	r3, #45	@ 0x2d
 8008e20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e24:	e7a2      	b.n	8008d6c <_printf_float+0x84>
 8008e26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e2a:	d1c4      	bne.n	8008db6 <_printf_float+0xce>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1c2      	bne.n	8008db6 <_printf_float+0xce>
 8008e30:	2301      	movs	r3, #1
 8008e32:	e7bf      	b.n	8008db4 <_printf_float+0xcc>
 8008e34:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008e38:	d9db      	bls.n	8008df2 <_printf_float+0x10a>
 8008e3a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008e3e:	d118      	bne.n	8008e72 <_printf_float+0x18a>
 8008e40:	2900      	cmp	r1, #0
 8008e42:	6863      	ldr	r3, [r4, #4]
 8008e44:	dd0b      	ble.n	8008e5e <_printf_float+0x176>
 8008e46:	6121      	str	r1, [r4, #16]
 8008e48:	b913      	cbnz	r3, 8008e50 <_printf_float+0x168>
 8008e4a:	6822      	ldr	r2, [r4, #0]
 8008e4c:	07d0      	lsls	r0, r2, #31
 8008e4e:	d502      	bpl.n	8008e56 <_printf_float+0x16e>
 8008e50:	3301      	adds	r3, #1
 8008e52:	440b      	add	r3, r1
 8008e54:	6123      	str	r3, [r4, #16]
 8008e56:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008e58:	f04f 0a00 	mov.w	sl, #0
 8008e5c:	e7db      	b.n	8008e16 <_printf_float+0x12e>
 8008e5e:	b913      	cbnz	r3, 8008e66 <_printf_float+0x17e>
 8008e60:	6822      	ldr	r2, [r4, #0]
 8008e62:	07d2      	lsls	r2, r2, #31
 8008e64:	d501      	bpl.n	8008e6a <_printf_float+0x182>
 8008e66:	3302      	adds	r3, #2
 8008e68:	e7f4      	b.n	8008e54 <_printf_float+0x16c>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e7f2      	b.n	8008e54 <_printf_float+0x16c>
 8008e6e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008e72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e74:	4299      	cmp	r1, r3
 8008e76:	db05      	blt.n	8008e84 <_printf_float+0x19c>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	6121      	str	r1, [r4, #16]
 8008e7c:	07d8      	lsls	r0, r3, #31
 8008e7e:	d5ea      	bpl.n	8008e56 <_printf_float+0x16e>
 8008e80:	1c4b      	adds	r3, r1, #1
 8008e82:	e7e7      	b.n	8008e54 <_printf_float+0x16c>
 8008e84:	2900      	cmp	r1, #0
 8008e86:	bfd4      	ite	le
 8008e88:	f1c1 0202 	rsble	r2, r1, #2
 8008e8c:	2201      	movgt	r2, #1
 8008e8e:	4413      	add	r3, r2
 8008e90:	e7e0      	b.n	8008e54 <_printf_float+0x16c>
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	055a      	lsls	r2, r3, #21
 8008e96:	d407      	bmi.n	8008ea8 <_printf_float+0x1c0>
 8008e98:	6923      	ldr	r3, [r4, #16]
 8008e9a:	4642      	mov	r2, r8
 8008e9c:	4631      	mov	r1, r6
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	47b8      	blx	r7
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	d12a      	bne.n	8008efc <_printf_float+0x214>
 8008ea6:	e76b      	b.n	8008d80 <_printf_float+0x98>
 8008ea8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008eac:	f240 80e0 	bls.w	8009070 <_printf_float+0x388>
 8008eb0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008eb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ebc:	d133      	bne.n	8008f26 <_printf_float+0x23e>
 8008ebe:	4a38      	ldr	r2, [pc, #224]	@ (8008fa0 <_printf_float+0x2b8>)
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	47b8      	blx	r7
 8008ec8:	3001      	adds	r0, #1
 8008eca:	f43f af59 	beq.w	8008d80 <_printf_float+0x98>
 8008ece:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008ed2:	4543      	cmp	r3, r8
 8008ed4:	db02      	blt.n	8008edc <_printf_float+0x1f4>
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	07d8      	lsls	r0, r3, #31
 8008eda:	d50f      	bpl.n	8008efc <_printf_float+0x214>
 8008edc:	9b05      	ldr	r3, [sp, #20]
 8008ede:	465a      	mov	r2, fp
 8008ee0:	4631      	mov	r1, r6
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	47b8      	blx	r7
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	f43f af4a 	beq.w	8008d80 <_printf_float+0x98>
 8008eec:	f04f 0900 	mov.w	r9, #0
 8008ef0:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ef4:	f104 0a1a 	add.w	sl, r4, #26
 8008ef8:	45c8      	cmp	r8, r9
 8008efa:	dc09      	bgt.n	8008f10 <_printf_float+0x228>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	079b      	lsls	r3, r3, #30
 8008f00:	f100 8107 	bmi.w	8009112 <_printf_float+0x42a>
 8008f04:	68e0      	ldr	r0, [r4, #12]
 8008f06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f08:	4298      	cmp	r0, r3
 8008f0a:	bfb8      	it	lt
 8008f0c:	4618      	movlt	r0, r3
 8008f0e:	e739      	b.n	8008d84 <_printf_float+0x9c>
 8008f10:	2301      	movs	r3, #1
 8008f12:	4652      	mov	r2, sl
 8008f14:	4631      	mov	r1, r6
 8008f16:	4628      	mov	r0, r5
 8008f18:	47b8      	blx	r7
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	f43f af30 	beq.w	8008d80 <_printf_float+0x98>
 8008f20:	f109 0901 	add.w	r9, r9, #1
 8008f24:	e7e8      	b.n	8008ef8 <_printf_float+0x210>
 8008f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	dc3b      	bgt.n	8008fa4 <_printf_float+0x2bc>
 8008f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8008fa0 <_printf_float+0x2b8>)
 8008f2e:	2301      	movs	r3, #1
 8008f30:	4631      	mov	r1, r6
 8008f32:	4628      	mov	r0, r5
 8008f34:	47b8      	blx	r7
 8008f36:	3001      	adds	r0, #1
 8008f38:	f43f af22 	beq.w	8008d80 <_printf_float+0x98>
 8008f3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008f40:	ea59 0303 	orrs.w	r3, r9, r3
 8008f44:	d102      	bne.n	8008f4c <_printf_float+0x264>
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	07d9      	lsls	r1, r3, #31
 8008f4a:	d5d7      	bpl.n	8008efc <_printf_float+0x214>
 8008f4c:	9b05      	ldr	r3, [sp, #20]
 8008f4e:	465a      	mov	r2, fp
 8008f50:	4631      	mov	r1, r6
 8008f52:	4628      	mov	r0, r5
 8008f54:	47b8      	blx	r7
 8008f56:	3001      	adds	r0, #1
 8008f58:	f43f af12 	beq.w	8008d80 <_printf_float+0x98>
 8008f5c:	f04f 0a00 	mov.w	sl, #0
 8008f60:	f104 0b1a 	add.w	fp, r4, #26
 8008f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f66:	425b      	negs	r3, r3
 8008f68:	4553      	cmp	r3, sl
 8008f6a:	dc01      	bgt.n	8008f70 <_printf_float+0x288>
 8008f6c:	464b      	mov	r3, r9
 8008f6e:	e794      	b.n	8008e9a <_printf_float+0x1b2>
 8008f70:	2301      	movs	r3, #1
 8008f72:	465a      	mov	r2, fp
 8008f74:	4631      	mov	r1, r6
 8008f76:	4628      	mov	r0, r5
 8008f78:	47b8      	blx	r7
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	f43f af00 	beq.w	8008d80 <_printf_float+0x98>
 8008f80:	f10a 0a01 	add.w	sl, sl, #1
 8008f84:	e7ee      	b.n	8008f64 <_printf_float+0x27c>
 8008f86:	bf00      	nop
 8008f88:	ffffffff 	.word	0xffffffff
 8008f8c:	7fefffff 	.word	0x7fefffff
 8008f90:	0800b948 	.word	0x0800b948
 8008f94:	0800b944 	.word	0x0800b944
 8008f98:	0800b950 	.word	0x0800b950
 8008f9c:	0800b94c 	.word	0x0800b94c
 8008fa0:	0800b954 	.word	0x0800b954
 8008fa4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008fa6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008faa:	4553      	cmp	r3, sl
 8008fac:	bfa8      	it	ge
 8008fae:	4653      	movge	r3, sl
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	4699      	mov	r9, r3
 8008fb4:	dc37      	bgt.n	8009026 <_printf_float+0x33e>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	9307      	str	r3, [sp, #28]
 8008fba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fbe:	f104 021a 	add.w	r2, r4, #26
 8008fc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008fc4:	9907      	ldr	r1, [sp, #28]
 8008fc6:	9306      	str	r3, [sp, #24]
 8008fc8:	eba3 0309 	sub.w	r3, r3, r9
 8008fcc:	428b      	cmp	r3, r1
 8008fce:	dc31      	bgt.n	8009034 <_printf_float+0x34c>
 8008fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd2:	459a      	cmp	sl, r3
 8008fd4:	dc3b      	bgt.n	800904e <_printf_float+0x366>
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	07da      	lsls	r2, r3, #31
 8008fda:	d438      	bmi.n	800904e <_printf_float+0x366>
 8008fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fde:	ebaa 0903 	sub.w	r9, sl, r3
 8008fe2:	9b06      	ldr	r3, [sp, #24]
 8008fe4:	ebaa 0303 	sub.w	r3, sl, r3
 8008fe8:	4599      	cmp	r9, r3
 8008fea:	bfa8      	it	ge
 8008fec:	4699      	movge	r9, r3
 8008fee:	f1b9 0f00 	cmp.w	r9, #0
 8008ff2:	dc34      	bgt.n	800905e <_printf_float+0x376>
 8008ff4:	f04f 0800 	mov.w	r8, #0
 8008ff8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ffc:	f104 0b1a 	add.w	fp, r4, #26
 8009000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009002:	ebaa 0303 	sub.w	r3, sl, r3
 8009006:	eba3 0309 	sub.w	r3, r3, r9
 800900a:	4543      	cmp	r3, r8
 800900c:	f77f af76 	ble.w	8008efc <_printf_float+0x214>
 8009010:	2301      	movs	r3, #1
 8009012:	465a      	mov	r2, fp
 8009014:	4631      	mov	r1, r6
 8009016:	4628      	mov	r0, r5
 8009018:	47b8      	blx	r7
 800901a:	3001      	adds	r0, #1
 800901c:	f43f aeb0 	beq.w	8008d80 <_printf_float+0x98>
 8009020:	f108 0801 	add.w	r8, r8, #1
 8009024:	e7ec      	b.n	8009000 <_printf_float+0x318>
 8009026:	4642      	mov	r2, r8
 8009028:	4631      	mov	r1, r6
 800902a:	4628      	mov	r0, r5
 800902c:	47b8      	blx	r7
 800902e:	3001      	adds	r0, #1
 8009030:	d1c1      	bne.n	8008fb6 <_printf_float+0x2ce>
 8009032:	e6a5      	b.n	8008d80 <_printf_float+0x98>
 8009034:	2301      	movs	r3, #1
 8009036:	4631      	mov	r1, r6
 8009038:	4628      	mov	r0, r5
 800903a:	9206      	str	r2, [sp, #24]
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	f43f ae9e 	beq.w	8008d80 <_printf_float+0x98>
 8009044:	9b07      	ldr	r3, [sp, #28]
 8009046:	9a06      	ldr	r2, [sp, #24]
 8009048:	3301      	adds	r3, #1
 800904a:	9307      	str	r3, [sp, #28]
 800904c:	e7b9      	b.n	8008fc2 <_printf_float+0x2da>
 800904e:	9b05      	ldr	r3, [sp, #20]
 8009050:	465a      	mov	r2, fp
 8009052:	4631      	mov	r1, r6
 8009054:	4628      	mov	r0, r5
 8009056:	47b8      	blx	r7
 8009058:	3001      	adds	r0, #1
 800905a:	d1bf      	bne.n	8008fdc <_printf_float+0x2f4>
 800905c:	e690      	b.n	8008d80 <_printf_float+0x98>
 800905e:	9a06      	ldr	r2, [sp, #24]
 8009060:	464b      	mov	r3, r9
 8009062:	4442      	add	r2, r8
 8009064:	4631      	mov	r1, r6
 8009066:	4628      	mov	r0, r5
 8009068:	47b8      	blx	r7
 800906a:	3001      	adds	r0, #1
 800906c:	d1c2      	bne.n	8008ff4 <_printf_float+0x30c>
 800906e:	e687      	b.n	8008d80 <_printf_float+0x98>
 8009070:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009074:	f1b9 0f01 	cmp.w	r9, #1
 8009078:	dc01      	bgt.n	800907e <_printf_float+0x396>
 800907a:	07db      	lsls	r3, r3, #31
 800907c:	d536      	bpl.n	80090ec <_printf_float+0x404>
 800907e:	2301      	movs	r3, #1
 8009080:	4642      	mov	r2, r8
 8009082:	4631      	mov	r1, r6
 8009084:	4628      	mov	r0, r5
 8009086:	47b8      	blx	r7
 8009088:	3001      	adds	r0, #1
 800908a:	f43f ae79 	beq.w	8008d80 <_printf_float+0x98>
 800908e:	9b05      	ldr	r3, [sp, #20]
 8009090:	465a      	mov	r2, fp
 8009092:	4631      	mov	r1, r6
 8009094:	4628      	mov	r0, r5
 8009096:	47b8      	blx	r7
 8009098:	3001      	adds	r0, #1
 800909a:	f43f ae71 	beq.w	8008d80 <_printf_float+0x98>
 800909e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80090a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80090a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80090ae:	d018      	beq.n	80090e2 <_printf_float+0x3fa>
 80090b0:	464b      	mov	r3, r9
 80090b2:	f108 0201 	add.w	r2, r8, #1
 80090b6:	4631      	mov	r1, r6
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b8      	blx	r7
 80090bc:	3001      	adds	r0, #1
 80090be:	d10c      	bne.n	80090da <_printf_float+0x3f2>
 80090c0:	e65e      	b.n	8008d80 <_printf_float+0x98>
 80090c2:	2301      	movs	r3, #1
 80090c4:	465a      	mov	r2, fp
 80090c6:	4631      	mov	r1, r6
 80090c8:	4628      	mov	r0, r5
 80090ca:	47b8      	blx	r7
 80090cc:	3001      	adds	r0, #1
 80090ce:	f43f ae57 	beq.w	8008d80 <_printf_float+0x98>
 80090d2:	f108 0801 	add.w	r8, r8, #1
 80090d6:	45c8      	cmp	r8, r9
 80090d8:	dbf3      	blt.n	80090c2 <_printf_float+0x3da>
 80090da:	4653      	mov	r3, sl
 80090dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80090e0:	e6dc      	b.n	8008e9c <_printf_float+0x1b4>
 80090e2:	f04f 0800 	mov.w	r8, #0
 80090e6:	f104 0b1a 	add.w	fp, r4, #26
 80090ea:	e7f4      	b.n	80090d6 <_printf_float+0x3ee>
 80090ec:	2301      	movs	r3, #1
 80090ee:	4642      	mov	r2, r8
 80090f0:	e7e1      	b.n	80090b6 <_printf_float+0x3ce>
 80090f2:	2301      	movs	r3, #1
 80090f4:	464a      	mov	r2, r9
 80090f6:	4631      	mov	r1, r6
 80090f8:	4628      	mov	r0, r5
 80090fa:	47b8      	blx	r7
 80090fc:	3001      	adds	r0, #1
 80090fe:	f43f ae3f 	beq.w	8008d80 <_printf_float+0x98>
 8009102:	f108 0801 	add.w	r8, r8, #1
 8009106:	68e3      	ldr	r3, [r4, #12]
 8009108:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800910a:	1a5b      	subs	r3, r3, r1
 800910c:	4543      	cmp	r3, r8
 800910e:	dcf0      	bgt.n	80090f2 <_printf_float+0x40a>
 8009110:	e6f8      	b.n	8008f04 <_printf_float+0x21c>
 8009112:	f04f 0800 	mov.w	r8, #0
 8009116:	f104 0919 	add.w	r9, r4, #25
 800911a:	e7f4      	b.n	8009106 <_printf_float+0x41e>

0800911c <_printf_common>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	4616      	mov	r6, r2
 8009122:	4698      	mov	r8, r3
 8009124:	688a      	ldr	r2, [r1, #8]
 8009126:	690b      	ldr	r3, [r1, #16]
 8009128:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800912c:	4293      	cmp	r3, r2
 800912e:	bfb8      	it	lt
 8009130:	4613      	movlt	r3, r2
 8009132:	6033      	str	r3, [r6, #0]
 8009134:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009138:	4607      	mov	r7, r0
 800913a:	460c      	mov	r4, r1
 800913c:	b10a      	cbz	r2, 8009142 <_printf_common+0x26>
 800913e:	3301      	adds	r3, #1
 8009140:	6033      	str	r3, [r6, #0]
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	0699      	lsls	r1, r3, #26
 8009146:	bf42      	ittt	mi
 8009148:	6833      	ldrmi	r3, [r6, #0]
 800914a:	3302      	addmi	r3, #2
 800914c:	6033      	strmi	r3, [r6, #0]
 800914e:	6825      	ldr	r5, [r4, #0]
 8009150:	f015 0506 	ands.w	r5, r5, #6
 8009154:	d106      	bne.n	8009164 <_printf_common+0x48>
 8009156:	f104 0a19 	add.w	sl, r4, #25
 800915a:	68e3      	ldr	r3, [r4, #12]
 800915c:	6832      	ldr	r2, [r6, #0]
 800915e:	1a9b      	subs	r3, r3, r2
 8009160:	42ab      	cmp	r3, r5
 8009162:	dc26      	bgt.n	80091b2 <_printf_common+0x96>
 8009164:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009168:	6822      	ldr	r2, [r4, #0]
 800916a:	3b00      	subs	r3, #0
 800916c:	bf18      	it	ne
 800916e:	2301      	movne	r3, #1
 8009170:	0692      	lsls	r2, r2, #26
 8009172:	d42b      	bmi.n	80091cc <_printf_common+0xb0>
 8009174:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009178:	4641      	mov	r1, r8
 800917a:	4638      	mov	r0, r7
 800917c:	47c8      	blx	r9
 800917e:	3001      	adds	r0, #1
 8009180:	d01e      	beq.n	80091c0 <_printf_common+0xa4>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	6922      	ldr	r2, [r4, #16]
 8009186:	f003 0306 	and.w	r3, r3, #6
 800918a:	2b04      	cmp	r3, #4
 800918c:	bf02      	ittt	eq
 800918e:	68e5      	ldreq	r5, [r4, #12]
 8009190:	6833      	ldreq	r3, [r6, #0]
 8009192:	1aed      	subeq	r5, r5, r3
 8009194:	68a3      	ldr	r3, [r4, #8]
 8009196:	bf0c      	ite	eq
 8009198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800919c:	2500      	movne	r5, #0
 800919e:	4293      	cmp	r3, r2
 80091a0:	bfc4      	itt	gt
 80091a2:	1a9b      	subgt	r3, r3, r2
 80091a4:	18ed      	addgt	r5, r5, r3
 80091a6:	2600      	movs	r6, #0
 80091a8:	341a      	adds	r4, #26
 80091aa:	42b5      	cmp	r5, r6
 80091ac:	d11a      	bne.n	80091e4 <_printf_common+0xc8>
 80091ae:	2000      	movs	r0, #0
 80091b0:	e008      	b.n	80091c4 <_printf_common+0xa8>
 80091b2:	2301      	movs	r3, #1
 80091b4:	4652      	mov	r2, sl
 80091b6:	4641      	mov	r1, r8
 80091b8:	4638      	mov	r0, r7
 80091ba:	47c8      	blx	r9
 80091bc:	3001      	adds	r0, #1
 80091be:	d103      	bne.n	80091c8 <_printf_common+0xac>
 80091c0:	f04f 30ff 	mov.w	r0, #4294967295
 80091c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c8:	3501      	adds	r5, #1
 80091ca:	e7c6      	b.n	800915a <_printf_common+0x3e>
 80091cc:	18e1      	adds	r1, r4, r3
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	2030      	movs	r0, #48	@ 0x30
 80091d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80091d6:	4422      	add	r2, r4
 80091d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80091dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091e0:	3302      	adds	r3, #2
 80091e2:	e7c7      	b.n	8009174 <_printf_common+0x58>
 80091e4:	2301      	movs	r3, #1
 80091e6:	4622      	mov	r2, r4
 80091e8:	4641      	mov	r1, r8
 80091ea:	4638      	mov	r0, r7
 80091ec:	47c8      	blx	r9
 80091ee:	3001      	adds	r0, #1
 80091f0:	d0e6      	beq.n	80091c0 <_printf_common+0xa4>
 80091f2:	3601      	adds	r6, #1
 80091f4:	e7d9      	b.n	80091aa <_printf_common+0x8e>
	...

080091f8 <_printf_i>:
 80091f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091fc:	7e0f      	ldrb	r7, [r1, #24]
 80091fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009200:	2f78      	cmp	r7, #120	@ 0x78
 8009202:	4691      	mov	r9, r2
 8009204:	4680      	mov	r8, r0
 8009206:	460c      	mov	r4, r1
 8009208:	469a      	mov	sl, r3
 800920a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800920e:	d807      	bhi.n	8009220 <_printf_i+0x28>
 8009210:	2f62      	cmp	r7, #98	@ 0x62
 8009212:	d80a      	bhi.n	800922a <_printf_i+0x32>
 8009214:	2f00      	cmp	r7, #0
 8009216:	f000 80d1 	beq.w	80093bc <_printf_i+0x1c4>
 800921a:	2f58      	cmp	r7, #88	@ 0x58
 800921c:	f000 80b8 	beq.w	8009390 <_printf_i+0x198>
 8009220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009224:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009228:	e03a      	b.n	80092a0 <_printf_i+0xa8>
 800922a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800922e:	2b15      	cmp	r3, #21
 8009230:	d8f6      	bhi.n	8009220 <_printf_i+0x28>
 8009232:	a101      	add	r1, pc, #4	@ (adr r1, 8009238 <_printf_i+0x40>)
 8009234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009238:	08009291 	.word	0x08009291
 800923c:	080092a5 	.word	0x080092a5
 8009240:	08009221 	.word	0x08009221
 8009244:	08009221 	.word	0x08009221
 8009248:	08009221 	.word	0x08009221
 800924c:	08009221 	.word	0x08009221
 8009250:	080092a5 	.word	0x080092a5
 8009254:	08009221 	.word	0x08009221
 8009258:	08009221 	.word	0x08009221
 800925c:	08009221 	.word	0x08009221
 8009260:	08009221 	.word	0x08009221
 8009264:	080093a3 	.word	0x080093a3
 8009268:	080092cf 	.word	0x080092cf
 800926c:	0800935d 	.word	0x0800935d
 8009270:	08009221 	.word	0x08009221
 8009274:	08009221 	.word	0x08009221
 8009278:	080093c5 	.word	0x080093c5
 800927c:	08009221 	.word	0x08009221
 8009280:	080092cf 	.word	0x080092cf
 8009284:	08009221 	.word	0x08009221
 8009288:	08009221 	.word	0x08009221
 800928c:	08009365 	.word	0x08009365
 8009290:	6833      	ldr	r3, [r6, #0]
 8009292:	1d1a      	adds	r2, r3, #4
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6032      	str	r2, [r6, #0]
 8009298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800929c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80092a0:	2301      	movs	r3, #1
 80092a2:	e09c      	b.n	80093de <_printf_i+0x1e6>
 80092a4:	6833      	ldr	r3, [r6, #0]
 80092a6:	6820      	ldr	r0, [r4, #0]
 80092a8:	1d19      	adds	r1, r3, #4
 80092aa:	6031      	str	r1, [r6, #0]
 80092ac:	0606      	lsls	r6, r0, #24
 80092ae:	d501      	bpl.n	80092b4 <_printf_i+0xbc>
 80092b0:	681d      	ldr	r5, [r3, #0]
 80092b2:	e003      	b.n	80092bc <_printf_i+0xc4>
 80092b4:	0645      	lsls	r5, r0, #25
 80092b6:	d5fb      	bpl.n	80092b0 <_printf_i+0xb8>
 80092b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80092bc:	2d00      	cmp	r5, #0
 80092be:	da03      	bge.n	80092c8 <_printf_i+0xd0>
 80092c0:	232d      	movs	r3, #45	@ 0x2d
 80092c2:	426d      	negs	r5, r5
 80092c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092c8:	4858      	ldr	r0, [pc, #352]	@ (800942c <_printf_i+0x234>)
 80092ca:	230a      	movs	r3, #10
 80092cc:	e011      	b.n	80092f2 <_printf_i+0xfa>
 80092ce:	6821      	ldr	r1, [r4, #0]
 80092d0:	6833      	ldr	r3, [r6, #0]
 80092d2:	0608      	lsls	r0, r1, #24
 80092d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80092d8:	d402      	bmi.n	80092e0 <_printf_i+0xe8>
 80092da:	0649      	lsls	r1, r1, #25
 80092dc:	bf48      	it	mi
 80092de:	b2ad      	uxthmi	r5, r5
 80092e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80092e2:	4852      	ldr	r0, [pc, #328]	@ (800942c <_printf_i+0x234>)
 80092e4:	6033      	str	r3, [r6, #0]
 80092e6:	bf14      	ite	ne
 80092e8:	230a      	movne	r3, #10
 80092ea:	2308      	moveq	r3, #8
 80092ec:	2100      	movs	r1, #0
 80092ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092f2:	6866      	ldr	r6, [r4, #4]
 80092f4:	60a6      	str	r6, [r4, #8]
 80092f6:	2e00      	cmp	r6, #0
 80092f8:	db05      	blt.n	8009306 <_printf_i+0x10e>
 80092fa:	6821      	ldr	r1, [r4, #0]
 80092fc:	432e      	orrs	r6, r5
 80092fe:	f021 0104 	bic.w	r1, r1, #4
 8009302:	6021      	str	r1, [r4, #0]
 8009304:	d04b      	beq.n	800939e <_printf_i+0x1a6>
 8009306:	4616      	mov	r6, r2
 8009308:	fbb5 f1f3 	udiv	r1, r5, r3
 800930c:	fb03 5711 	mls	r7, r3, r1, r5
 8009310:	5dc7      	ldrb	r7, [r0, r7]
 8009312:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009316:	462f      	mov	r7, r5
 8009318:	42bb      	cmp	r3, r7
 800931a:	460d      	mov	r5, r1
 800931c:	d9f4      	bls.n	8009308 <_printf_i+0x110>
 800931e:	2b08      	cmp	r3, #8
 8009320:	d10b      	bne.n	800933a <_printf_i+0x142>
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	07df      	lsls	r7, r3, #31
 8009326:	d508      	bpl.n	800933a <_printf_i+0x142>
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	6861      	ldr	r1, [r4, #4]
 800932c:	4299      	cmp	r1, r3
 800932e:	bfde      	ittt	le
 8009330:	2330      	movle	r3, #48	@ 0x30
 8009332:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009336:	f106 36ff 	addle.w	r6, r6, #4294967295
 800933a:	1b92      	subs	r2, r2, r6
 800933c:	6122      	str	r2, [r4, #16]
 800933e:	f8cd a000 	str.w	sl, [sp]
 8009342:	464b      	mov	r3, r9
 8009344:	aa03      	add	r2, sp, #12
 8009346:	4621      	mov	r1, r4
 8009348:	4640      	mov	r0, r8
 800934a:	f7ff fee7 	bl	800911c <_printf_common>
 800934e:	3001      	adds	r0, #1
 8009350:	d14a      	bne.n	80093e8 <_printf_i+0x1f0>
 8009352:	f04f 30ff 	mov.w	r0, #4294967295
 8009356:	b004      	add	sp, #16
 8009358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	f043 0320 	orr.w	r3, r3, #32
 8009362:	6023      	str	r3, [r4, #0]
 8009364:	4832      	ldr	r0, [pc, #200]	@ (8009430 <_printf_i+0x238>)
 8009366:	2778      	movs	r7, #120	@ 0x78
 8009368:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	6831      	ldr	r1, [r6, #0]
 8009370:	061f      	lsls	r7, r3, #24
 8009372:	f851 5b04 	ldr.w	r5, [r1], #4
 8009376:	d402      	bmi.n	800937e <_printf_i+0x186>
 8009378:	065f      	lsls	r7, r3, #25
 800937a:	bf48      	it	mi
 800937c:	b2ad      	uxthmi	r5, r5
 800937e:	6031      	str	r1, [r6, #0]
 8009380:	07d9      	lsls	r1, r3, #31
 8009382:	bf44      	itt	mi
 8009384:	f043 0320 	orrmi.w	r3, r3, #32
 8009388:	6023      	strmi	r3, [r4, #0]
 800938a:	b11d      	cbz	r5, 8009394 <_printf_i+0x19c>
 800938c:	2310      	movs	r3, #16
 800938e:	e7ad      	b.n	80092ec <_printf_i+0xf4>
 8009390:	4826      	ldr	r0, [pc, #152]	@ (800942c <_printf_i+0x234>)
 8009392:	e7e9      	b.n	8009368 <_printf_i+0x170>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	f023 0320 	bic.w	r3, r3, #32
 800939a:	6023      	str	r3, [r4, #0]
 800939c:	e7f6      	b.n	800938c <_printf_i+0x194>
 800939e:	4616      	mov	r6, r2
 80093a0:	e7bd      	b.n	800931e <_printf_i+0x126>
 80093a2:	6833      	ldr	r3, [r6, #0]
 80093a4:	6825      	ldr	r5, [r4, #0]
 80093a6:	6961      	ldr	r1, [r4, #20]
 80093a8:	1d18      	adds	r0, r3, #4
 80093aa:	6030      	str	r0, [r6, #0]
 80093ac:	062e      	lsls	r6, r5, #24
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	d501      	bpl.n	80093b6 <_printf_i+0x1be>
 80093b2:	6019      	str	r1, [r3, #0]
 80093b4:	e002      	b.n	80093bc <_printf_i+0x1c4>
 80093b6:	0668      	lsls	r0, r5, #25
 80093b8:	d5fb      	bpl.n	80093b2 <_printf_i+0x1ba>
 80093ba:	8019      	strh	r1, [r3, #0]
 80093bc:	2300      	movs	r3, #0
 80093be:	6123      	str	r3, [r4, #16]
 80093c0:	4616      	mov	r6, r2
 80093c2:	e7bc      	b.n	800933e <_printf_i+0x146>
 80093c4:	6833      	ldr	r3, [r6, #0]
 80093c6:	1d1a      	adds	r2, r3, #4
 80093c8:	6032      	str	r2, [r6, #0]
 80093ca:	681e      	ldr	r6, [r3, #0]
 80093cc:	6862      	ldr	r2, [r4, #4]
 80093ce:	2100      	movs	r1, #0
 80093d0:	4630      	mov	r0, r6
 80093d2:	f7f6 ff35 	bl	8000240 <memchr>
 80093d6:	b108      	cbz	r0, 80093dc <_printf_i+0x1e4>
 80093d8:	1b80      	subs	r0, r0, r6
 80093da:	6060      	str	r0, [r4, #4]
 80093dc:	6863      	ldr	r3, [r4, #4]
 80093de:	6123      	str	r3, [r4, #16]
 80093e0:	2300      	movs	r3, #0
 80093e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093e6:	e7aa      	b.n	800933e <_printf_i+0x146>
 80093e8:	6923      	ldr	r3, [r4, #16]
 80093ea:	4632      	mov	r2, r6
 80093ec:	4649      	mov	r1, r9
 80093ee:	4640      	mov	r0, r8
 80093f0:	47d0      	blx	sl
 80093f2:	3001      	adds	r0, #1
 80093f4:	d0ad      	beq.n	8009352 <_printf_i+0x15a>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	079b      	lsls	r3, r3, #30
 80093fa:	d413      	bmi.n	8009424 <_printf_i+0x22c>
 80093fc:	68e0      	ldr	r0, [r4, #12]
 80093fe:	9b03      	ldr	r3, [sp, #12]
 8009400:	4298      	cmp	r0, r3
 8009402:	bfb8      	it	lt
 8009404:	4618      	movlt	r0, r3
 8009406:	e7a6      	b.n	8009356 <_printf_i+0x15e>
 8009408:	2301      	movs	r3, #1
 800940a:	4632      	mov	r2, r6
 800940c:	4649      	mov	r1, r9
 800940e:	4640      	mov	r0, r8
 8009410:	47d0      	blx	sl
 8009412:	3001      	adds	r0, #1
 8009414:	d09d      	beq.n	8009352 <_printf_i+0x15a>
 8009416:	3501      	adds	r5, #1
 8009418:	68e3      	ldr	r3, [r4, #12]
 800941a:	9903      	ldr	r1, [sp, #12]
 800941c:	1a5b      	subs	r3, r3, r1
 800941e:	42ab      	cmp	r3, r5
 8009420:	dcf2      	bgt.n	8009408 <_printf_i+0x210>
 8009422:	e7eb      	b.n	80093fc <_printf_i+0x204>
 8009424:	2500      	movs	r5, #0
 8009426:	f104 0619 	add.w	r6, r4, #25
 800942a:	e7f5      	b.n	8009418 <_printf_i+0x220>
 800942c:	0800b956 	.word	0x0800b956
 8009430:	0800b967 	.word	0x0800b967

08009434 <std>:
 8009434:	2300      	movs	r3, #0
 8009436:	b510      	push	{r4, lr}
 8009438:	4604      	mov	r4, r0
 800943a:	e9c0 3300 	strd	r3, r3, [r0]
 800943e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009442:	6083      	str	r3, [r0, #8]
 8009444:	8181      	strh	r1, [r0, #12]
 8009446:	6643      	str	r3, [r0, #100]	@ 0x64
 8009448:	81c2      	strh	r2, [r0, #14]
 800944a:	6183      	str	r3, [r0, #24]
 800944c:	4619      	mov	r1, r3
 800944e:	2208      	movs	r2, #8
 8009450:	305c      	adds	r0, #92	@ 0x5c
 8009452:	f000 f92a 	bl	80096aa <memset>
 8009456:	4b0d      	ldr	r3, [pc, #52]	@ (800948c <std+0x58>)
 8009458:	6263      	str	r3, [r4, #36]	@ 0x24
 800945a:	4b0d      	ldr	r3, [pc, #52]	@ (8009490 <std+0x5c>)
 800945c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800945e:	4b0d      	ldr	r3, [pc, #52]	@ (8009494 <std+0x60>)
 8009460:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009462:	4b0d      	ldr	r3, [pc, #52]	@ (8009498 <std+0x64>)
 8009464:	6323      	str	r3, [r4, #48]	@ 0x30
 8009466:	4b0d      	ldr	r3, [pc, #52]	@ (800949c <std+0x68>)
 8009468:	6224      	str	r4, [r4, #32]
 800946a:	429c      	cmp	r4, r3
 800946c:	d006      	beq.n	800947c <std+0x48>
 800946e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009472:	4294      	cmp	r4, r2
 8009474:	d002      	beq.n	800947c <std+0x48>
 8009476:	33d0      	adds	r3, #208	@ 0xd0
 8009478:	429c      	cmp	r4, r3
 800947a:	d105      	bne.n	8009488 <std+0x54>
 800947c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009484:	f000 b9ec 	b.w	8009860 <__retarget_lock_init_recursive>
 8009488:	bd10      	pop	{r4, pc}
 800948a:	bf00      	nop
 800948c:	08009625 	.word	0x08009625
 8009490:	08009647 	.word	0x08009647
 8009494:	0800967f 	.word	0x0800967f
 8009498:	080096a3 	.word	0x080096a3
 800949c:	2000547c 	.word	0x2000547c

080094a0 <stdio_exit_handler>:
 80094a0:	4a02      	ldr	r2, [pc, #8]	@ (80094ac <stdio_exit_handler+0xc>)
 80094a2:	4903      	ldr	r1, [pc, #12]	@ (80094b0 <stdio_exit_handler+0x10>)
 80094a4:	4803      	ldr	r0, [pc, #12]	@ (80094b4 <stdio_exit_handler+0x14>)
 80094a6:	f000 b869 	b.w	800957c <_fwalk_sglue>
 80094aa:	bf00      	nop
 80094ac:	20000010 	.word	0x20000010
 80094b0:	0800b101 	.word	0x0800b101
 80094b4:	20000020 	.word	0x20000020

080094b8 <cleanup_stdio>:
 80094b8:	6841      	ldr	r1, [r0, #4]
 80094ba:	4b0c      	ldr	r3, [pc, #48]	@ (80094ec <cleanup_stdio+0x34>)
 80094bc:	4299      	cmp	r1, r3
 80094be:	b510      	push	{r4, lr}
 80094c0:	4604      	mov	r4, r0
 80094c2:	d001      	beq.n	80094c8 <cleanup_stdio+0x10>
 80094c4:	f001 fe1c 	bl	800b100 <_fflush_r>
 80094c8:	68a1      	ldr	r1, [r4, #8]
 80094ca:	4b09      	ldr	r3, [pc, #36]	@ (80094f0 <cleanup_stdio+0x38>)
 80094cc:	4299      	cmp	r1, r3
 80094ce:	d002      	beq.n	80094d6 <cleanup_stdio+0x1e>
 80094d0:	4620      	mov	r0, r4
 80094d2:	f001 fe15 	bl	800b100 <_fflush_r>
 80094d6:	68e1      	ldr	r1, [r4, #12]
 80094d8:	4b06      	ldr	r3, [pc, #24]	@ (80094f4 <cleanup_stdio+0x3c>)
 80094da:	4299      	cmp	r1, r3
 80094dc:	d004      	beq.n	80094e8 <cleanup_stdio+0x30>
 80094de:	4620      	mov	r0, r4
 80094e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e4:	f001 be0c 	b.w	800b100 <_fflush_r>
 80094e8:	bd10      	pop	{r4, pc}
 80094ea:	bf00      	nop
 80094ec:	2000547c 	.word	0x2000547c
 80094f0:	200054e4 	.word	0x200054e4
 80094f4:	2000554c 	.word	0x2000554c

080094f8 <global_stdio_init.part.0>:
 80094f8:	b510      	push	{r4, lr}
 80094fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009528 <global_stdio_init.part.0+0x30>)
 80094fc:	4c0b      	ldr	r4, [pc, #44]	@ (800952c <global_stdio_init.part.0+0x34>)
 80094fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009530 <global_stdio_init.part.0+0x38>)
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	4620      	mov	r0, r4
 8009504:	2200      	movs	r2, #0
 8009506:	2104      	movs	r1, #4
 8009508:	f7ff ff94 	bl	8009434 <std>
 800950c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009510:	2201      	movs	r2, #1
 8009512:	2109      	movs	r1, #9
 8009514:	f7ff ff8e 	bl	8009434 <std>
 8009518:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800951c:	2202      	movs	r2, #2
 800951e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009522:	2112      	movs	r1, #18
 8009524:	f7ff bf86 	b.w	8009434 <std>
 8009528:	200055b4 	.word	0x200055b4
 800952c:	2000547c 	.word	0x2000547c
 8009530:	080094a1 	.word	0x080094a1

08009534 <__sfp_lock_acquire>:
 8009534:	4801      	ldr	r0, [pc, #4]	@ (800953c <__sfp_lock_acquire+0x8>)
 8009536:	f000 b994 	b.w	8009862 <__retarget_lock_acquire_recursive>
 800953a:	bf00      	nop
 800953c:	200055bd 	.word	0x200055bd

08009540 <__sfp_lock_release>:
 8009540:	4801      	ldr	r0, [pc, #4]	@ (8009548 <__sfp_lock_release+0x8>)
 8009542:	f000 b98f 	b.w	8009864 <__retarget_lock_release_recursive>
 8009546:	bf00      	nop
 8009548:	200055bd 	.word	0x200055bd

0800954c <__sinit>:
 800954c:	b510      	push	{r4, lr}
 800954e:	4604      	mov	r4, r0
 8009550:	f7ff fff0 	bl	8009534 <__sfp_lock_acquire>
 8009554:	6a23      	ldr	r3, [r4, #32]
 8009556:	b11b      	cbz	r3, 8009560 <__sinit+0x14>
 8009558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800955c:	f7ff bff0 	b.w	8009540 <__sfp_lock_release>
 8009560:	4b04      	ldr	r3, [pc, #16]	@ (8009574 <__sinit+0x28>)
 8009562:	6223      	str	r3, [r4, #32]
 8009564:	4b04      	ldr	r3, [pc, #16]	@ (8009578 <__sinit+0x2c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1f5      	bne.n	8009558 <__sinit+0xc>
 800956c:	f7ff ffc4 	bl	80094f8 <global_stdio_init.part.0>
 8009570:	e7f2      	b.n	8009558 <__sinit+0xc>
 8009572:	bf00      	nop
 8009574:	080094b9 	.word	0x080094b9
 8009578:	200055b4 	.word	0x200055b4

0800957c <_fwalk_sglue>:
 800957c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009580:	4607      	mov	r7, r0
 8009582:	4688      	mov	r8, r1
 8009584:	4614      	mov	r4, r2
 8009586:	2600      	movs	r6, #0
 8009588:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800958c:	f1b9 0901 	subs.w	r9, r9, #1
 8009590:	d505      	bpl.n	800959e <_fwalk_sglue+0x22>
 8009592:	6824      	ldr	r4, [r4, #0]
 8009594:	2c00      	cmp	r4, #0
 8009596:	d1f7      	bne.n	8009588 <_fwalk_sglue+0xc>
 8009598:	4630      	mov	r0, r6
 800959a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800959e:	89ab      	ldrh	r3, [r5, #12]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d907      	bls.n	80095b4 <_fwalk_sglue+0x38>
 80095a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095a8:	3301      	adds	r3, #1
 80095aa:	d003      	beq.n	80095b4 <_fwalk_sglue+0x38>
 80095ac:	4629      	mov	r1, r5
 80095ae:	4638      	mov	r0, r7
 80095b0:	47c0      	blx	r8
 80095b2:	4306      	orrs	r6, r0
 80095b4:	3568      	adds	r5, #104	@ 0x68
 80095b6:	e7e9      	b.n	800958c <_fwalk_sglue+0x10>

080095b8 <sniprintf>:
 80095b8:	b40c      	push	{r2, r3}
 80095ba:	b530      	push	{r4, r5, lr}
 80095bc:	4b18      	ldr	r3, [pc, #96]	@ (8009620 <sniprintf+0x68>)
 80095be:	1e0c      	subs	r4, r1, #0
 80095c0:	681d      	ldr	r5, [r3, #0]
 80095c2:	b09d      	sub	sp, #116	@ 0x74
 80095c4:	da08      	bge.n	80095d8 <sniprintf+0x20>
 80095c6:	238b      	movs	r3, #139	@ 0x8b
 80095c8:	602b      	str	r3, [r5, #0]
 80095ca:	f04f 30ff 	mov.w	r0, #4294967295
 80095ce:	b01d      	add	sp, #116	@ 0x74
 80095d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095d4:	b002      	add	sp, #8
 80095d6:	4770      	bx	lr
 80095d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80095dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80095e0:	f04f 0300 	mov.w	r3, #0
 80095e4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80095e6:	bf14      	ite	ne
 80095e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80095ec:	4623      	moveq	r3, r4
 80095ee:	9304      	str	r3, [sp, #16]
 80095f0:	9307      	str	r3, [sp, #28]
 80095f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80095f6:	9002      	str	r0, [sp, #8]
 80095f8:	9006      	str	r0, [sp, #24]
 80095fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80095fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009600:	ab21      	add	r3, sp, #132	@ 0x84
 8009602:	a902      	add	r1, sp, #8
 8009604:	4628      	mov	r0, r5
 8009606:	9301      	str	r3, [sp, #4]
 8009608:	f001 fbfa 	bl	800ae00 <_svfiprintf_r>
 800960c:	1c43      	adds	r3, r0, #1
 800960e:	bfbc      	itt	lt
 8009610:	238b      	movlt	r3, #139	@ 0x8b
 8009612:	602b      	strlt	r3, [r5, #0]
 8009614:	2c00      	cmp	r4, #0
 8009616:	d0da      	beq.n	80095ce <sniprintf+0x16>
 8009618:	9b02      	ldr	r3, [sp, #8]
 800961a:	2200      	movs	r2, #0
 800961c:	701a      	strb	r2, [r3, #0]
 800961e:	e7d6      	b.n	80095ce <sniprintf+0x16>
 8009620:	2000001c 	.word	0x2000001c

08009624 <__sread>:
 8009624:	b510      	push	{r4, lr}
 8009626:	460c      	mov	r4, r1
 8009628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800962c:	f000 f8ca 	bl	80097c4 <_read_r>
 8009630:	2800      	cmp	r0, #0
 8009632:	bfab      	itete	ge
 8009634:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009636:	89a3      	ldrhlt	r3, [r4, #12]
 8009638:	181b      	addge	r3, r3, r0
 800963a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800963e:	bfac      	ite	ge
 8009640:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009642:	81a3      	strhlt	r3, [r4, #12]
 8009644:	bd10      	pop	{r4, pc}

08009646 <__swrite>:
 8009646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800964a:	461f      	mov	r7, r3
 800964c:	898b      	ldrh	r3, [r1, #12]
 800964e:	05db      	lsls	r3, r3, #23
 8009650:	4605      	mov	r5, r0
 8009652:	460c      	mov	r4, r1
 8009654:	4616      	mov	r6, r2
 8009656:	d505      	bpl.n	8009664 <__swrite+0x1e>
 8009658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800965c:	2302      	movs	r3, #2
 800965e:	2200      	movs	r2, #0
 8009660:	f000 f89e 	bl	80097a0 <_lseek_r>
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800966a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800966e:	81a3      	strh	r3, [r4, #12]
 8009670:	4632      	mov	r2, r6
 8009672:	463b      	mov	r3, r7
 8009674:	4628      	mov	r0, r5
 8009676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800967a:	f000 b8b5 	b.w	80097e8 <_write_r>

0800967e <__sseek>:
 800967e:	b510      	push	{r4, lr}
 8009680:	460c      	mov	r4, r1
 8009682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009686:	f000 f88b 	bl	80097a0 <_lseek_r>
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	bf15      	itete	ne
 8009690:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009692:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009696:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800969a:	81a3      	strheq	r3, [r4, #12]
 800969c:	bf18      	it	ne
 800969e:	81a3      	strhne	r3, [r4, #12]
 80096a0:	bd10      	pop	{r4, pc}

080096a2 <__sclose>:
 80096a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a6:	f000 b80d 	b.w	80096c4 <_close_r>

080096aa <memset>:
 80096aa:	4402      	add	r2, r0
 80096ac:	4603      	mov	r3, r0
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d100      	bne.n	80096b4 <memset+0xa>
 80096b2:	4770      	bx	lr
 80096b4:	f803 1b01 	strb.w	r1, [r3], #1
 80096b8:	e7f9      	b.n	80096ae <memset+0x4>
	...

080096bc <_localeconv_r>:
 80096bc:	4800      	ldr	r0, [pc, #0]	@ (80096c0 <_localeconv_r+0x4>)
 80096be:	4770      	bx	lr
 80096c0:	2000015c 	.word	0x2000015c

080096c4 <_close_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4d06      	ldr	r5, [pc, #24]	@ (80096e0 <_close_r+0x1c>)
 80096c8:	2300      	movs	r3, #0
 80096ca:	4604      	mov	r4, r0
 80096cc:	4608      	mov	r0, r1
 80096ce:	602b      	str	r3, [r5, #0]
 80096d0:	f7f7 fe1a 	bl	8001308 <_close>
 80096d4:	1c43      	adds	r3, r0, #1
 80096d6:	d102      	bne.n	80096de <_close_r+0x1a>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	b103      	cbz	r3, 80096de <_close_r+0x1a>
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	bd38      	pop	{r3, r4, r5, pc}
 80096e0:	200055b8 	.word	0x200055b8

080096e4 <_reclaim_reent>:
 80096e4:	4b2d      	ldr	r3, [pc, #180]	@ (800979c <_reclaim_reent+0xb8>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4283      	cmp	r3, r0
 80096ea:	b570      	push	{r4, r5, r6, lr}
 80096ec:	4604      	mov	r4, r0
 80096ee:	d053      	beq.n	8009798 <_reclaim_reent+0xb4>
 80096f0:	69c3      	ldr	r3, [r0, #28]
 80096f2:	b31b      	cbz	r3, 800973c <_reclaim_reent+0x58>
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	b163      	cbz	r3, 8009712 <_reclaim_reent+0x2e>
 80096f8:	2500      	movs	r5, #0
 80096fa:	69e3      	ldr	r3, [r4, #28]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	5959      	ldr	r1, [r3, r5]
 8009700:	b9b1      	cbnz	r1, 8009730 <_reclaim_reent+0x4c>
 8009702:	3504      	adds	r5, #4
 8009704:	2d80      	cmp	r5, #128	@ 0x80
 8009706:	d1f8      	bne.n	80096fa <_reclaim_reent+0x16>
 8009708:	69e3      	ldr	r3, [r4, #28]
 800970a:	4620      	mov	r0, r4
 800970c:	68d9      	ldr	r1, [r3, #12]
 800970e:	f000 fea1 	bl	800a454 <_free_r>
 8009712:	69e3      	ldr	r3, [r4, #28]
 8009714:	6819      	ldr	r1, [r3, #0]
 8009716:	b111      	cbz	r1, 800971e <_reclaim_reent+0x3a>
 8009718:	4620      	mov	r0, r4
 800971a:	f000 fe9b 	bl	800a454 <_free_r>
 800971e:	69e3      	ldr	r3, [r4, #28]
 8009720:	689d      	ldr	r5, [r3, #8]
 8009722:	b15d      	cbz	r5, 800973c <_reclaim_reent+0x58>
 8009724:	4629      	mov	r1, r5
 8009726:	4620      	mov	r0, r4
 8009728:	682d      	ldr	r5, [r5, #0]
 800972a:	f000 fe93 	bl	800a454 <_free_r>
 800972e:	e7f8      	b.n	8009722 <_reclaim_reent+0x3e>
 8009730:	680e      	ldr	r6, [r1, #0]
 8009732:	4620      	mov	r0, r4
 8009734:	f000 fe8e 	bl	800a454 <_free_r>
 8009738:	4631      	mov	r1, r6
 800973a:	e7e1      	b.n	8009700 <_reclaim_reent+0x1c>
 800973c:	6961      	ldr	r1, [r4, #20]
 800973e:	b111      	cbz	r1, 8009746 <_reclaim_reent+0x62>
 8009740:	4620      	mov	r0, r4
 8009742:	f000 fe87 	bl	800a454 <_free_r>
 8009746:	69e1      	ldr	r1, [r4, #28]
 8009748:	b111      	cbz	r1, 8009750 <_reclaim_reent+0x6c>
 800974a:	4620      	mov	r0, r4
 800974c:	f000 fe82 	bl	800a454 <_free_r>
 8009750:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009752:	b111      	cbz	r1, 800975a <_reclaim_reent+0x76>
 8009754:	4620      	mov	r0, r4
 8009756:	f000 fe7d 	bl	800a454 <_free_r>
 800975a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800975c:	b111      	cbz	r1, 8009764 <_reclaim_reent+0x80>
 800975e:	4620      	mov	r0, r4
 8009760:	f000 fe78 	bl	800a454 <_free_r>
 8009764:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009766:	b111      	cbz	r1, 800976e <_reclaim_reent+0x8a>
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fe73 	bl	800a454 <_free_r>
 800976e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009770:	b111      	cbz	r1, 8009778 <_reclaim_reent+0x94>
 8009772:	4620      	mov	r0, r4
 8009774:	f000 fe6e 	bl	800a454 <_free_r>
 8009778:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800977a:	b111      	cbz	r1, 8009782 <_reclaim_reent+0x9e>
 800977c:	4620      	mov	r0, r4
 800977e:	f000 fe69 	bl	800a454 <_free_r>
 8009782:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009784:	b111      	cbz	r1, 800978c <_reclaim_reent+0xa8>
 8009786:	4620      	mov	r0, r4
 8009788:	f000 fe64 	bl	800a454 <_free_r>
 800978c:	6a23      	ldr	r3, [r4, #32]
 800978e:	b11b      	cbz	r3, 8009798 <_reclaim_reent+0xb4>
 8009790:	4620      	mov	r0, r4
 8009792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009796:	4718      	bx	r3
 8009798:	bd70      	pop	{r4, r5, r6, pc}
 800979a:	bf00      	nop
 800979c:	2000001c 	.word	0x2000001c

080097a0 <_lseek_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d07      	ldr	r5, [pc, #28]	@ (80097c0 <_lseek_r+0x20>)
 80097a4:	4604      	mov	r4, r0
 80097a6:	4608      	mov	r0, r1
 80097a8:	4611      	mov	r1, r2
 80097aa:	2200      	movs	r2, #0
 80097ac:	602a      	str	r2, [r5, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	f7f7 fdd1 	bl	8001356 <_lseek>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d102      	bne.n	80097be <_lseek_r+0x1e>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	b103      	cbz	r3, 80097be <_lseek_r+0x1e>
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	200055b8 	.word	0x200055b8

080097c4 <_read_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4d07      	ldr	r5, [pc, #28]	@ (80097e4 <_read_r+0x20>)
 80097c8:	4604      	mov	r4, r0
 80097ca:	4608      	mov	r0, r1
 80097cc:	4611      	mov	r1, r2
 80097ce:	2200      	movs	r2, #0
 80097d0:	602a      	str	r2, [r5, #0]
 80097d2:	461a      	mov	r2, r3
 80097d4:	f7f7 fd5f 	bl	8001296 <_read>
 80097d8:	1c43      	adds	r3, r0, #1
 80097da:	d102      	bne.n	80097e2 <_read_r+0x1e>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	b103      	cbz	r3, 80097e2 <_read_r+0x1e>
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	200055b8 	.word	0x200055b8

080097e8 <_write_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4d07      	ldr	r5, [pc, #28]	@ (8009808 <_write_r+0x20>)
 80097ec:	4604      	mov	r4, r0
 80097ee:	4608      	mov	r0, r1
 80097f0:	4611      	mov	r1, r2
 80097f2:	2200      	movs	r2, #0
 80097f4:	602a      	str	r2, [r5, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	f7f7 fd6a 	bl	80012d0 <_write>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_write_r+0x1e>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_write_r+0x1e>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	200055b8 	.word	0x200055b8

0800980c <__errno>:
 800980c:	4b01      	ldr	r3, [pc, #4]	@ (8009814 <__errno+0x8>)
 800980e:	6818      	ldr	r0, [r3, #0]
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	2000001c 	.word	0x2000001c

08009818 <__libc_init_array>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	4d0d      	ldr	r5, [pc, #52]	@ (8009850 <__libc_init_array+0x38>)
 800981c:	4c0d      	ldr	r4, [pc, #52]	@ (8009854 <__libc_init_array+0x3c>)
 800981e:	1b64      	subs	r4, r4, r5
 8009820:	10a4      	asrs	r4, r4, #2
 8009822:	2600      	movs	r6, #0
 8009824:	42a6      	cmp	r6, r4
 8009826:	d109      	bne.n	800983c <__libc_init_array+0x24>
 8009828:	4d0b      	ldr	r5, [pc, #44]	@ (8009858 <__libc_init_array+0x40>)
 800982a:	4c0c      	ldr	r4, [pc, #48]	@ (800985c <__libc_init_array+0x44>)
 800982c:	f001 fff8 	bl	800b820 <_init>
 8009830:	1b64      	subs	r4, r4, r5
 8009832:	10a4      	asrs	r4, r4, #2
 8009834:	2600      	movs	r6, #0
 8009836:	42a6      	cmp	r6, r4
 8009838:	d105      	bne.n	8009846 <__libc_init_array+0x2e>
 800983a:	bd70      	pop	{r4, r5, r6, pc}
 800983c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009840:	4798      	blx	r3
 8009842:	3601      	adds	r6, #1
 8009844:	e7ee      	b.n	8009824 <__libc_init_array+0xc>
 8009846:	f855 3b04 	ldr.w	r3, [r5], #4
 800984a:	4798      	blx	r3
 800984c:	3601      	adds	r6, #1
 800984e:	e7f2      	b.n	8009836 <__libc_init_array+0x1e>
 8009850:	0800bcc4 	.word	0x0800bcc4
 8009854:	0800bcc4 	.word	0x0800bcc4
 8009858:	0800bcc4 	.word	0x0800bcc4
 800985c:	0800bcc8 	.word	0x0800bcc8

08009860 <__retarget_lock_init_recursive>:
 8009860:	4770      	bx	lr

08009862 <__retarget_lock_acquire_recursive>:
 8009862:	4770      	bx	lr

08009864 <__retarget_lock_release_recursive>:
 8009864:	4770      	bx	lr

08009866 <memcpy>:
 8009866:	440a      	add	r2, r1
 8009868:	4291      	cmp	r1, r2
 800986a:	f100 33ff 	add.w	r3, r0, #4294967295
 800986e:	d100      	bne.n	8009872 <memcpy+0xc>
 8009870:	4770      	bx	lr
 8009872:	b510      	push	{r4, lr}
 8009874:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800987c:	4291      	cmp	r1, r2
 800987e:	d1f9      	bne.n	8009874 <memcpy+0xe>
 8009880:	bd10      	pop	{r4, pc}

08009882 <quorem>:
 8009882:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009886:	6903      	ldr	r3, [r0, #16]
 8009888:	690c      	ldr	r4, [r1, #16]
 800988a:	42a3      	cmp	r3, r4
 800988c:	4607      	mov	r7, r0
 800988e:	db7e      	blt.n	800998e <quorem+0x10c>
 8009890:	3c01      	subs	r4, #1
 8009892:	f101 0814 	add.w	r8, r1, #20
 8009896:	00a3      	lsls	r3, r4, #2
 8009898:	f100 0514 	add.w	r5, r0, #20
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098a2:	9301      	str	r3, [sp, #4]
 80098a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098ac:	3301      	adds	r3, #1
 80098ae:	429a      	cmp	r2, r3
 80098b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80098b8:	d32e      	bcc.n	8009918 <quorem+0x96>
 80098ba:	f04f 0a00 	mov.w	sl, #0
 80098be:	46c4      	mov	ip, r8
 80098c0:	46ae      	mov	lr, r5
 80098c2:	46d3      	mov	fp, sl
 80098c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098c8:	b298      	uxth	r0, r3
 80098ca:	fb06 a000 	mla	r0, r6, r0, sl
 80098ce:	0c02      	lsrs	r2, r0, #16
 80098d0:	0c1b      	lsrs	r3, r3, #16
 80098d2:	fb06 2303 	mla	r3, r6, r3, r2
 80098d6:	f8de 2000 	ldr.w	r2, [lr]
 80098da:	b280      	uxth	r0, r0
 80098dc:	b292      	uxth	r2, r2
 80098de:	1a12      	subs	r2, r2, r0
 80098e0:	445a      	add	r2, fp
 80098e2:	f8de 0000 	ldr.w	r0, [lr]
 80098e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80098f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80098f4:	b292      	uxth	r2, r2
 80098f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80098fa:	45e1      	cmp	r9, ip
 80098fc:	f84e 2b04 	str.w	r2, [lr], #4
 8009900:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009904:	d2de      	bcs.n	80098c4 <quorem+0x42>
 8009906:	9b00      	ldr	r3, [sp, #0]
 8009908:	58eb      	ldr	r3, [r5, r3]
 800990a:	b92b      	cbnz	r3, 8009918 <quorem+0x96>
 800990c:	9b01      	ldr	r3, [sp, #4]
 800990e:	3b04      	subs	r3, #4
 8009910:	429d      	cmp	r5, r3
 8009912:	461a      	mov	r2, r3
 8009914:	d32f      	bcc.n	8009976 <quorem+0xf4>
 8009916:	613c      	str	r4, [r7, #16]
 8009918:	4638      	mov	r0, r7
 800991a:	f001 f90d 	bl	800ab38 <__mcmp>
 800991e:	2800      	cmp	r0, #0
 8009920:	db25      	blt.n	800996e <quorem+0xec>
 8009922:	4629      	mov	r1, r5
 8009924:	2000      	movs	r0, #0
 8009926:	f858 2b04 	ldr.w	r2, [r8], #4
 800992a:	f8d1 c000 	ldr.w	ip, [r1]
 800992e:	fa1f fe82 	uxth.w	lr, r2
 8009932:	fa1f f38c 	uxth.w	r3, ip
 8009936:	eba3 030e 	sub.w	r3, r3, lr
 800993a:	4403      	add	r3, r0
 800993c:	0c12      	lsrs	r2, r2, #16
 800993e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009942:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009946:	b29b      	uxth	r3, r3
 8009948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800994c:	45c1      	cmp	r9, r8
 800994e:	f841 3b04 	str.w	r3, [r1], #4
 8009952:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009956:	d2e6      	bcs.n	8009926 <quorem+0xa4>
 8009958:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800995c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009960:	b922      	cbnz	r2, 800996c <quorem+0xea>
 8009962:	3b04      	subs	r3, #4
 8009964:	429d      	cmp	r5, r3
 8009966:	461a      	mov	r2, r3
 8009968:	d30b      	bcc.n	8009982 <quorem+0x100>
 800996a:	613c      	str	r4, [r7, #16]
 800996c:	3601      	adds	r6, #1
 800996e:	4630      	mov	r0, r6
 8009970:	b003      	add	sp, #12
 8009972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009976:	6812      	ldr	r2, [r2, #0]
 8009978:	3b04      	subs	r3, #4
 800997a:	2a00      	cmp	r2, #0
 800997c:	d1cb      	bne.n	8009916 <quorem+0x94>
 800997e:	3c01      	subs	r4, #1
 8009980:	e7c6      	b.n	8009910 <quorem+0x8e>
 8009982:	6812      	ldr	r2, [r2, #0]
 8009984:	3b04      	subs	r3, #4
 8009986:	2a00      	cmp	r2, #0
 8009988:	d1ef      	bne.n	800996a <quorem+0xe8>
 800998a:	3c01      	subs	r4, #1
 800998c:	e7ea      	b.n	8009964 <quorem+0xe2>
 800998e:	2000      	movs	r0, #0
 8009990:	e7ee      	b.n	8009970 <quorem+0xee>
 8009992:	0000      	movs	r0, r0
 8009994:	0000      	movs	r0, r0
	...

08009998 <_dtoa_r>:
 8009998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	ed2d 8b02 	vpush	{d8}
 80099a0:	69c7      	ldr	r7, [r0, #28]
 80099a2:	b091      	sub	sp, #68	@ 0x44
 80099a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80099a8:	ec55 4b10 	vmov	r4, r5, d0
 80099ac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80099ae:	9107      	str	r1, [sp, #28]
 80099b0:	4681      	mov	r9, r0
 80099b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80099b4:	930d      	str	r3, [sp, #52]	@ 0x34
 80099b6:	b97f      	cbnz	r7, 80099d8 <_dtoa_r+0x40>
 80099b8:	2010      	movs	r0, #16
 80099ba:	f000 fd95 	bl	800a4e8 <malloc>
 80099be:	4602      	mov	r2, r0
 80099c0:	f8c9 001c 	str.w	r0, [r9, #28]
 80099c4:	b920      	cbnz	r0, 80099d0 <_dtoa_r+0x38>
 80099c6:	4ba0      	ldr	r3, [pc, #640]	@ (8009c48 <_dtoa_r+0x2b0>)
 80099c8:	21ef      	movs	r1, #239	@ 0xef
 80099ca:	48a0      	ldr	r0, [pc, #640]	@ (8009c4c <_dtoa_r+0x2b4>)
 80099cc:	f001 fbea 	bl	800b1a4 <__assert_func>
 80099d0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80099d4:	6007      	str	r7, [r0, #0]
 80099d6:	60c7      	str	r7, [r0, #12]
 80099d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80099dc:	6819      	ldr	r1, [r3, #0]
 80099de:	b159      	cbz	r1, 80099f8 <_dtoa_r+0x60>
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	604a      	str	r2, [r1, #4]
 80099e4:	2301      	movs	r3, #1
 80099e6:	4093      	lsls	r3, r2
 80099e8:	608b      	str	r3, [r1, #8]
 80099ea:	4648      	mov	r0, r9
 80099ec:	f000 fe72 	bl	800a6d4 <_Bfree>
 80099f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	1e2b      	subs	r3, r5, #0
 80099fa:	bfbb      	ittet	lt
 80099fc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a00:	9303      	strlt	r3, [sp, #12]
 8009a02:	2300      	movge	r3, #0
 8009a04:	2201      	movlt	r2, #1
 8009a06:	bfac      	ite	ge
 8009a08:	6033      	strge	r3, [r6, #0]
 8009a0a:	6032      	strlt	r2, [r6, #0]
 8009a0c:	4b90      	ldr	r3, [pc, #576]	@ (8009c50 <_dtoa_r+0x2b8>)
 8009a0e:	9e03      	ldr	r6, [sp, #12]
 8009a10:	43b3      	bics	r3, r6
 8009a12:	d110      	bne.n	8009a36 <_dtoa_r+0x9e>
 8009a14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a16:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a1a:	6013      	str	r3, [r2, #0]
 8009a1c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009a20:	4323      	orrs	r3, r4
 8009a22:	f000 84e6 	beq.w	800a3f2 <_dtoa_r+0xa5a>
 8009a26:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009a28:	4f8a      	ldr	r7, [pc, #552]	@ (8009c54 <_dtoa_r+0x2bc>)
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 84e8 	beq.w	800a400 <_dtoa_r+0xa68>
 8009a30:	1cfb      	adds	r3, r7, #3
 8009a32:	f000 bce3 	b.w	800a3fc <_dtoa_r+0xa64>
 8009a36:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009a3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a42:	d10a      	bne.n	8009a5a <_dtoa_r+0xc2>
 8009a44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a46:	2301      	movs	r3, #1
 8009a48:	6013      	str	r3, [r2, #0]
 8009a4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009a4c:	b113      	cbz	r3, 8009a54 <_dtoa_r+0xbc>
 8009a4e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009a50:	4b81      	ldr	r3, [pc, #516]	@ (8009c58 <_dtoa_r+0x2c0>)
 8009a52:	6013      	str	r3, [r2, #0]
 8009a54:	4f81      	ldr	r7, [pc, #516]	@ (8009c5c <_dtoa_r+0x2c4>)
 8009a56:	f000 bcd3 	b.w	800a400 <_dtoa_r+0xa68>
 8009a5a:	aa0e      	add	r2, sp, #56	@ 0x38
 8009a5c:	a90f      	add	r1, sp, #60	@ 0x3c
 8009a5e:	4648      	mov	r0, r9
 8009a60:	eeb0 0b48 	vmov.f64	d0, d8
 8009a64:	f001 f918 	bl	800ac98 <__d2b>
 8009a68:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009a6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a6e:	9001      	str	r0, [sp, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d045      	beq.n	8009b00 <_dtoa_r+0x168>
 8009a74:	eeb0 7b48 	vmov.f64	d7, d8
 8009a78:	ee18 1a90 	vmov	r1, s17
 8009a7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009a80:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009a84:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009a88:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	ee07 1a90 	vmov	s15, r1
 8009a92:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009a96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009c30 <_dtoa_r+0x298>
 8009a9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009a9e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009c38 <_dtoa_r+0x2a0>
 8009aa2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009aa6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009c40 <_dtoa_r+0x2a8>
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009ab2:	eeb0 7b46 	vmov.f64	d7, d6
 8009ab6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009aba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009abe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac6:	ee16 8a90 	vmov	r8, s13
 8009aca:	d508      	bpl.n	8009ade <_dtoa_r+0x146>
 8009acc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009ad0:	eeb4 6b47 	vcmp.f64	d6, d7
 8009ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad8:	bf18      	it	ne
 8009ada:	f108 38ff 	addne.w	r8, r8, #4294967295
 8009ade:	f1b8 0f16 	cmp.w	r8, #22
 8009ae2:	d82b      	bhi.n	8009b3c <_dtoa_r+0x1a4>
 8009ae4:	495e      	ldr	r1, [pc, #376]	@ (8009c60 <_dtoa_r+0x2c8>)
 8009ae6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009aea:	ed91 7b00 	vldr	d7, [r1]
 8009aee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af6:	d501      	bpl.n	8009afc <_dtoa_r+0x164>
 8009af8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009afc:	2100      	movs	r1, #0
 8009afe:	e01e      	b.n	8009b3e <_dtoa_r+0x1a6>
 8009b00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b02:	4413      	add	r3, r2
 8009b04:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009b08:	2920      	cmp	r1, #32
 8009b0a:	bfc1      	itttt	gt
 8009b0c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009b10:	408e      	lslgt	r6, r1
 8009b12:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009b16:	fa24 f101 	lsrgt.w	r1, r4, r1
 8009b1a:	bfd6      	itet	le
 8009b1c:	f1c1 0120 	rsble	r1, r1, #32
 8009b20:	4331      	orrgt	r1, r6
 8009b22:	fa04 f101 	lslle.w	r1, r4, r1
 8009b26:	ee07 1a90 	vmov	s15, r1
 8009b2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	ee17 1a90 	vmov	r1, s15
 8009b34:	2501      	movs	r5, #1
 8009b36:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009b3a:	e7a8      	b.n	8009a8e <_dtoa_r+0xf6>
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	1ad2      	subs	r2, r2, r3
 8009b40:	1e53      	subs	r3, r2, #1
 8009b42:	9306      	str	r3, [sp, #24]
 8009b44:	bf45      	ittet	mi
 8009b46:	f1c2 0301 	rsbmi	r3, r2, #1
 8009b4a:	9304      	strmi	r3, [sp, #16]
 8009b4c:	2300      	movpl	r3, #0
 8009b4e:	2300      	movmi	r3, #0
 8009b50:	bf4c      	ite	mi
 8009b52:	9306      	strmi	r3, [sp, #24]
 8009b54:	9304      	strpl	r3, [sp, #16]
 8009b56:	f1b8 0f00 	cmp.w	r8, #0
 8009b5a:	910c      	str	r1, [sp, #48]	@ 0x30
 8009b5c:	db18      	blt.n	8009b90 <_dtoa_r+0x1f8>
 8009b5e:	9b06      	ldr	r3, [sp, #24]
 8009b60:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009b64:	4443      	add	r3, r8
 8009b66:	9306      	str	r3, [sp, #24]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	9a07      	ldr	r2, [sp, #28]
 8009b6c:	2a09      	cmp	r2, #9
 8009b6e:	d845      	bhi.n	8009bfc <_dtoa_r+0x264>
 8009b70:	2a05      	cmp	r2, #5
 8009b72:	bfc4      	itt	gt
 8009b74:	3a04      	subgt	r2, #4
 8009b76:	9207      	strgt	r2, [sp, #28]
 8009b78:	9a07      	ldr	r2, [sp, #28]
 8009b7a:	f1a2 0202 	sub.w	r2, r2, #2
 8009b7e:	bfcc      	ite	gt
 8009b80:	2400      	movgt	r4, #0
 8009b82:	2401      	movle	r4, #1
 8009b84:	2a03      	cmp	r2, #3
 8009b86:	d844      	bhi.n	8009c12 <_dtoa_r+0x27a>
 8009b88:	e8df f002 	tbb	[pc, r2]
 8009b8c:	0b173634 	.word	0x0b173634
 8009b90:	9b04      	ldr	r3, [sp, #16]
 8009b92:	2200      	movs	r2, #0
 8009b94:	eba3 0308 	sub.w	r3, r3, r8
 8009b98:	9304      	str	r3, [sp, #16]
 8009b9a:	920a      	str	r2, [sp, #40]	@ 0x28
 8009b9c:	f1c8 0300 	rsb	r3, r8, #0
 8009ba0:	e7e3      	b.n	8009b6a <_dtoa_r+0x1d2>
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	9208      	str	r2, [sp, #32]
 8009ba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ba8:	eb08 0b02 	add.w	fp, r8, r2
 8009bac:	f10b 0a01 	add.w	sl, fp, #1
 8009bb0:	4652      	mov	r2, sl
 8009bb2:	2a01      	cmp	r2, #1
 8009bb4:	bfb8      	it	lt
 8009bb6:	2201      	movlt	r2, #1
 8009bb8:	e006      	b.n	8009bc8 <_dtoa_r+0x230>
 8009bba:	2201      	movs	r2, #1
 8009bbc:	9208      	str	r2, [sp, #32]
 8009bbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bc0:	2a00      	cmp	r2, #0
 8009bc2:	dd29      	ble.n	8009c18 <_dtoa_r+0x280>
 8009bc4:	4693      	mov	fp, r2
 8009bc6:	4692      	mov	sl, r2
 8009bc8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009bcc:	2100      	movs	r1, #0
 8009bce:	2004      	movs	r0, #4
 8009bd0:	f100 0614 	add.w	r6, r0, #20
 8009bd4:	4296      	cmp	r6, r2
 8009bd6:	d926      	bls.n	8009c26 <_dtoa_r+0x28e>
 8009bd8:	6079      	str	r1, [r7, #4]
 8009bda:	4648      	mov	r0, r9
 8009bdc:	9305      	str	r3, [sp, #20]
 8009bde:	f000 fd39 	bl	800a654 <_Balloc>
 8009be2:	9b05      	ldr	r3, [sp, #20]
 8009be4:	4607      	mov	r7, r0
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d13e      	bne.n	8009c68 <_dtoa_r+0x2d0>
 8009bea:	4b1e      	ldr	r3, [pc, #120]	@ (8009c64 <_dtoa_r+0x2cc>)
 8009bec:	4602      	mov	r2, r0
 8009bee:	f240 11af 	movw	r1, #431	@ 0x1af
 8009bf2:	e6ea      	b.n	80099ca <_dtoa_r+0x32>
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	e7e1      	b.n	8009bbc <_dtoa_r+0x224>
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	e7d3      	b.n	8009ba4 <_dtoa_r+0x20c>
 8009bfc:	2401      	movs	r4, #1
 8009bfe:	2200      	movs	r2, #0
 8009c00:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009c04:	f04f 3bff 	mov.w	fp, #4294967295
 8009c08:	2100      	movs	r1, #0
 8009c0a:	46da      	mov	sl, fp
 8009c0c:	2212      	movs	r2, #18
 8009c0e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c10:	e7da      	b.n	8009bc8 <_dtoa_r+0x230>
 8009c12:	2201      	movs	r2, #1
 8009c14:	9208      	str	r2, [sp, #32]
 8009c16:	e7f5      	b.n	8009c04 <_dtoa_r+0x26c>
 8009c18:	f04f 0b01 	mov.w	fp, #1
 8009c1c:	46da      	mov	sl, fp
 8009c1e:	465a      	mov	r2, fp
 8009c20:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009c24:	e7d0      	b.n	8009bc8 <_dtoa_r+0x230>
 8009c26:	3101      	adds	r1, #1
 8009c28:	0040      	lsls	r0, r0, #1
 8009c2a:	e7d1      	b.n	8009bd0 <_dtoa_r+0x238>
 8009c2c:	f3af 8000 	nop.w
 8009c30:	636f4361 	.word	0x636f4361
 8009c34:	3fd287a7 	.word	0x3fd287a7
 8009c38:	8b60c8b3 	.word	0x8b60c8b3
 8009c3c:	3fc68a28 	.word	0x3fc68a28
 8009c40:	509f79fb 	.word	0x509f79fb
 8009c44:	3fd34413 	.word	0x3fd34413
 8009c48:	0800b985 	.word	0x0800b985
 8009c4c:	0800b99c 	.word	0x0800b99c
 8009c50:	7ff00000 	.word	0x7ff00000
 8009c54:	0800b981 	.word	0x0800b981
 8009c58:	0800b955 	.word	0x0800b955
 8009c5c:	0800b954 	.word	0x0800b954
 8009c60:	0800baf0 	.word	0x0800baf0
 8009c64:	0800b9f4 	.word	0x0800b9f4
 8009c68:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009c6c:	f1ba 0f0e 	cmp.w	sl, #14
 8009c70:	6010      	str	r0, [r2, #0]
 8009c72:	d86e      	bhi.n	8009d52 <_dtoa_r+0x3ba>
 8009c74:	2c00      	cmp	r4, #0
 8009c76:	d06c      	beq.n	8009d52 <_dtoa_r+0x3ba>
 8009c78:	f1b8 0f00 	cmp.w	r8, #0
 8009c7c:	f340 80b4 	ble.w	8009de8 <_dtoa_r+0x450>
 8009c80:	4ac8      	ldr	r2, [pc, #800]	@ (8009fa4 <_dtoa_r+0x60c>)
 8009c82:	f008 010f 	and.w	r1, r8, #15
 8009c86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009c8a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009c8e:	ed92 7b00 	vldr	d7, [r2]
 8009c92:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009c96:	f000 809b 	beq.w	8009dd0 <_dtoa_r+0x438>
 8009c9a:	4ac3      	ldr	r2, [pc, #780]	@ (8009fa8 <_dtoa_r+0x610>)
 8009c9c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009ca0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009ca4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009ca8:	f001 010f 	and.w	r1, r1, #15
 8009cac:	2203      	movs	r2, #3
 8009cae:	48be      	ldr	r0, [pc, #760]	@ (8009fa8 <_dtoa_r+0x610>)
 8009cb0:	2900      	cmp	r1, #0
 8009cb2:	f040 808f 	bne.w	8009dd4 <_dtoa_r+0x43c>
 8009cb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009cba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009cbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cc2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009cc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cc8:	2900      	cmp	r1, #0
 8009cca:	f000 80b3 	beq.w	8009e34 <_dtoa_r+0x49c>
 8009cce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009cd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cda:	f140 80ab 	bpl.w	8009e34 <_dtoa_r+0x49c>
 8009cde:	f1ba 0f00 	cmp.w	sl, #0
 8009ce2:	f000 80a7 	beq.w	8009e34 <_dtoa_r+0x49c>
 8009ce6:	f1bb 0f00 	cmp.w	fp, #0
 8009cea:	dd30      	ble.n	8009d4e <_dtoa_r+0x3b6>
 8009cec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009cf0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009cf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cf8:	f108 31ff 	add.w	r1, r8, #4294967295
 8009cfc:	9105      	str	r1, [sp, #20]
 8009cfe:	3201      	adds	r2, #1
 8009d00:	465c      	mov	r4, fp
 8009d02:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009d06:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009d0a:	ee07 2a90 	vmov	s15, r2
 8009d0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009d12:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009d16:	ee15 2a90 	vmov	r2, s11
 8009d1a:	ec51 0b15 	vmov	r0, r1, d5
 8009d1e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009d22:	2c00      	cmp	r4, #0
 8009d24:	f040 808a 	bne.w	8009e3c <_dtoa_r+0x4a4>
 8009d28:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009d2c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009d30:	ec41 0b17 	vmov	d7, r0, r1
 8009d34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3c:	f300 826a 	bgt.w	800a214 <_dtoa_r+0x87c>
 8009d40:	eeb1 7b47 	vneg.f64	d7, d7
 8009d44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4c:	d423      	bmi.n	8009d96 <_dtoa_r+0x3fe>
 8009d4e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009d52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009d54:	2a00      	cmp	r2, #0
 8009d56:	f2c0 8129 	blt.w	8009fac <_dtoa_r+0x614>
 8009d5a:	f1b8 0f0e 	cmp.w	r8, #14
 8009d5e:	f300 8125 	bgt.w	8009fac <_dtoa_r+0x614>
 8009d62:	4b90      	ldr	r3, [pc, #576]	@ (8009fa4 <_dtoa_r+0x60c>)
 8009d64:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009d68:	ed93 6b00 	vldr	d6, [r3]
 8009d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f280 80c8 	bge.w	8009f04 <_dtoa_r+0x56c>
 8009d74:	f1ba 0f00 	cmp.w	sl, #0
 8009d78:	f300 80c4 	bgt.w	8009f04 <_dtoa_r+0x56c>
 8009d7c:	d10b      	bne.n	8009d96 <_dtoa_r+0x3fe>
 8009d7e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009d82:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009d86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d92:	f2c0 823c 	blt.w	800a20e <_dtoa_r+0x876>
 8009d96:	2400      	movs	r4, #0
 8009d98:	4625      	mov	r5, r4
 8009d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9c:	43db      	mvns	r3, r3
 8009d9e:	9305      	str	r3, [sp, #20]
 8009da0:	463e      	mov	r6, r7
 8009da2:	f04f 0800 	mov.w	r8, #0
 8009da6:	4621      	mov	r1, r4
 8009da8:	4648      	mov	r0, r9
 8009daa:	f000 fc93 	bl	800a6d4 <_Bfree>
 8009dae:	2d00      	cmp	r5, #0
 8009db0:	f000 80a2 	beq.w	8009ef8 <_dtoa_r+0x560>
 8009db4:	f1b8 0f00 	cmp.w	r8, #0
 8009db8:	d005      	beq.n	8009dc6 <_dtoa_r+0x42e>
 8009dba:	45a8      	cmp	r8, r5
 8009dbc:	d003      	beq.n	8009dc6 <_dtoa_r+0x42e>
 8009dbe:	4641      	mov	r1, r8
 8009dc0:	4648      	mov	r0, r9
 8009dc2:	f000 fc87 	bl	800a6d4 <_Bfree>
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	4648      	mov	r0, r9
 8009dca:	f000 fc83 	bl	800a6d4 <_Bfree>
 8009dce:	e093      	b.n	8009ef8 <_dtoa_r+0x560>
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	e76c      	b.n	8009cae <_dtoa_r+0x316>
 8009dd4:	07cc      	lsls	r4, r1, #31
 8009dd6:	d504      	bpl.n	8009de2 <_dtoa_r+0x44a>
 8009dd8:	ed90 6b00 	vldr	d6, [r0]
 8009ddc:	3201      	adds	r2, #1
 8009dde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009de2:	1049      	asrs	r1, r1, #1
 8009de4:	3008      	adds	r0, #8
 8009de6:	e763      	b.n	8009cb0 <_dtoa_r+0x318>
 8009de8:	d022      	beq.n	8009e30 <_dtoa_r+0x498>
 8009dea:	f1c8 0100 	rsb	r1, r8, #0
 8009dee:	4a6d      	ldr	r2, [pc, #436]	@ (8009fa4 <_dtoa_r+0x60c>)
 8009df0:	f001 000f 	and.w	r0, r1, #15
 8009df4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009df8:	ed92 7b00 	vldr	d7, [r2]
 8009dfc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009e00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e04:	4868      	ldr	r0, [pc, #416]	@ (8009fa8 <_dtoa_r+0x610>)
 8009e06:	1109      	asrs	r1, r1, #4
 8009e08:	2400      	movs	r4, #0
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	b929      	cbnz	r1, 8009e1a <_dtoa_r+0x482>
 8009e0e:	2c00      	cmp	r4, #0
 8009e10:	f43f af57 	beq.w	8009cc2 <_dtoa_r+0x32a>
 8009e14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e18:	e753      	b.n	8009cc2 <_dtoa_r+0x32a>
 8009e1a:	07ce      	lsls	r6, r1, #31
 8009e1c:	d505      	bpl.n	8009e2a <_dtoa_r+0x492>
 8009e1e:	ed90 6b00 	vldr	d6, [r0]
 8009e22:	3201      	adds	r2, #1
 8009e24:	2401      	movs	r4, #1
 8009e26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e2a:	1049      	asrs	r1, r1, #1
 8009e2c:	3008      	adds	r0, #8
 8009e2e:	e7ed      	b.n	8009e0c <_dtoa_r+0x474>
 8009e30:	2202      	movs	r2, #2
 8009e32:	e746      	b.n	8009cc2 <_dtoa_r+0x32a>
 8009e34:	f8cd 8014 	str.w	r8, [sp, #20]
 8009e38:	4654      	mov	r4, sl
 8009e3a:	e762      	b.n	8009d02 <_dtoa_r+0x36a>
 8009e3c:	4a59      	ldr	r2, [pc, #356]	@ (8009fa4 <_dtoa_r+0x60c>)
 8009e3e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009e42:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009e46:	9a08      	ldr	r2, [sp, #32]
 8009e48:	ec41 0b17 	vmov	d7, r0, r1
 8009e4c:	443c      	add	r4, r7
 8009e4e:	b34a      	cbz	r2, 8009ea4 <_dtoa_r+0x50c>
 8009e50:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009e54:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009e58:	463e      	mov	r6, r7
 8009e5a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009e5e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009e62:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009e66:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009e6a:	ee14 2a90 	vmov	r2, s9
 8009e6e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009e72:	3230      	adds	r2, #48	@ 0x30
 8009e74:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009e78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e80:	f806 2b01 	strb.w	r2, [r6], #1
 8009e84:	d438      	bmi.n	8009ef8 <_dtoa_r+0x560>
 8009e86:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009e8a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e92:	d46e      	bmi.n	8009f72 <_dtoa_r+0x5da>
 8009e94:	42a6      	cmp	r6, r4
 8009e96:	f43f af5a 	beq.w	8009d4e <_dtoa_r+0x3b6>
 8009e9a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009e9e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009ea2:	e7e0      	b.n	8009e66 <_dtoa_r+0x4ce>
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	463e      	mov	r6, r7
 8009ea8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009eac:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009eb0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009eb4:	ee14 2a90 	vmov	r2, s9
 8009eb8:	3230      	adds	r2, #48	@ 0x30
 8009eba:	f806 2b01 	strb.w	r2, [r6], #1
 8009ebe:	42a6      	cmp	r6, r4
 8009ec0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009ec4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009ec8:	d119      	bne.n	8009efe <_dtoa_r+0x566>
 8009eca:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009ece:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009ed2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eda:	dc4a      	bgt.n	8009f72 <_dtoa_r+0x5da>
 8009edc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009ee0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee8:	f57f af31 	bpl.w	8009d4e <_dtoa_r+0x3b6>
 8009eec:	460e      	mov	r6, r1
 8009eee:	3901      	subs	r1, #1
 8009ef0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ef4:	2b30      	cmp	r3, #48	@ 0x30
 8009ef6:	d0f9      	beq.n	8009eec <_dtoa_r+0x554>
 8009ef8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009efc:	e027      	b.n	8009f4e <_dtoa_r+0x5b6>
 8009efe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009f02:	e7d5      	b.n	8009eb0 <_dtoa_r+0x518>
 8009f04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f08:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009f0c:	463e      	mov	r6, r7
 8009f0e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009f12:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009f16:	ee15 3a10 	vmov	r3, s10
 8009f1a:	3330      	adds	r3, #48	@ 0x30
 8009f1c:	f806 3b01 	strb.w	r3, [r6], #1
 8009f20:	1bf3      	subs	r3, r6, r7
 8009f22:	459a      	cmp	sl, r3
 8009f24:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009f28:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009f2c:	d132      	bne.n	8009f94 <_dtoa_r+0x5fc>
 8009f2e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009f32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3a:	dc18      	bgt.n	8009f6e <_dtoa_r+0x5d6>
 8009f3c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f44:	d103      	bne.n	8009f4e <_dtoa_r+0x5b6>
 8009f46:	ee15 3a10 	vmov	r3, s10
 8009f4a:	07db      	lsls	r3, r3, #31
 8009f4c:	d40f      	bmi.n	8009f6e <_dtoa_r+0x5d6>
 8009f4e:	9901      	ldr	r1, [sp, #4]
 8009f50:	4648      	mov	r0, r9
 8009f52:	f000 fbbf 	bl	800a6d4 <_Bfree>
 8009f56:	2300      	movs	r3, #0
 8009f58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f5a:	7033      	strb	r3, [r6, #0]
 8009f5c:	f108 0301 	add.w	r3, r8, #1
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 824b 	beq.w	800a400 <_dtoa_r+0xa68>
 8009f6a:	601e      	str	r6, [r3, #0]
 8009f6c:	e248      	b.n	800a400 <_dtoa_r+0xa68>
 8009f6e:	f8cd 8014 	str.w	r8, [sp, #20]
 8009f72:	4633      	mov	r3, r6
 8009f74:	461e      	mov	r6, r3
 8009f76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f7a:	2a39      	cmp	r2, #57	@ 0x39
 8009f7c:	d106      	bne.n	8009f8c <_dtoa_r+0x5f4>
 8009f7e:	429f      	cmp	r7, r3
 8009f80:	d1f8      	bne.n	8009f74 <_dtoa_r+0x5dc>
 8009f82:	9a05      	ldr	r2, [sp, #20]
 8009f84:	3201      	adds	r2, #1
 8009f86:	9205      	str	r2, [sp, #20]
 8009f88:	2230      	movs	r2, #48	@ 0x30
 8009f8a:	703a      	strb	r2, [r7, #0]
 8009f8c:	781a      	ldrb	r2, [r3, #0]
 8009f8e:	3201      	adds	r2, #1
 8009f90:	701a      	strb	r2, [r3, #0]
 8009f92:	e7b1      	b.n	8009ef8 <_dtoa_r+0x560>
 8009f94:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009f98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa0:	d1b5      	bne.n	8009f0e <_dtoa_r+0x576>
 8009fa2:	e7d4      	b.n	8009f4e <_dtoa_r+0x5b6>
 8009fa4:	0800baf0 	.word	0x0800baf0
 8009fa8:	0800bac8 	.word	0x0800bac8
 8009fac:	9908      	ldr	r1, [sp, #32]
 8009fae:	2900      	cmp	r1, #0
 8009fb0:	f000 80e9 	beq.w	800a186 <_dtoa_r+0x7ee>
 8009fb4:	9907      	ldr	r1, [sp, #28]
 8009fb6:	2901      	cmp	r1, #1
 8009fb8:	f300 80cb 	bgt.w	800a152 <_dtoa_r+0x7ba>
 8009fbc:	2d00      	cmp	r5, #0
 8009fbe:	f000 80c4 	beq.w	800a14a <_dtoa_r+0x7b2>
 8009fc2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009fc6:	9e04      	ldr	r6, [sp, #16]
 8009fc8:	461c      	mov	r4, r3
 8009fca:	9305      	str	r3, [sp, #20]
 8009fcc:	9b04      	ldr	r3, [sp, #16]
 8009fce:	4413      	add	r3, r2
 8009fd0:	9304      	str	r3, [sp, #16]
 8009fd2:	9b06      	ldr	r3, [sp, #24]
 8009fd4:	2101      	movs	r1, #1
 8009fd6:	4413      	add	r3, r2
 8009fd8:	4648      	mov	r0, r9
 8009fda:	9306      	str	r3, [sp, #24]
 8009fdc:	f000 fc2e 	bl	800a83c <__i2b>
 8009fe0:	9b05      	ldr	r3, [sp, #20]
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	b166      	cbz	r6, 800a000 <_dtoa_r+0x668>
 8009fe6:	9a06      	ldr	r2, [sp, #24]
 8009fe8:	2a00      	cmp	r2, #0
 8009fea:	dd09      	ble.n	800a000 <_dtoa_r+0x668>
 8009fec:	42b2      	cmp	r2, r6
 8009fee:	9904      	ldr	r1, [sp, #16]
 8009ff0:	bfa8      	it	ge
 8009ff2:	4632      	movge	r2, r6
 8009ff4:	1a89      	subs	r1, r1, r2
 8009ff6:	9104      	str	r1, [sp, #16]
 8009ff8:	9906      	ldr	r1, [sp, #24]
 8009ffa:	1ab6      	subs	r6, r6, r2
 8009ffc:	1a8a      	subs	r2, r1, r2
 8009ffe:	9206      	str	r2, [sp, #24]
 800a000:	b30b      	cbz	r3, 800a046 <_dtoa_r+0x6ae>
 800a002:	9a08      	ldr	r2, [sp, #32]
 800a004:	2a00      	cmp	r2, #0
 800a006:	f000 80c5 	beq.w	800a194 <_dtoa_r+0x7fc>
 800a00a:	2c00      	cmp	r4, #0
 800a00c:	f000 80bf 	beq.w	800a18e <_dtoa_r+0x7f6>
 800a010:	4629      	mov	r1, r5
 800a012:	4622      	mov	r2, r4
 800a014:	4648      	mov	r0, r9
 800a016:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a018:	f000 fcc8 	bl	800a9ac <__pow5mult>
 800a01c:	9a01      	ldr	r2, [sp, #4]
 800a01e:	4601      	mov	r1, r0
 800a020:	4605      	mov	r5, r0
 800a022:	4648      	mov	r0, r9
 800a024:	f000 fc20 	bl	800a868 <__multiply>
 800a028:	9901      	ldr	r1, [sp, #4]
 800a02a:	9005      	str	r0, [sp, #20]
 800a02c:	4648      	mov	r0, r9
 800a02e:	f000 fb51 	bl	800a6d4 <_Bfree>
 800a032:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a034:	1b1b      	subs	r3, r3, r4
 800a036:	f000 80b0 	beq.w	800a19a <_dtoa_r+0x802>
 800a03a:	9905      	ldr	r1, [sp, #20]
 800a03c:	461a      	mov	r2, r3
 800a03e:	4648      	mov	r0, r9
 800a040:	f000 fcb4 	bl	800a9ac <__pow5mult>
 800a044:	9001      	str	r0, [sp, #4]
 800a046:	2101      	movs	r1, #1
 800a048:	4648      	mov	r0, r9
 800a04a:	f000 fbf7 	bl	800a83c <__i2b>
 800a04e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a050:	4604      	mov	r4, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	f000 81da 	beq.w	800a40c <_dtoa_r+0xa74>
 800a058:	461a      	mov	r2, r3
 800a05a:	4601      	mov	r1, r0
 800a05c:	4648      	mov	r0, r9
 800a05e:	f000 fca5 	bl	800a9ac <__pow5mult>
 800a062:	9b07      	ldr	r3, [sp, #28]
 800a064:	2b01      	cmp	r3, #1
 800a066:	4604      	mov	r4, r0
 800a068:	f300 80a0 	bgt.w	800a1ac <_dtoa_r+0x814>
 800a06c:	9b02      	ldr	r3, [sp, #8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f040 8096 	bne.w	800a1a0 <_dtoa_r+0x808>
 800a074:	9b03      	ldr	r3, [sp, #12]
 800a076:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	f040 8092 	bne.w	800a1a4 <_dtoa_r+0x80c>
 800a080:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a084:	0d12      	lsrs	r2, r2, #20
 800a086:	0512      	lsls	r2, r2, #20
 800a088:	2a00      	cmp	r2, #0
 800a08a:	f000 808d 	beq.w	800a1a8 <_dtoa_r+0x810>
 800a08e:	9b04      	ldr	r3, [sp, #16]
 800a090:	3301      	adds	r3, #1
 800a092:	9304      	str	r3, [sp, #16]
 800a094:	9b06      	ldr	r3, [sp, #24]
 800a096:	3301      	adds	r3, #1
 800a098:	9306      	str	r3, [sp, #24]
 800a09a:	2301      	movs	r3, #1
 800a09c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a09e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 81b9 	beq.w	800a418 <_dtoa_r+0xa80>
 800a0a6:	6922      	ldr	r2, [r4, #16]
 800a0a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a0ac:	6910      	ldr	r0, [r2, #16]
 800a0ae:	f000 fb79 	bl	800a7a4 <__hi0bits>
 800a0b2:	f1c0 0020 	rsb	r0, r0, #32
 800a0b6:	9b06      	ldr	r3, [sp, #24]
 800a0b8:	4418      	add	r0, r3
 800a0ba:	f010 001f 	ands.w	r0, r0, #31
 800a0be:	f000 8081 	beq.w	800a1c4 <_dtoa_r+0x82c>
 800a0c2:	f1c0 0220 	rsb	r2, r0, #32
 800a0c6:	2a04      	cmp	r2, #4
 800a0c8:	dd73      	ble.n	800a1b2 <_dtoa_r+0x81a>
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	f1c0 001c 	rsb	r0, r0, #28
 800a0d0:	4403      	add	r3, r0
 800a0d2:	9304      	str	r3, [sp, #16]
 800a0d4:	9b06      	ldr	r3, [sp, #24]
 800a0d6:	4406      	add	r6, r0
 800a0d8:	4403      	add	r3, r0
 800a0da:	9306      	str	r3, [sp, #24]
 800a0dc:	9b04      	ldr	r3, [sp, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	dd05      	ble.n	800a0ee <_dtoa_r+0x756>
 800a0e2:	9901      	ldr	r1, [sp, #4]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	4648      	mov	r0, r9
 800a0e8:	f000 fcba 	bl	800aa60 <__lshift>
 800a0ec:	9001      	str	r0, [sp, #4]
 800a0ee:	9b06      	ldr	r3, [sp, #24]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	dd05      	ble.n	800a100 <_dtoa_r+0x768>
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	4648      	mov	r0, r9
 800a0fa:	f000 fcb1 	bl	800aa60 <__lshift>
 800a0fe:	4604      	mov	r4, r0
 800a100:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a102:	2b00      	cmp	r3, #0
 800a104:	d060      	beq.n	800a1c8 <_dtoa_r+0x830>
 800a106:	9801      	ldr	r0, [sp, #4]
 800a108:	4621      	mov	r1, r4
 800a10a:	f000 fd15 	bl	800ab38 <__mcmp>
 800a10e:	2800      	cmp	r0, #0
 800a110:	da5a      	bge.n	800a1c8 <_dtoa_r+0x830>
 800a112:	f108 33ff 	add.w	r3, r8, #4294967295
 800a116:	9305      	str	r3, [sp, #20]
 800a118:	9901      	ldr	r1, [sp, #4]
 800a11a:	2300      	movs	r3, #0
 800a11c:	220a      	movs	r2, #10
 800a11e:	4648      	mov	r0, r9
 800a120:	f000 fafa 	bl	800a718 <__multadd>
 800a124:	9b08      	ldr	r3, [sp, #32]
 800a126:	9001      	str	r0, [sp, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 8177 	beq.w	800a41c <_dtoa_r+0xa84>
 800a12e:	4629      	mov	r1, r5
 800a130:	2300      	movs	r3, #0
 800a132:	220a      	movs	r2, #10
 800a134:	4648      	mov	r0, r9
 800a136:	f000 faef 	bl	800a718 <__multadd>
 800a13a:	f1bb 0f00 	cmp.w	fp, #0
 800a13e:	4605      	mov	r5, r0
 800a140:	dc6e      	bgt.n	800a220 <_dtoa_r+0x888>
 800a142:	9b07      	ldr	r3, [sp, #28]
 800a144:	2b02      	cmp	r3, #2
 800a146:	dc48      	bgt.n	800a1da <_dtoa_r+0x842>
 800a148:	e06a      	b.n	800a220 <_dtoa_r+0x888>
 800a14a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a14c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a150:	e739      	b.n	8009fc6 <_dtoa_r+0x62e>
 800a152:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a156:	42a3      	cmp	r3, r4
 800a158:	db07      	blt.n	800a16a <_dtoa_r+0x7d2>
 800a15a:	f1ba 0f00 	cmp.w	sl, #0
 800a15e:	eba3 0404 	sub.w	r4, r3, r4
 800a162:	db0b      	blt.n	800a17c <_dtoa_r+0x7e4>
 800a164:	9e04      	ldr	r6, [sp, #16]
 800a166:	4652      	mov	r2, sl
 800a168:	e72f      	b.n	8009fca <_dtoa_r+0x632>
 800a16a:	1ae2      	subs	r2, r4, r3
 800a16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a16e:	9e04      	ldr	r6, [sp, #16]
 800a170:	4413      	add	r3, r2
 800a172:	930a      	str	r3, [sp, #40]	@ 0x28
 800a174:	4652      	mov	r2, sl
 800a176:	4623      	mov	r3, r4
 800a178:	2400      	movs	r4, #0
 800a17a:	e726      	b.n	8009fca <_dtoa_r+0x632>
 800a17c:	9a04      	ldr	r2, [sp, #16]
 800a17e:	eba2 060a 	sub.w	r6, r2, sl
 800a182:	2200      	movs	r2, #0
 800a184:	e721      	b.n	8009fca <_dtoa_r+0x632>
 800a186:	9e04      	ldr	r6, [sp, #16]
 800a188:	9d08      	ldr	r5, [sp, #32]
 800a18a:	461c      	mov	r4, r3
 800a18c:	e72a      	b.n	8009fe4 <_dtoa_r+0x64c>
 800a18e:	9a01      	ldr	r2, [sp, #4]
 800a190:	9205      	str	r2, [sp, #20]
 800a192:	e752      	b.n	800a03a <_dtoa_r+0x6a2>
 800a194:	9901      	ldr	r1, [sp, #4]
 800a196:	461a      	mov	r2, r3
 800a198:	e751      	b.n	800a03e <_dtoa_r+0x6a6>
 800a19a:	9b05      	ldr	r3, [sp, #20]
 800a19c:	9301      	str	r3, [sp, #4]
 800a19e:	e752      	b.n	800a046 <_dtoa_r+0x6ae>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	e77b      	b.n	800a09c <_dtoa_r+0x704>
 800a1a4:	9b02      	ldr	r3, [sp, #8]
 800a1a6:	e779      	b.n	800a09c <_dtoa_r+0x704>
 800a1a8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a1aa:	e778      	b.n	800a09e <_dtoa_r+0x706>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1b0:	e779      	b.n	800a0a6 <_dtoa_r+0x70e>
 800a1b2:	d093      	beq.n	800a0dc <_dtoa_r+0x744>
 800a1b4:	9b04      	ldr	r3, [sp, #16]
 800a1b6:	321c      	adds	r2, #28
 800a1b8:	4413      	add	r3, r2
 800a1ba:	9304      	str	r3, [sp, #16]
 800a1bc:	9b06      	ldr	r3, [sp, #24]
 800a1be:	4416      	add	r6, r2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	e78a      	b.n	800a0da <_dtoa_r+0x742>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	e7f5      	b.n	800a1b4 <_dtoa_r+0x81c>
 800a1c8:	f1ba 0f00 	cmp.w	sl, #0
 800a1cc:	f8cd 8014 	str.w	r8, [sp, #20]
 800a1d0:	46d3      	mov	fp, sl
 800a1d2:	dc21      	bgt.n	800a218 <_dtoa_r+0x880>
 800a1d4:	9b07      	ldr	r3, [sp, #28]
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	dd1e      	ble.n	800a218 <_dtoa_r+0x880>
 800a1da:	f1bb 0f00 	cmp.w	fp, #0
 800a1de:	f47f addc 	bne.w	8009d9a <_dtoa_r+0x402>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	465b      	mov	r3, fp
 800a1e6:	2205      	movs	r2, #5
 800a1e8:	4648      	mov	r0, r9
 800a1ea:	f000 fa95 	bl	800a718 <__multadd>
 800a1ee:	4601      	mov	r1, r0
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	9801      	ldr	r0, [sp, #4]
 800a1f4:	f000 fca0 	bl	800ab38 <__mcmp>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	f77f adce 	ble.w	8009d9a <_dtoa_r+0x402>
 800a1fe:	463e      	mov	r6, r7
 800a200:	2331      	movs	r3, #49	@ 0x31
 800a202:	f806 3b01 	strb.w	r3, [r6], #1
 800a206:	9b05      	ldr	r3, [sp, #20]
 800a208:	3301      	adds	r3, #1
 800a20a:	9305      	str	r3, [sp, #20]
 800a20c:	e5c9      	b.n	8009da2 <_dtoa_r+0x40a>
 800a20e:	f8cd 8014 	str.w	r8, [sp, #20]
 800a212:	4654      	mov	r4, sl
 800a214:	4625      	mov	r5, r4
 800a216:	e7f2      	b.n	800a1fe <_dtoa_r+0x866>
 800a218:	9b08      	ldr	r3, [sp, #32]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 8102 	beq.w	800a424 <_dtoa_r+0xa8c>
 800a220:	2e00      	cmp	r6, #0
 800a222:	dd05      	ble.n	800a230 <_dtoa_r+0x898>
 800a224:	4629      	mov	r1, r5
 800a226:	4632      	mov	r2, r6
 800a228:	4648      	mov	r0, r9
 800a22a:	f000 fc19 	bl	800aa60 <__lshift>
 800a22e:	4605      	mov	r5, r0
 800a230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d058      	beq.n	800a2e8 <_dtoa_r+0x950>
 800a236:	6869      	ldr	r1, [r5, #4]
 800a238:	4648      	mov	r0, r9
 800a23a:	f000 fa0b 	bl	800a654 <_Balloc>
 800a23e:	4606      	mov	r6, r0
 800a240:	b928      	cbnz	r0, 800a24e <_dtoa_r+0x8b6>
 800a242:	4b82      	ldr	r3, [pc, #520]	@ (800a44c <_dtoa_r+0xab4>)
 800a244:	4602      	mov	r2, r0
 800a246:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a24a:	f7ff bbbe 	b.w	80099ca <_dtoa_r+0x32>
 800a24e:	692a      	ldr	r2, [r5, #16]
 800a250:	3202      	adds	r2, #2
 800a252:	0092      	lsls	r2, r2, #2
 800a254:	f105 010c 	add.w	r1, r5, #12
 800a258:	300c      	adds	r0, #12
 800a25a:	f7ff fb04 	bl	8009866 <memcpy>
 800a25e:	2201      	movs	r2, #1
 800a260:	4631      	mov	r1, r6
 800a262:	4648      	mov	r0, r9
 800a264:	f000 fbfc 	bl	800aa60 <__lshift>
 800a268:	1c7b      	adds	r3, r7, #1
 800a26a:	9304      	str	r3, [sp, #16]
 800a26c:	eb07 030b 	add.w	r3, r7, fp
 800a270:	9309      	str	r3, [sp, #36]	@ 0x24
 800a272:	9b02      	ldr	r3, [sp, #8]
 800a274:	f003 0301 	and.w	r3, r3, #1
 800a278:	46a8      	mov	r8, r5
 800a27a:	9308      	str	r3, [sp, #32]
 800a27c:	4605      	mov	r5, r0
 800a27e:	9b04      	ldr	r3, [sp, #16]
 800a280:	9801      	ldr	r0, [sp, #4]
 800a282:	4621      	mov	r1, r4
 800a284:	f103 3bff 	add.w	fp, r3, #4294967295
 800a288:	f7ff fafb 	bl	8009882 <quorem>
 800a28c:	4641      	mov	r1, r8
 800a28e:	9002      	str	r0, [sp, #8]
 800a290:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a294:	9801      	ldr	r0, [sp, #4]
 800a296:	f000 fc4f 	bl	800ab38 <__mcmp>
 800a29a:	462a      	mov	r2, r5
 800a29c:	9006      	str	r0, [sp, #24]
 800a29e:	4621      	mov	r1, r4
 800a2a0:	4648      	mov	r0, r9
 800a2a2:	f000 fc65 	bl	800ab70 <__mdiff>
 800a2a6:	68c2      	ldr	r2, [r0, #12]
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	b9fa      	cbnz	r2, 800a2ec <_dtoa_r+0x954>
 800a2ac:	4601      	mov	r1, r0
 800a2ae:	9801      	ldr	r0, [sp, #4]
 800a2b0:	f000 fc42 	bl	800ab38 <__mcmp>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	4648      	mov	r0, r9
 800a2ba:	920a      	str	r2, [sp, #40]	@ 0x28
 800a2bc:	f000 fa0a 	bl	800a6d4 <_Bfree>
 800a2c0:	9b07      	ldr	r3, [sp, #28]
 800a2c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2c4:	9e04      	ldr	r6, [sp, #16]
 800a2c6:	ea42 0103 	orr.w	r1, r2, r3
 800a2ca:	9b08      	ldr	r3, [sp, #32]
 800a2cc:	4319      	orrs	r1, r3
 800a2ce:	d10f      	bne.n	800a2f0 <_dtoa_r+0x958>
 800a2d0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a2d4:	d028      	beq.n	800a328 <_dtoa_r+0x990>
 800a2d6:	9b06      	ldr	r3, [sp, #24]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	dd02      	ble.n	800a2e2 <_dtoa_r+0x94a>
 800a2dc:	9b02      	ldr	r3, [sp, #8]
 800a2de:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a2e2:	f88b a000 	strb.w	sl, [fp]
 800a2e6:	e55e      	b.n	8009da6 <_dtoa_r+0x40e>
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	e7bd      	b.n	800a268 <_dtoa_r+0x8d0>
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	e7e2      	b.n	800a2b6 <_dtoa_r+0x91e>
 800a2f0:	9b06      	ldr	r3, [sp, #24]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	db04      	blt.n	800a300 <_dtoa_r+0x968>
 800a2f6:	9907      	ldr	r1, [sp, #28]
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	9908      	ldr	r1, [sp, #32]
 800a2fc:	430b      	orrs	r3, r1
 800a2fe:	d120      	bne.n	800a342 <_dtoa_r+0x9aa>
 800a300:	2a00      	cmp	r2, #0
 800a302:	ddee      	ble.n	800a2e2 <_dtoa_r+0x94a>
 800a304:	9901      	ldr	r1, [sp, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	4648      	mov	r0, r9
 800a30a:	f000 fba9 	bl	800aa60 <__lshift>
 800a30e:	4621      	mov	r1, r4
 800a310:	9001      	str	r0, [sp, #4]
 800a312:	f000 fc11 	bl	800ab38 <__mcmp>
 800a316:	2800      	cmp	r0, #0
 800a318:	dc03      	bgt.n	800a322 <_dtoa_r+0x98a>
 800a31a:	d1e2      	bne.n	800a2e2 <_dtoa_r+0x94a>
 800a31c:	f01a 0f01 	tst.w	sl, #1
 800a320:	d0df      	beq.n	800a2e2 <_dtoa_r+0x94a>
 800a322:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a326:	d1d9      	bne.n	800a2dc <_dtoa_r+0x944>
 800a328:	2339      	movs	r3, #57	@ 0x39
 800a32a:	f88b 3000 	strb.w	r3, [fp]
 800a32e:	4633      	mov	r3, r6
 800a330:	461e      	mov	r6, r3
 800a332:	3b01      	subs	r3, #1
 800a334:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a338:	2a39      	cmp	r2, #57	@ 0x39
 800a33a:	d052      	beq.n	800a3e2 <_dtoa_r+0xa4a>
 800a33c:	3201      	adds	r2, #1
 800a33e:	701a      	strb	r2, [r3, #0]
 800a340:	e531      	b.n	8009da6 <_dtoa_r+0x40e>
 800a342:	2a00      	cmp	r2, #0
 800a344:	dd07      	ble.n	800a356 <_dtoa_r+0x9be>
 800a346:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a34a:	d0ed      	beq.n	800a328 <_dtoa_r+0x990>
 800a34c:	f10a 0301 	add.w	r3, sl, #1
 800a350:	f88b 3000 	strb.w	r3, [fp]
 800a354:	e527      	b.n	8009da6 <_dtoa_r+0x40e>
 800a356:	9b04      	ldr	r3, [sp, #16]
 800a358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a35a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a35e:	4293      	cmp	r3, r2
 800a360:	d029      	beq.n	800a3b6 <_dtoa_r+0xa1e>
 800a362:	9901      	ldr	r1, [sp, #4]
 800a364:	2300      	movs	r3, #0
 800a366:	220a      	movs	r2, #10
 800a368:	4648      	mov	r0, r9
 800a36a:	f000 f9d5 	bl	800a718 <__multadd>
 800a36e:	45a8      	cmp	r8, r5
 800a370:	9001      	str	r0, [sp, #4]
 800a372:	f04f 0300 	mov.w	r3, #0
 800a376:	f04f 020a 	mov.w	r2, #10
 800a37a:	4641      	mov	r1, r8
 800a37c:	4648      	mov	r0, r9
 800a37e:	d107      	bne.n	800a390 <_dtoa_r+0x9f8>
 800a380:	f000 f9ca 	bl	800a718 <__multadd>
 800a384:	4680      	mov	r8, r0
 800a386:	4605      	mov	r5, r0
 800a388:	9b04      	ldr	r3, [sp, #16]
 800a38a:	3301      	adds	r3, #1
 800a38c:	9304      	str	r3, [sp, #16]
 800a38e:	e776      	b.n	800a27e <_dtoa_r+0x8e6>
 800a390:	f000 f9c2 	bl	800a718 <__multadd>
 800a394:	4629      	mov	r1, r5
 800a396:	4680      	mov	r8, r0
 800a398:	2300      	movs	r3, #0
 800a39a:	220a      	movs	r2, #10
 800a39c:	4648      	mov	r0, r9
 800a39e:	f000 f9bb 	bl	800a718 <__multadd>
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	e7f0      	b.n	800a388 <_dtoa_r+0x9f0>
 800a3a6:	f1bb 0f00 	cmp.w	fp, #0
 800a3aa:	bfcc      	ite	gt
 800a3ac:	465e      	movgt	r6, fp
 800a3ae:	2601      	movle	r6, #1
 800a3b0:	443e      	add	r6, r7
 800a3b2:	f04f 0800 	mov.w	r8, #0
 800a3b6:	9901      	ldr	r1, [sp, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	4648      	mov	r0, r9
 800a3bc:	f000 fb50 	bl	800aa60 <__lshift>
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	9001      	str	r0, [sp, #4]
 800a3c4:	f000 fbb8 	bl	800ab38 <__mcmp>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	dcb0      	bgt.n	800a32e <_dtoa_r+0x996>
 800a3cc:	d102      	bne.n	800a3d4 <_dtoa_r+0xa3c>
 800a3ce:	f01a 0f01 	tst.w	sl, #1
 800a3d2:	d1ac      	bne.n	800a32e <_dtoa_r+0x996>
 800a3d4:	4633      	mov	r3, r6
 800a3d6:	461e      	mov	r6, r3
 800a3d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3dc:	2a30      	cmp	r2, #48	@ 0x30
 800a3de:	d0fa      	beq.n	800a3d6 <_dtoa_r+0xa3e>
 800a3e0:	e4e1      	b.n	8009da6 <_dtoa_r+0x40e>
 800a3e2:	429f      	cmp	r7, r3
 800a3e4:	d1a4      	bne.n	800a330 <_dtoa_r+0x998>
 800a3e6:	9b05      	ldr	r3, [sp, #20]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	9305      	str	r3, [sp, #20]
 800a3ec:	2331      	movs	r3, #49	@ 0x31
 800a3ee:	703b      	strb	r3, [r7, #0]
 800a3f0:	e4d9      	b.n	8009da6 <_dtoa_r+0x40e>
 800a3f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a3f4:	4f16      	ldr	r7, [pc, #88]	@ (800a450 <_dtoa_r+0xab8>)
 800a3f6:	b11b      	cbz	r3, 800a400 <_dtoa_r+0xa68>
 800a3f8:	f107 0308 	add.w	r3, r7, #8
 800a3fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a3fe:	6013      	str	r3, [r2, #0]
 800a400:	4638      	mov	r0, r7
 800a402:	b011      	add	sp, #68	@ 0x44
 800a404:	ecbd 8b02 	vpop	{d8}
 800a408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40c:	9b07      	ldr	r3, [sp, #28]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	f77f ae2c 	ble.w	800a06c <_dtoa_r+0x6d4>
 800a414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a416:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a418:	2001      	movs	r0, #1
 800a41a:	e64c      	b.n	800a0b6 <_dtoa_r+0x71e>
 800a41c:	f1bb 0f00 	cmp.w	fp, #0
 800a420:	f77f aed8 	ble.w	800a1d4 <_dtoa_r+0x83c>
 800a424:	463e      	mov	r6, r7
 800a426:	9801      	ldr	r0, [sp, #4]
 800a428:	4621      	mov	r1, r4
 800a42a:	f7ff fa2a 	bl	8009882 <quorem>
 800a42e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a432:	f806 ab01 	strb.w	sl, [r6], #1
 800a436:	1bf2      	subs	r2, r6, r7
 800a438:	4593      	cmp	fp, r2
 800a43a:	ddb4      	ble.n	800a3a6 <_dtoa_r+0xa0e>
 800a43c:	9901      	ldr	r1, [sp, #4]
 800a43e:	2300      	movs	r3, #0
 800a440:	220a      	movs	r2, #10
 800a442:	4648      	mov	r0, r9
 800a444:	f000 f968 	bl	800a718 <__multadd>
 800a448:	9001      	str	r0, [sp, #4]
 800a44a:	e7ec      	b.n	800a426 <_dtoa_r+0xa8e>
 800a44c:	0800b9f4 	.word	0x0800b9f4
 800a450:	0800b978 	.word	0x0800b978

0800a454 <_free_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4605      	mov	r5, r0
 800a458:	2900      	cmp	r1, #0
 800a45a:	d041      	beq.n	800a4e0 <_free_r+0x8c>
 800a45c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a460:	1f0c      	subs	r4, r1, #4
 800a462:	2b00      	cmp	r3, #0
 800a464:	bfb8      	it	lt
 800a466:	18e4      	addlt	r4, r4, r3
 800a468:	f000 f8e8 	bl	800a63c <__malloc_lock>
 800a46c:	4a1d      	ldr	r2, [pc, #116]	@ (800a4e4 <_free_r+0x90>)
 800a46e:	6813      	ldr	r3, [r2, #0]
 800a470:	b933      	cbnz	r3, 800a480 <_free_r+0x2c>
 800a472:	6063      	str	r3, [r4, #4]
 800a474:	6014      	str	r4, [r2, #0]
 800a476:	4628      	mov	r0, r5
 800a478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a47c:	f000 b8e4 	b.w	800a648 <__malloc_unlock>
 800a480:	42a3      	cmp	r3, r4
 800a482:	d908      	bls.n	800a496 <_free_r+0x42>
 800a484:	6820      	ldr	r0, [r4, #0]
 800a486:	1821      	adds	r1, r4, r0
 800a488:	428b      	cmp	r3, r1
 800a48a:	bf01      	itttt	eq
 800a48c:	6819      	ldreq	r1, [r3, #0]
 800a48e:	685b      	ldreq	r3, [r3, #4]
 800a490:	1809      	addeq	r1, r1, r0
 800a492:	6021      	streq	r1, [r4, #0]
 800a494:	e7ed      	b.n	800a472 <_free_r+0x1e>
 800a496:	461a      	mov	r2, r3
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	b10b      	cbz	r3, 800a4a0 <_free_r+0x4c>
 800a49c:	42a3      	cmp	r3, r4
 800a49e:	d9fa      	bls.n	800a496 <_free_r+0x42>
 800a4a0:	6811      	ldr	r1, [r2, #0]
 800a4a2:	1850      	adds	r0, r2, r1
 800a4a4:	42a0      	cmp	r0, r4
 800a4a6:	d10b      	bne.n	800a4c0 <_free_r+0x6c>
 800a4a8:	6820      	ldr	r0, [r4, #0]
 800a4aa:	4401      	add	r1, r0
 800a4ac:	1850      	adds	r0, r2, r1
 800a4ae:	4283      	cmp	r3, r0
 800a4b0:	6011      	str	r1, [r2, #0]
 800a4b2:	d1e0      	bne.n	800a476 <_free_r+0x22>
 800a4b4:	6818      	ldr	r0, [r3, #0]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	6053      	str	r3, [r2, #4]
 800a4ba:	4408      	add	r0, r1
 800a4bc:	6010      	str	r0, [r2, #0]
 800a4be:	e7da      	b.n	800a476 <_free_r+0x22>
 800a4c0:	d902      	bls.n	800a4c8 <_free_r+0x74>
 800a4c2:	230c      	movs	r3, #12
 800a4c4:	602b      	str	r3, [r5, #0]
 800a4c6:	e7d6      	b.n	800a476 <_free_r+0x22>
 800a4c8:	6820      	ldr	r0, [r4, #0]
 800a4ca:	1821      	adds	r1, r4, r0
 800a4cc:	428b      	cmp	r3, r1
 800a4ce:	bf04      	itt	eq
 800a4d0:	6819      	ldreq	r1, [r3, #0]
 800a4d2:	685b      	ldreq	r3, [r3, #4]
 800a4d4:	6063      	str	r3, [r4, #4]
 800a4d6:	bf04      	itt	eq
 800a4d8:	1809      	addeq	r1, r1, r0
 800a4da:	6021      	streq	r1, [r4, #0]
 800a4dc:	6054      	str	r4, [r2, #4]
 800a4de:	e7ca      	b.n	800a476 <_free_r+0x22>
 800a4e0:	bd38      	pop	{r3, r4, r5, pc}
 800a4e2:	bf00      	nop
 800a4e4:	200055c4 	.word	0x200055c4

0800a4e8 <malloc>:
 800a4e8:	4b02      	ldr	r3, [pc, #8]	@ (800a4f4 <malloc+0xc>)
 800a4ea:	4601      	mov	r1, r0
 800a4ec:	6818      	ldr	r0, [r3, #0]
 800a4ee:	f000 b825 	b.w	800a53c <_malloc_r>
 800a4f2:	bf00      	nop
 800a4f4:	2000001c 	.word	0x2000001c

0800a4f8 <sbrk_aligned>:
 800a4f8:	b570      	push	{r4, r5, r6, lr}
 800a4fa:	4e0f      	ldr	r6, [pc, #60]	@ (800a538 <sbrk_aligned+0x40>)
 800a4fc:	460c      	mov	r4, r1
 800a4fe:	6831      	ldr	r1, [r6, #0]
 800a500:	4605      	mov	r5, r0
 800a502:	b911      	cbnz	r1, 800a50a <sbrk_aligned+0x12>
 800a504:	f000 fe3e 	bl	800b184 <_sbrk_r>
 800a508:	6030      	str	r0, [r6, #0]
 800a50a:	4621      	mov	r1, r4
 800a50c:	4628      	mov	r0, r5
 800a50e:	f000 fe39 	bl	800b184 <_sbrk_r>
 800a512:	1c43      	adds	r3, r0, #1
 800a514:	d103      	bne.n	800a51e <sbrk_aligned+0x26>
 800a516:	f04f 34ff 	mov.w	r4, #4294967295
 800a51a:	4620      	mov	r0, r4
 800a51c:	bd70      	pop	{r4, r5, r6, pc}
 800a51e:	1cc4      	adds	r4, r0, #3
 800a520:	f024 0403 	bic.w	r4, r4, #3
 800a524:	42a0      	cmp	r0, r4
 800a526:	d0f8      	beq.n	800a51a <sbrk_aligned+0x22>
 800a528:	1a21      	subs	r1, r4, r0
 800a52a:	4628      	mov	r0, r5
 800a52c:	f000 fe2a 	bl	800b184 <_sbrk_r>
 800a530:	3001      	adds	r0, #1
 800a532:	d1f2      	bne.n	800a51a <sbrk_aligned+0x22>
 800a534:	e7ef      	b.n	800a516 <sbrk_aligned+0x1e>
 800a536:	bf00      	nop
 800a538:	200055c0 	.word	0x200055c0

0800a53c <_malloc_r>:
 800a53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a540:	1ccd      	adds	r5, r1, #3
 800a542:	f025 0503 	bic.w	r5, r5, #3
 800a546:	3508      	adds	r5, #8
 800a548:	2d0c      	cmp	r5, #12
 800a54a:	bf38      	it	cc
 800a54c:	250c      	movcc	r5, #12
 800a54e:	2d00      	cmp	r5, #0
 800a550:	4606      	mov	r6, r0
 800a552:	db01      	blt.n	800a558 <_malloc_r+0x1c>
 800a554:	42a9      	cmp	r1, r5
 800a556:	d904      	bls.n	800a562 <_malloc_r+0x26>
 800a558:	230c      	movs	r3, #12
 800a55a:	6033      	str	r3, [r6, #0]
 800a55c:	2000      	movs	r0, #0
 800a55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a562:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a638 <_malloc_r+0xfc>
 800a566:	f000 f869 	bl	800a63c <__malloc_lock>
 800a56a:	f8d8 3000 	ldr.w	r3, [r8]
 800a56e:	461c      	mov	r4, r3
 800a570:	bb44      	cbnz	r4, 800a5c4 <_malloc_r+0x88>
 800a572:	4629      	mov	r1, r5
 800a574:	4630      	mov	r0, r6
 800a576:	f7ff ffbf 	bl	800a4f8 <sbrk_aligned>
 800a57a:	1c43      	adds	r3, r0, #1
 800a57c:	4604      	mov	r4, r0
 800a57e:	d158      	bne.n	800a632 <_malloc_r+0xf6>
 800a580:	f8d8 4000 	ldr.w	r4, [r8]
 800a584:	4627      	mov	r7, r4
 800a586:	2f00      	cmp	r7, #0
 800a588:	d143      	bne.n	800a612 <_malloc_r+0xd6>
 800a58a:	2c00      	cmp	r4, #0
 800a58c:	d04b      	beq.n	800a626 <_malloc_r+0xea>
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	4639      	mov	r1, r7
 800a592:	4630      	mov	r0, r6
 800a594:	eb04 0903 	add.w	r9, r4, r3
 800a598:	f000 fdf4 	bl	800b184 <_sbrk_r>
 800a59c:	4581      	cmp	r9, r0
 800a59e:	d142      	bne.n	800a626 <_malloc_r+0xea>
 800a5a0:	6821      	ldr	r1, [r4, #0]
 800a5a2:	1a6d      	subs	r5, r5, r1
 800a5a4:	4629      	mov	r1, r5
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	f7ff ffa6 	bl	800a4f8 <sbrk_aligned>
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	d03a      	beq.n	800a626 <_malloc_r+0xea>
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	442b      	add	r3, r5
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	bb62      	cbnz	r2, 800a618 <_malloc_r+0xdc>
 800a5be:	f8c8 7000 	str.w	r7, [r8]
 800a5c2:	e00f      	b.n	800a5e4 <_malloc_r+0xa8>
 800a5c4:	6822      	ldr	r2, [r4, #0]
 800a5c6:	1b52      	subs	r2, r2, r5
 800a5c8:	d420      	bmi.n	800a60c <_malloc_r+0xd0>
 800a5ca:	2a0b      	cmp	r2, #11
 800a5cc:	d917      	bls.n	800a5fe <_malloc_r+0xc2>
 800a5ce:	1961      	adds	r1, r4, r5
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	6025      	str	r5, [r4, #0]
 800a5d4:	bf18      	it	ne
 800a5d6:	6059      	strne	r1, [r3, #4]
 800a5d8:	6863      	ldr	r3, [r4, #4]
 800a5da:	bf08      	it	eq
 800a5dc:	f8c8 1000 	streq.w	r1, [r8]
 800a5e0:	5162      	str	r2, [r4, r5]
 800a5e2:	604b      	str	r3, [r1, #4]
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	f000 f82f 	bl	800a648 <__malloc_unlock>
 800a5ea:	f104 000b 	add.w	r0, r4, #11
 800a5ee:	1d23      	adds	r3, r4, #4
 800a5f0:	f020 0007 	bic.w	r0, r0, #7
 800a5f4:	1ac2      	subs	r2, r0, r3
 800a5f6:	bf1c      	itt	ne
 800a5f8:	1a1b      	subne	r3, r3, r0
 800a5fa:	50a3      	strne	r3, [r4, r2]
 800a5fc:	e7af      	b.n	800a55e <_malloc_r+0x22>
 800a5fe:	6862      	ldr	r2, [r4, #4]
 800a600:	42a3      	cmp	r3, r4
 800a602:	bf0c      	ite	eq
 800a604:	f8c8 2000 	streq.w	r2, [r8]
 800a608:	605a      	strne	r2, [r3, #4]
 800a60a:	e7eb      	b.n	800a5e4 <_malloc_r+0xa8>
 800a60c:	4623      	mov	r3, r4
 800a60e:	6864      	ldr	r4, [r4, #4]
 800a610:	e7ae      	b.n	800a570 <_malloc_r+0x34>
 800a612:	463c      	mov	r4, r7
 800a614:	687f      	ldr	r7, [r7, #4]
 800a616:	e7b6      	b.n	800a586 <_malloc_r+0x4a>
 800a618:	461a      	mov	r2, r3
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	42a3      	cmp	r3, r4
 800a61e:	d1fb      	bne.n	800a618 <_malloc_r+0xdc>
 800a620:	2300      	movs	r3, #0
 800a622:	6053      	str	r3, [r2, #4]
 800a624:	e7de      	b.n	800a5e4 <_malloc_r+0xa8>
 800a626:	230c      	movs	r3, #12
 800a628:	6033      	str	r3, [r6, #0]
 800a62a:	4630      	mov	r0, r6
 800a62c:	f000 f80c 	bl	800a648 <__malloc_unlock>
 800a630:	e794      	b.n	800a55c <_malloc_r+0x20>
 800a632:	6005      	str	r5, [r0, #0]
 800a634:	e7d6      	b.n	800a5e4 <_malloc_r+0xa8>
 800a636:	bf00      	nop
 800a638:	200055c4 	.word	0x200055c4

0800a63c <__malloc_lock>:
 800a63c:	4801      	ldr	r0, [pc, #4]	@ (800a644 <__malloc_lock+0x8>)
 800a63e:	f7ff b910 	b.w	8009862 <__retarget_lock_acquire_recursive>
 800a642:	bf00      	nop
 800a644:	200055bc 	.word	0x200055bc

0800a648 <__malloc_unlock>:
 800a648:	4801      	ldr	r0, [pc, #4]	@ (800a650 <__malloc_unlock+0x8>)
 800a64a:	f7ff b90b 	b.w	8009864 <__retarget_lock_release_recursive>
 800a64e:	bf00      	nop
 800a650:	200055bc 	.word	0x200055bc

0800a654 <_Balloc>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	69c6      	ldr	r6, [r0, #28]
 800a658:	4604      	mov	r4, r0
 800a65a:	460d      	mov	r5, r1
 800a65c:	b976      	cbnz	r6, 800a67c <_Balloc+0x28>
 800a65e:	2010      	movs	r0, #16
 800a660:	f7ff ff42 	bl	800a4e8 <malloc>
 800a664:	4602      	mov	r2, r0
 800a666:	61e0      	str	r0, [r4, #28]
 800a668:	b920      	cbnz	r0, 800a674 <_Balloc+0x20>
 800a66a:	4b18      	ldr	r3, [pc, #96]	@ (800a6cc <_Balloc+0x78>)
 800a66c:	4818      	ldr	r0, [pc, #96]	@ (800a6d0 <_Balloc+0x7c>)
 800a66e:	216b      	movs	r1, #107	@ 0x6b
 800a670:	f000 fd98 	bl	800b1a4 <__assert_func>
 800a674:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a678:	6006      	str	r6, [r0, #0]
 800a67a:	60c6      	str	r6, [r0, #12]
 800a67c:	69e6      	ldr	r6, [r4, #28]
 800a67e:	68f3      	ldr	r3, [r6, #12]
 800a680:	b183      	cbz	r3, 800a6a4 <_Balloc+0x50>
 800a682:	69e3      	ldr	r3, [r4, #28]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a68a:	b9b8      	cbnz	r0, 800a6bc <_Balloc+0x68>
 800a68c:	2101      	movs	r1, #1
 800a68e:	fa01 f605 	lsl.w	r6, r1, r5
 800a692:	1d72      	adds	r2, r6, #5
 800a694:	0092      	lsls	r2, r2, #2
 800a696:	4620      	mov	r0, r4
 800a698:	f000 fda2 	bl	800b1e0 <_calloc_r>
 800a69c:	b160      	cbz	r0, 800a6b8 <_Balloc+0x64>
 800a69e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6a2:	e00e      	b.n	800a6c2 <_Balloc+0x6e>
 800a6a4:	2221      	movs	r2, #33	@ 0x21
 800a6a6:	2104      	movs	r1, #4
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 fd99 	bl	800b1e0 <_calloc_r>
 800a6ae:	69e3      	ldr	r3, [r4, #28]
 800a6b0:	60f0      	str	r0, [r6, #12]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d1e4      	bne.n	800a682 <_Balloc+0x2e>
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	bd70      	pop	{r4, r5, r6, pc}
 800a6bc:	6802      	ldr	r2, [r0, #0]
 800a6be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6c8:	e7f7      	b.n	800a6ba <_Balloc+0x66>
 800a6ca:	bf00      	nop
 800a6cc:	0800b985 	.word	0x0800b985
 800a6d0:	0800ba05 	.word	0x0800ba05

0800a6d4 <_Bfree>:
 800a6d4:	b570      	push	{r4, r5, r6, lr}
 800a6d6:	69c6      	ldr	r6, [r0, #28]
 800a6d8:	4605      	mov	r5, r0
 800a6da:	460c      	mov	r4, r1
 800a6dc:	b976      	cbnz	r6, 800a6fc <_Bfree+0x28>
 800a6de:	2010      	movs	r0, #16
 800a6e0:	f7ff ff02 	bl	800a4e8 <malloc>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	61e8      	str	r0, [r5, #28]
 800a6e8:	b920      	cbnz	r0, 800a6f4 <_Bfree+0x20>
 800a6ea:	4b09      	ldr	r3, [pc, #36]	@ (800a710 <_Bfree+0x3c>)
 800a6ec:	4809      	ldr	r0, [pc, #36]	@ (800a714 <_Bfree+0x40>)
 800a6ee:	218f      	movs	r1, #143	@ 0x8f
 800a6f0:	f000 fd58 	bl	800b1a4 <__assert_func>
 800a6f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6f8:	6006      	str	r6, [r0, #0]
 800a6fa:	60c6      	str	r6, [r0, #12]
 800a6fc:	b13c      	cbz	r4, 800a70e <_Bfree+0x3a>
 800a6fe:	69eb      	ldr	r3, [r5, #28]
 800a700:	6862      	ldr	r2, [r4, #4]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a708:	6021      	str	r1, [r4, #0]
 800a70a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a70e:	bd70      	pop	{r4, r5, r6, pc}
 800a710:	0800b985 	.word	0x0800b985
 800a714:	0800ba05 	.word	0x0800ba05

0800a718 <__multadd>:
 800a718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71c:	690d      	ldr	r5, [r1, #16]
 800a71e:	4607      	mov	r7, r0
 800a720:	460c      	mov	r4, r1
 800a722:	461e      	mov	r6, r3
 800a724:	f101 0c14 	add.w	ip, r1, #20
 800a728:	2000      	movs	r0, #0
 800a72a:	f8dc 3000 	ldr.w	r3, [ip]
 800a72e:	b299      	uxth	r1, r3
 800a730:	fb02 6101 	mla	r1, r2, r1, r6
 800a734:	0c1e      	lsrs	r6, r3, #16
 800a736:	0c0b      	lsrs	r3, r1, #16
 800a738:	fb02 3306 	mla	r3, r2, r6, r3
 800a73c:	b289      	uxth	r1, r1
 800a73e:	3001      	adds	r0, #1
 800a740:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a744:	4285      	cmp	r5, r0
 800a746:	f84c 1b04 	str.w	r1, [ip], #4
 800a74a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a74e:	dcec      	bgt.n	800a72a <__multadd+0x12>
 800a750:	b30e      	cbz	r6, 800a796 <__multadd+0x7e>
 800a752:	68a3      	ldr	r3, [r4, #8]
 800a754:	42ab      	cmp	r3, r5
 800a756:	dc19      	bgt.n	800a78c <__multadd+0x74>
 800a758:	6861      	ldr	r1, [r4, #4]
 800a75a:	4638      	mov	r0, r7
 800a75c:	3101      	adds	r1, #1
 800a75e:	f7ff ff79 	bl	800a654 <_Balloc>
 800a762:	4680      	mov	r8, r0
 800a764:	b928      	cbnz	r0, 800a772 <__multadd+0x5a>
 800a766:	4602      	mov	r2, r0
 800a768:	4b0c      	ldr	r3, [pc, #48]	@ (800a79c <__multadd+0x84>)
 800a76a:	480d      	ldr	r0, [pc, #52]	@ (800a7a0 <__multadd+0x88>)
 800a76c:	21ba      	movs	r1, #186	@ 0xba
 800a76e:	f000 fd19 	bl	800b1a4 <__assert_func>
 800a772:	6922      	ldr	r2, [r4, #16]
 800a774:	3202      	adds	r2, #2
 800a776:	f104 010c 	add.w	r1, r4, #12
 800a77a:	0092      	lsls	r2, r2, #2
 800a77c:	300c      	adds	r0, #12
 800a77e:	f7ff f872 	bl	8009866 <memcpy>
 800a782:	4621      	mov	r1, r4
 800a784:	4638      	mov	r0, r7
 800a786:	f7ff ffa5 	bl	800a6d4 <_Bfree>
 800a78a:	4644      	mov	r4, r8
 800a78c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a790:	3501      	adds	r5, #1
 800a792:	615e      	str	r6, [r3, #20]
 800a794:	6125      	str	r5, [r4, #16]
 800a796:	4620      	mov	r0, r4
 800a798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a79c:	0800b9f4 	.word	0x0800b9f4
 800a7a0:	0800ba05 	.word	0x0800ba05

0800a7a4 <__hi0bits>:
 800a7a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	bf36      	itet	cc
 800a7ac:	0403      	lslcc	r3, r0, #16
 800a7ae:	2000      	movcs	r0, #0
 800a7b0:	2010      	movcc	r0, #16
 800a7b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7b6:	bf3c      	itt	cc
 800a7b8:	021b      	lslcc	r3, r3, #8
 800a7ba:	3008      	addcc	r0, #8
 800a7bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7c0:	bf3c      	itt	cc
 800a7c2:	011b      	lslcc	r3, r3, #4
 800a7c4:	3004      	addcc	r0, #4
 800a7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ca:	bf3c      	itt	cc
 800a7cc:	009b      	lslcc	r3, r3, #2
 800a7ce:	3002      	addcc	r0, #2
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	db05      	blt.n	800a7e0 <__hi0bits+0x3c>
 800a7d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a7d8:	f100 0001 	add.w	r0, r0, #1
 800a7dc:	bf08      	it	eq
 800a7de:	2020      	moveq	r0, #32
 800a7e0:	4770      	bx	lr

0800a7e2 <__lo0bits>:
 800a7e2:	6803      	ldr	r3, [r0, #0]
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	f013 0007 	ands.w	r0, r3, #7
 800a7ea:	d00b      	beq.n	800a804 <__lo0bits+0x22>
 800a7ec:	07d9      	lsls	r1, r3, #31
 800a7ee:	d421      	bmi.n	800a834 <__lo0bits+0x52>
 800a7f0:	0798      	lsls	r0, r3, #30
 800a7f2:	bf49      	itett	mi
 800a7f4:	085b      	lsrmi	r3, r3, #1
 800a7f6:	089b      	lsrpl	r3, r3, #2
 800a7f8:	2001      	movmi	r0, #1
 800a7fa:	6013      	strmi	r3, [r2, #0]
 800a7fc:	bf5c      	itt	pl
 800a7fe:	6013      	strpl	r3, [r2, #0]
 800a800:	2002      	movpl	r0, #2
 800a802:	4770      	bx	lr
 800a804:	b299      	uxth	r1, r3
 800a806:	b909      	cbnz	r1, 800a80c <__lo0bits+0x2a>
 800a808:	0c1b      	lsrs	r3, r3, #16
 800a80a:	2010      	movs	r0, #16
 800a80c:	b2d9      	uxtb	r1, r3
 800a80e:	b909      	cbnz	r1, 800a814 <__lo0bits+0x32>
 800a810:	3008      	adds	r0, #8
 800a812:	0a1b      	lsrs	r3, r3, #8
 800a814:	0719      	lsls	r1, r3, #28
 800a816:	bf04      	itt	eq
 800a818:	091b      	lsreq	r3, r3, #4
 800a81a:	3004      	addeq	r0, #4
 800a81c:	0799      	lsls	r1, r3, #30
 800a81e:	bf04      	itt	eq
 800a820:	089b      	lsreq	r3, r3, #2
 800a822:	3002      	addeq	r0, #2
 800a824:	07d9      	lsls	r1, r3, #31
 800a826:	d403      	bmi.n	800a830 <__lo0bits+0x4e>
 800a828:	085b      	lsrs	r3, r3, #1
 800a82a:	f100 0001 	add.w	r0, r0, #1
 800a82e:	d003      	beq.n	800a838 <__lo0bits+0x56>
 800a830:	6013      	str	r3, [r2, #0]
 800a832:	4770      	bx	lr
 800a834:	2000      	movs	r0, #0
 800a836:	4770      	bx	lr
 800a838:	2020      	movs	r0, #32
 800a83a:	4770      	bx	lr

0800a83c <__i2b>:
 800a83c:	b510      	push	{r4, lr}
 800a83e:	460c      	mov	r4, r1
 800a840:	2101      	movs	r1, #1
 800a842:	f7ff ff07 	bl	800a654 <_Balloc>
 800a846:	4602      	mov	r2, r0
 800a848:	b928      	cbnz	r0, 800a856 <__i2b+0x1a>
 800a84a:	4b05      	ldr	r3, [pc, #20]	@ (800a860 <__i2b+0x24>)
 800a84c:	4805      	ldr	r0, [pc, #20]	@ (800a864 <__i2b+0x28>)
 800a84e:	f240 1145 	movw	r1, #325	@ 0x145
 800a852:	f000 fca7 	bl	800b1a4 <__assert_func>
 800a856:	2301      	movs	r3, #1
 800a858:	6144      	str	r4, [r0, #20]
 800a85a:	6103      	str	r3, [r0, #16]
 800a85c:	bd10      	pop	{r4, pc}
 800a85e:	bf00      	nop
 800a860:	0800b9f4 	.word	0x0800b9f4
 800a864:	0800ba05 	.word	0x0800ba05

0800a868 <__multiply>:
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	4617      	mov	r7, r2
 800a86e:	690a      	ldr	r2, [r1, #16]
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	429a      	cmp	r2, r3
 800a874:	bfa8      	it	ge
 800a876:	463b      	movge	r3, r7
 800a878:	4689      	mov	r9, r1
 800a87a:	bfa4      	itt	ge
 800a87c:	460f      	movge	r7, r1
 800a87e:	4699      	movge	r9, r3
 800a880:	693d      	ldr	r5, [r7, #16]
 800a882:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	6879      	ldr	r1, [r7, #4]
 800a88a:	eb05 060a 	add.w	r6, r5, sl
 800a88e:	42b3      	cmp	r3, r6
 800a890:	b085      	sub	sp, #20
 800a892:	bfb8      	it	lt
 800a894:	3101      	addlt	r1, #1
 800a896:	f7ff fedd 	bl	800a654 <_Balloc>
 800a89a:	b930      	cbnz	r0, 800a8aa <__multiply+0x42>
 800a89c:	4602      	mov	r2, r0
 800a89e:	4b41      	ldr	r3, [pc, #260]	@ (800a9a4 <__multiply+0x13c>)
 800a8a0:	4841      	ldr	r0, [pc, #260]	@ (800a9a8 <__multiply+0x140>)
 800a8a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a8a6:	f000 fc7d 	bl	800b1a4 <__assert_func>
 800a8aa:	f100 0414 	add.w	r4, r0, #20
 800a8ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a8b2:	4623      	mov	r3, r4
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	4573      	cmp	r3, lr
 800a8b8:	d320      	bcc.n	800a8fc <__multiply+0x94>
 800a8ba:	f107 0814 	add.w	r8, r7, #20
 800a8be:	f109 0114 	add.w	r1, r9, #20
 800a8c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a8c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a8ca:	9302      	str	r3, [sp, #8]
 800a8cc:	1beb      	subs	r3, r5, r7
 800a8ce:	3b15      	subs	r3, #21
 800a8d0:	f023 0303 	bic.w	r3, r3, #3
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	3715      	adds	r7, #21
 800a8d8:	42bd      	cmp	r5, r7
 800a8da:	bf38      	it	cc
 800a8dc:	2304      	movcc	r3, #4
 800a8de:	9301      	str	r3, [sp, #4]
 800a8e0:	9b02      	ldr	r3, [sp, #8]
 800a8e2:	9103      	str	r1, [sp, #12]
 800a8e4:	428b      	cmp	r3, r1
 800a8e6:	d80c      	bhi.n	800a902 <__multiply+0x9a>
 800a8e8:	2e00      	cmp	r6, #0
 800a8ea:	dd03      	ble.n	800a8f4 <__multiply+0x8c>
 800a8ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d055      	beq.n	800a9a0 <__multiply+0x138>
 800a8f4:	6106      	str	r6, [r0, #16]
 800a8f6:	b005      	add	sp, #20
 800a8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fc:	f843 2b04 	str.w	r2, [r3], #4
 800a900:	e7d9      	b.n	800a8b6 <__multiply+0x4e>
 800a902:	f8b1 a000 	ldrh.w	sl, [r1]
 800a906:	f1ba 0f00 	cmp.w	sl, #0
 800a90a:	d01f      	beq.n	800a94c <__multiply+0xe4>
 800a90c:	46c4      	mov	ip, r8
 800a90e:	46a1      	mov	r9, r4
 800a910:	2700      	movs	r7, #0
 800a912:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a916:	f8d9 3000 	ldr.w	r3, [r9]
 800a91a:	fa1f fb82 	uxth.w	fp, r2
 800a91e:	b29b      	uxth	r3, r3
 800a920:	fb0a 330b 	mla	r3, sl, fp, r3
 800a924:	443b      	add	r3, r7
 800a926:	f8d9 7000 	ldr.w	r7, [r9]
 800a92a:	0c12      	lsrs	r2, r2, #16
 800a92c:	0c3f      	lsrs	r7, r7, #16
 800a92e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a932:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a936:	b29b      	uxth	r3, r3
 800a938:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a93c:	4565      	cmp	r5, ip
 800a93e:	f849 3b04 	str.w	r3, [r9], #4
 800a942:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a946:	d8e4      	bhi.n	800a912 <__multiply+0xaa>
 800a948:	9b01      	ldr	r3, [sp, #4]
 800a94a:	50e7      	str	r7, [r4, r3]
 800a94c:	9b03      	ldr	r3, [sp, #12]
 800a94e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a952:	3104      	adds	r1, #4
 800a954:	f1b9 0f00 	cmp.w	r9, #0
 800a958:	d020      	beq.n	800a99c <__multiply+0x134>
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	4647      	mov	r7, r8
 800a95e:	46a4      	mov	ip, r4
 800a960:	f04f 0a00 	mov.w	sl, #0
 800a964:	f8b7 b000 	ldrh.w	fp, [r7]
 800a968:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a96c:	fb09 220b 	mla	r2, r9, fp, r2
 800a970:	4452      	add	r2, sl
 800a972:	b29b      	uxth	r3, r3
 800a974:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a978:	f84c 3b04 	str.w	r3, [ip], #4
 800a97c:	f857 3b04 	ldr.w	r3, [r7], #4
 800a980:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a984:	f8bc 3000 	ldrh.w	r3, [ip]
 800a988:	fb09 330a 	mla	r3, r9, sl, r3
 800a98c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a990:	42bd      	cmp	r5, r7
 800a992:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a996:	d8e5      	bhi.n	800a964 <__multiply+0xfc>
 800a998:	9a01      	ldr	r2, [sp, #4]
 800a99a:	50a3      	str	r3, [r4, r2]
 800a99c:	3404      	adds	r4, #4
 800a99e:	e79f      	b.n	800a8e0 <__multiply+0x78>
 800a9a0:	3e01      	subs	r6, #1
 800a9a2:	e7a1      	b.n	800a8e8 <__multiply+0x80>
 800a9a4:	0800b9f4 	.word	0x0800b9f4
 800a9a8:	0800ba05 	.word	0x0800ba05

0800a9ac <__pow5mult>:
 800a9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b0:	4615      	mov	r5, r2
 800a9b2:	f012 0203 	ands.w	r2, r2, #3
 800a9b6:	4607      	mov	r7, r0
 800a9b8:	460e      	mov	r6, r1
 800a9ba:	d007      	beq.n	800a9cc <__pow5mult+0x20>
 800a9bc:	4c25      	ldr	r4, [pc, #148]	@ (800aa54 <__pow5mult+0xa8>)
 800a9be:	3a01      	subs	r2, #1
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9c6:	f7ff fea7 	bl	800a718 <__multadd>
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	10ad      	asrs	r5, r5, #2
 800a9ce:	d03d      	beq.n	800aa4c <__pow5mult+0xa0>
 800a9d0:	69fc      	ldr	r4, [r7, #28]
 800a9d2:	b97c      	cbnz	r4, 800a9f4 <__pow5mult+0x48>
 800a9d4:	2010      	movs	r0, #16
 800a9d6:	f7ff fd87 	bl	800a4e8 <malloc>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	61f8      	str	r0, [r7, #28]
 800a9de:	b928      	cbnz	r0, 800a9ec <__pow5mult+0x40>
 800a9e0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa58 <__pow5mult+0xac>)
 800a9e2:	481e      	ldr	r0, [pc, #120]	@ (800aa5c <__pow5mult+0xb0>)
 800a9e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a9e8:	f000 fbdc 	bl	800b1a4 <__assert_func>
 800a9ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9f0:	6004      	str	r4, [r0, #0]
 800a9f2:	60c4      	str	r4, [r0, #12]
 800a9f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a9f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9fc:	b94c      	cbnz	r4, 800aa12 <__pow5mult+0x66>
 800a9fe:	f240 2171 	movw	r1, #625	@ 0x271
 800aa02:	4638      	mov	r0, r7
 800aa04:	f7ff ff1a 	bl	800a83c <__i2b>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa0e:	4604      	mov	r4, r0
 800aa10:	6003      	str	r3, [r0, #0]
 800aa12:	f04f 0900 	mov.w	r9, #0
 800aa16:	07eb      	lsls	r3, r5, #31
 800aa18:	d50a      	bpl.n	800aa30 <__pow5mult+0x84>
 800aa1a:	4631      	mov	r1, r6
 800aa1c:	4622      	mov	r2, r4
 800aa1e:	4638      	mov	r0, r7
 800aa20:	f7ff ff22 	bl	800a868 <__multiply>
 800aa24:	4631      	mov	r1, r6
 800aa26:	4680      	mov	r8, r0
 800aa28:	4638      	mov	r0, r7
 800aa2a:	f7ff fe53 	bl	800a6d4 <_Bfree>
 800aa2e:	4646      	mov	r6, r8
 800aa30:	106d      	asrs	r5, r5, #1
 800aa32:	d00b      	beq.n	800aa4c <__pow5mult+0xa0>
 800aa34:	6820      	ldr	r0, [r4, #0]
 800aa36:	b938      	cbnz	r0, 800aa48 <__pow5mult+0x9c>
 800aa38:	4622      	mov	r2, r4
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	f7ff ff13 	bl	800a868 <__multiply>
 800aa42:	6020      	str	r0, [r4, #0]
 800aa44:	f8c0 9000 	str.w	r9, [r0]
 800aa48:	4604      	mov	r4, r0
 800aa4a:	e7e4      	b.n	800aa16 <__pow5mult+0x6a>
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa52:	bf00      	nop
 800aa54:	0800bab8 	.word	0x0800bab8
 800aa58:	0800b985 	.word	0x0800b985
 800aa5c:	0800ba05 	.word	0x0800ba05

0800aa60 <__lshift>:
 800aa60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa64:	460c      	mov	r4, r1
 800aa66:	6849      	ldr	r1, [r1, #4]
 800aa68:	6923      	ldr	r3, [r4, #16]
 800aa6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa6e:	68a3      	ldr	r3, [r4, #8]
 800aa70:	4607      	mov	r7, r0
 800aa72:	4691      	mov	r9, r2
 800aa74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa78:	f108 0601 	add.w	r6, r8, #1
 800aa7c:	42b3      	cmp	r3, r6
 800aa7e:	db0b      	blt.n	800aa98 <__lshift+0x38>
 800aa80:	4638      	mov	r0, r7
 800aa82:	f7ff fde7 	bl	800a654 <_Balloc>
 800aa86:	4605      	mov	r5, r0
 800aa88:	b948      	cbnz	r0, 800aa9e <__lshift+0x3e>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	4b28      	ldr	r3, [pc, #160]	@ (800ab30 <__lshift+0xd0>)
 800aa8e:	4829      	ldr	r0, [pc, #164]	@ (800ab34 <__lshift+0xd4>)
 800aa90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa94:	f000 fb86 	bl	800b1a4 <__assert_func>
 800aa98:	3101      	adds	r1, #1
 800aa9a:	005b      	lsls	r3, r3, #1
 800aa9c:	e7ee      	b.n	800aa7c <__lshift+0x1c>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f100 0114 	add.w	r1, r0, #20
 800aaa4:	f100 0210 	add.w	r2, r0, #16
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	4553      	cmp	r3, sl
 800aaac:	db33      	blt.n	800ab16 <__lshift+0xb6>
 800aaae:	6920      	ldr	r0, [r4, #16]
 800aab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aab4:	f104 0314 	add.w	r3, r4, #20
 800aab8:	f019 091f 	ands.w	r9, r9, #31
 800aabc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aac0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aac4:	d02b      	beq.n	800ab1e <__lshift+0xbe>
 800aac6:	f1c9 0e20 	rsb	lr, r9, #32
 800aaca:	468a      	mov	sl, r1
 800aacc:	2200      	movs	r2, #0
 800aace:	6818      	ldr	r0, [r3, #0]
 800aad0:	fa00 f009 	lsl.w	r0, r0, r9
 800aad4:	4310      	orrs	r0, r2
 800aad6:	f84a 0b04 	str.w	r0, [sl], #4
 800aada:	f853 2b04 	ldr.w	r2, [r3], #4
 800aade:	459c      	cmp	ip, r3
 800aae0:	fa22 f20e 	lsr.w	r2, r2, lr
 800aae4:	d8f3      	bhi.n	800aace <__lshift+0x6e>
 800aae6:	ebac 0304 	sub.w	r3, ip, r4
 800aaea:	3b15      	subs	r3, #21
 800aaec:	f023 0303 	bic.w	r3, r3, #3
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	f104 0015 	add.w	r0, r4, #21
 800aaf6:	4560      	cmp	r0, ip
 800aaf8:	bf88      	it	hi
 800aafa:	2304      	movhi	r3, #4
 800aafc:	50ca      	str	r2, [r1, r3]
 800aafe:	b10a      	cbz	r2, 800ab04 <__lshift+0xa4>
 800ab00:	f108 0602 	add.w	r6, r8, #2
 800ab04:	3e01      	subs	r6, #1
 800ab06:	4638      	mov	r0, r7
 800ab08:	612e      	str	r6, [r5, #16]
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	f7ff fde2 	bl	800a6d4 <_Bfree>
 800ab10:	4628      	mov	r0, r5
 800ab12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab16:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	e7c5      	b.n	800aaaa <__lshift+0x4a>
 800ab1e:	3904      	subs	r1, #4
 800ab20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab24:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab28:	459c      	cmp	ip, r3
 800ab2a:	d8f9      	bhi.n	800ab20 <__lshift+0xc0>
 800ab2c:	e7ea      	b.n	800ab04 <__lshift+0xa4>
 800ab2e:	bf00      	nop
 800ab30:	0800b9f4 	.word	0x0800b9f4
 800ab34:	0800ba05 	.word	0x0800ba05

0800ab38 <__mcmp>:
 800ab38:	690a      	ldr	r2, [r1, #16]
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	6900      	ldr	r0, [r0, #16]
 800ab3e:	1a80      	subs	r0, r0, r2
 800ab40:	b530      	push	{r4, r5, lr}
 800ab42:	d10e      	bne.n	800ab62 <__mcmp+0x2a>
 800ab44:	3314      	adds	r3, #20
 800ab46:	3114      	adds	r1, #20
 800ab48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ab4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ab50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab58:	4295      	cmp	r5, r2
 800ab5a:	d003      	beq.n	800ab64 <__mcmp+0x2c>
 800ab5c:	d205      	bcs.n	800ab6a <__mcmp+0x32>
 800ab5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab62:	bd30      	pop	{r4, r5, pc}
 800ab64:	42a3      	cmp	r3, r4
 800ab66:	d3f3      	bcc.n	800ab50 <__mcmp+0x18>
 800ab68:	e7fb      	b.n	800ab62 <__mcmp+0x2a>
 800ab6a:	2001      	movs	r0, #1
 800ab6c:	e7f9      	b.n	800ab62 <__mcmp+0x2a>
	...

0800ab70 <__mdiff>:
 800ab70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab74:	4689      	mov	r9, r1
 800ab76:	4606      	mov	r6, r0
 800ab78:	4611      	mov	r1, r2
 800ab7a:	4648      	mov	r0, r9
 800ab7c:	4614      	mov	r4, r2
 800ab7e:	f7ff ffdb 	bl	800ab38 <__mcmp>
 800ab82:	1e05      	subs	r5, r0, #0
 800ab84:	d112      	bne.n	800abac <__mdiff+0x3c>
 800ab86:	4629      	mov	r1, r5
 800ab88:	4630      	mov	r0, r6
 800ab8a:	f7ff fd63 	bl	800a654 <_Balloc>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	b928      	cbnz	r0, 800ab9e <__mdiff+0x2e>
 800ab92:	4b3f      	ldr	r3, [pc, #252]	@ (800ac90 <__mdiff+0x120>)
 800ab94:	f240 2137 	movw	r1, #567	@ 0x237
 800ab98:	483e      	ldr	r0, [pc, #248]	@ (800ac94 <__mdiff+0x124>)
 800ab9a:	f000 fb03 	bl	800b1a4 <__assert_func>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aba4:	4610      	mov	r0, r2
 800aba6:	b003      	add	sp, #12
 800aba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abac:	bfbc      	itt	lt
 800abae:	464b      	movlt	r3, r9
 800abb0:	46a1      	movlt	r9, r4
 800abb2:	4630      	mov	r0, r6
 800abb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800abb8:	bfba      	itte	lt
 800abba:	461c      	movlt	r4, r3
 800abbc:	2501      	movlt	r5, #1
 800abbe:	2500      	movge	r5, #0
 800abc0:	f7ff fd48 	bl	800a654 <_Balloc>
 800abc4:	4602      	mov	r2, r0
 800abc6:	b918      	cbnz	r0, 800abd0 <__mdiff+0x60>
 800abc8:	4b31      	ldr	r3, [pc, #196]	@ (800ac90 <__mdiff+0x120>)
 800abca:	f240 2145 	movw	r1, #581	@ 0x245
 800abce:	e7e3      	b.n	800ab98 <__mdiff+0x28>
 800abd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800abd4:	6926      	ldr	r6, [r4, #16]
 800abd6:	60c5      	str	r5, [r0, #12]
 800abd8:	f109 0310 	add.w	r3, r9, #16
 800abdc:	f109 0514 	add.w	r5, r9, #20
 800abe0:	f104 0e14 	add.w	lr, r4, #20
 800abe4:	f100 0b14 	add.w	fp, r0, #20
 800abe8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800abec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800abf0:	9301      	str	r3, [sp, #4]
 800abf2:	46d9      	mov	r9, fp
 800abf4:	f04f 0c00 	mov.w	ip, #0
 800abf8:	9b01      	ldr	r3, [sp, #4]
 800abfa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800abfe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac02:	9301      	str	r3, [sp, #4]
 800ac04:	fa1f f38a 	uxth.w	r3, sl
 800ac08:	4619      	mov	r1, r3
 800ac0a:	b283      	uxth	r3, r0
 800ac0c:	1acb      	subs	r3, r1, r3
 800ac0e:	0c00      	lsrs	r0, r0, #16
 800ac10:	4463      	add	r3, ip
 800ac12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ac16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ac20:	4576      	cmp	r6, lr
 800ac22:	f849 3b04 	str.w	r3, [r9], #4
 800ac26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac2a:	d8e5      	bhi.n	800abf8 <__mdiff+0x88>
 800ac2c:	1b33      	subs	r3, r6, r4
 800ac2e:	3b15      	subs	r3, #21
 800ac30:	f023 0303 	bic.w	r3, r3, #3
 800ac34:	3415      	adds	r4, #21
 800ac36:	3304      	adds	r3, #4
 800ac38:	42a6      	cmp	r6, r4
 800ac3a:	bf38      	it	cc
 800ac3c:	2304      	movcc	r3, #4
 800ac3e:	441d      	add	r5, r3
 800ac40:	445b      	add	r3, fp
 800ac42:	461e      	mov	r6, r3
 800ac44:	462c      	mov	r4, r5
 800ac46:	4544      	cmp	r4, r8
 800ac48:	d30e      	bcc.n	800ac68 <__mdiff+0xf8>
 800ac4a:	f108 0103 	add.w	r1, r8, #3
 800ac4e:	1b49      	subs	r1, r1, r5
 800ac50:	f021 0103 	bic.w	r1, r1, #3
 800ac54:	3d03      	subs	r5, #3
 800ac56:	45a8      	cmp	r8, r5
 800ac58:	bf38      	it	cc
 800ac5a:	2100      	movcc	r1, #0
 800ac5c:	440b      	add	r3, r1
 800ac5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac62:	b191      	cbz	r1, 800ac8a <__mdiff+0x11a>
 800ac64:	6117      	str	r7, [r2, #16]
 800ac66:	e79d      	b.n	800aba4 <__mdiff+0x34>
 800ac68:	f854 1b04 	ldr.w	r1, [r4], #4
 800ac6c:	46e6      	mov	lr, ip
 800ac6e:	0c08      	lsrs	r0, r1, #16
 800ac70:	fa1c fc81 	uxtah	ip, ip, r1
 800ac74:	4471      	add	r1, lr
 800ac76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ac7a:	b289      	uxth	r1, r1
 800ac7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ac80:	f846 1b04 	str.w	r1, [r6], #4
 800ac84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac88:	e7dd      	b.n	800ac46 <__mdiff+0xd6>
 800ac8a:	3f01      	subs	r7, #1
 800ac8c:	e7e7      	b.n	800ac5e <__mdiff+0xee>
 800ac8e:	bf00      	nop
 800ac90:	0800b9f4 	.word	0x0800b9f4
 800ac94:	0800ba05 	.word	0x0800ba05

0800ac98 <__d2b>:
 800ac98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac9c:	460f      	mov	r7, r1
 800ac9e:	2101      	movs	r1, #1
 800aca0:	ec59 8b10 	vmov	r8, r9, d0
 800aca4:	4616      	mov	r6, r2
 800aca6:	f7ff fcd5 	bl	800a654 <_Balloc>
 800acaa:	4604      	mov	r4, r0
 800acac:	b930      	cbnz	r0, 800acbc <__d2b+0x24>
 800acae:	4602      	mov	r2, r0
 800acb0:	4b23      	ldr	r3, [pc, #140]	@ (800ad40 <__d2b+0xa8>)
 800acb2:	4824      	ldr	r0, [pc, #144]	@ (800ad44 <__d2b+0xac>)
 800acb4:	f240 310f 	movw	r1, #783	@ 0x30f
 800acb8:	f000 fa74 	bl	800b1a4 <__assert_func>
 800acbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800acc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acc4:	b10d      	cbz	r5, 800acca <__d2b+0x32>
 800acc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800acca:	9301      	str	r3, [sp, #4]
 800accc:	f1b8 0300 	subs.w	r3, r8, #0
 800acd0:	d023      	beq.n	800ad1a <__d2b+0x82>
 800acd2:	4668      	mov	r0, sp
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	f7ff fd84 	bl	800a7e2 <__lo0bits>
 800acda:	e9dd 1200 	ldrd	r1, r2, [sp]
 800acde:	b1d0      	cbz	r0, 800ad16 <__d2b+0x7e>
 800ace0:	f1c0 0320 	rsb	r3, r0, #32
 800ace4:	fa02 f303 	lsl.w	r3, r2, r3
 800ace8:	430b      	orrs	r3, r1
 800acea:	40c2      	lsrs	r2, r0
 800acec:	6163      	str	r3, [r4, #20]
 800acee:	9201      	str	r2, [sp, #4]
 800acf0:	9b01      	ldr	r3, [sp, #4]
 800acf2:	61a3      	str	r3, [r4, #24]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	bf0c      	ite	eq
 800acf8:	2201      	moveq	r2, #1
 800acfa:	2202      	movne	r2, #2
 800acfc:	6122      	str	r2, [r4, #16]
 800acfe:	b1a5      	cbz	r5, 800ad2a <__d2b+0x92>
 800ad00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ad04:	4405      	add	r5, r0
 800ad06:	603d      	str	r5, [r7, #0]
 800ad08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ad0c:	6030      	str	r0, [r6, #0]
 800ad0e:	4620      	mov	r0, r4
 800ad10:	b003      	add	sp, #12
 800ad12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad16:	6161      	str	r1, [r4, #20]
 800ad18:	e7ea      	b.n	800acf0 <__d2b+0x58>
 800ad1a:	a801      	add	r0, sp, #4
 800ad1c:	f7ff fd61 	bl	800a7e2 <__lo0bits>
 800ad20:	9b01      	ldr	r3, [sp, #4]
 800ad22:	6163      	str	r3, [r4, #20]
 800ad24:	3020      	adds	r0, #32
 800ad26:	2201      	movs	r2, #1
 800ad28:	e7e8      	b.n	800acfc <__d2b+0x64>
 800ad2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad32:	6038      	str	r0, [r7, #0]
 800ad34:	6918      	ldr	r0, [r3, #16]
 800ad36:	f7ff fd35 	bl	800a7a4 <__hi0bits>
 800ad3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad3e:	e7e5      	b.n	800ad0c <__d2b+0x74>
 800ad40:	0800b9f4 	.word	0x0800b9f4
 800ad44:	0800ba05 	.word	0x0800ba05

0800ad48 <__ssputs_r>:
 800ad48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad4c:	688e      	ldr	r6, [r1, #8]
 800ad4e:	461f      	mov	r7, r3
 800ad50:	42be      	cmp	r6, r7
 800ad52:	680b      	ldr	r3, [r1, #0]
 800ad54:	4682      	mov	sl, r0
 800ad56:	460c      	mov	r4, r1
 800ad58:	4690      	mov	r8, r2
 800ad5a:	d82d      	bhi.n	800adb8 <__ssputs_r+0x70>
 800ad5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad64:	d026      	beq.n	800adb4 <__ssputs_r+0x6c>
 800ad66:	6965      	ldr	r5, [r4, #20]
 800ad68:	6909      	ldr	r1, [r1, #16]
 800ad6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad6e:	eba3 0901 	sub.w	r9, r3, r1
 800ad72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad76:	1c7b      	adds	r3, r7, #1
 800ad78:	444b      	add	r3, r9
 800ad7a:	106d      	asrs	r5, r5, #1
 800ad7c:	429d      	cmp	r5, r3
 800ad7e:	bf38      	it	cc
 800ad80:	461d      	movcc	r5, r3
 800ad82:	0553      	lsls	r3, r2, #21
 800ad84:	d527      	bpl.n	800add6 <__ssputs_r+0x8e>
 800ad86:	4629      	mov	r1, r5
 800ad88:	f7ff fbd8 	bl	800a53c <_malloc_r>
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	b360      	cbz	r0, 800adea <__ssputs_r+0xa2>
 800ad90:	6921      	ldr	r1, [r4, #16]
 800ad92:	464a      	mov	r2, r9
 800ad94:	f7fe fd67 	bl	8009866 <memcpy>
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ada2:	81a3      	strh	r3, [r4, #12]
 800ada4:	6126      	str	r6, [r4, #16]
 800ada6:	6165      	str	r5, [r4, #20]
 800ada8:	444e      	add	r6, r9
 800adaa:	eba5 0509 	sub.w	r5, r5, r9
 800adae:	6026      	str	r6, [r4, #0]
 800adb0:	60a5      	str	r5, [r4, #8]
 800adb2:	463e      	mov	r6, r7
 800adb4:	42be      	cmp	r6, r7
 800adb6:	d900      	bls.n	800adba <__ssputs_r+0x72>
 800adb8:	463e      	mov	r6, r7
 800adba:	6820      	ldr	r0, [r4, #0]
 800adbc:	4632      	mov	r2, r6
 800adbe:	4641      	mov	r1, r8
 800adc0:	f000 f9c6 	bl	800b150 <memmove>
 800adc4:	68a3      	ldr	r3, [r4, #8]
 800adc6:	1b9b      	subs	r3, r3, r6
 800adc8:	60a3      	str	r3, [r4, #8]
 800adca:	6823      	ldr	r3, [r4, #0]
 800adcc:	4433      	add	r3, r6
 800adce:	6023      	str	r3, [r4, #0]
 800add0:	2000      	movs	r0, #0
 800add2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add6:	462a      	mov	r2, r5
 800add8:	f000 fa28 	bl	800b22c <_realloc_r>
 800addc:	4606      	mov	r6, r0
 800adde:	2800      	cmp	r0, #0
 800ade0:	d1e0      	bne.n	800ada4 <__ssputs_r+0x5c>
 800ade2:	6921      	ldr	r1, [r4, #16]
 800ade4:	4650      	mov	r0, sl
 800ade6:	f7ff fb35 	bl	800a454 <_free_r>
 800adea:	230c      	movs	r3, #12
 800adec:	f8ca 3000 	str.w	r3, [sl]
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adf6:	81a3      	strh	r3, [r4, #12]
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295
 800adfc:	e7e9      	b.n	800add2 <__ssputs_r+0x8a>
	...

0800ae00 <_svfiprintf_r>:
 800ae00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae04:	4698      	mov	r8, r3
 800ae06:	898b      	ldrh	r3, [r1, #12]
 800ae08:	061b      	lsls	r3, r3, #24
 800ae0a:	b09d      	sub	sp, #116	@ 0x74
 800ae0c:	4607      	mov	r7, r0
 800ae0e:	460d      	mov	r5, r1
 800ae10:	4614      	mov	r4, r2
 800ae12:	d510      	bpl.n	800ae36 <_svfiprintf_r+0x36>
 800ae14:	690b      	ldr	r3, [r1, #16]
 800ae16:	b973      	cbnz	r3, 800ae36 <_svfiprintf_r+0x36>
 800ae18:	2140      	movs	r1, #64	@ 0x40
 800ae1a:	f7ff fb8f 	bl	800a53c <_malloc_r>
 800ae1e:	6028      	str	r0, [r5, #0]
 800ae20:	6128      	str	r0, [r5, #16]
 800ae22:	b930      	cbnz	r0, 800ae32 <_svfiprintf_r+0x32>
 800ae24:	230c      	movs	r3, #12
 800ae26:	603b      	str	r3, [r7, #0]
 800ae28:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2c:	b01d      	add	sp, #116	@ 0x74
 800ae2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae32:	2340      	movs	r3, #64	@ 0x40
 800ae34:	616b      	str	r3, [r5, #20]
 800ae36:	2300      	movs	r3, #0
 800ae38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae3a:	2320      	movs	r3, #32
 800ae3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae44:	2330      	movs	r3, #48	@ 0x30
 800ae46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800afe4 <_svfiprintf_r+0x1e4>
 800ae4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae4e:	f04f 0901 	mov.w	r9, #1
 800ae52:	4623      	mov	r3, r4
 800ae54:	469a      	mov	sl, r3
 800ae56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae5a:	b10a      	cbz	r2, 800ae60 <_svfiprintf_r+0x60>
 800ae5c:	2a25      	cmp	r2, #37	@ 0x25
 800ae5e:	d1f9      	bne.n	800ae54 <_svfiprintf_r+0x54>
 800ae60:	ebba 0b04 	subs.w	fp, sl, r4
 800ae64:	d00b      	beq.n	800ae7e <_svfiprintf_r+0x7e>
 800ae66:	465b      	mov	r3, fp
 800ae68:	4622      	mov	r2, r4
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	f7ff ff6b 	bl	800ad48 <__ssputs_r>
 800ae72:	3001      	adds	r0, #1
 800ae74:	f000 80a7 	beq.w	800afc6 <_svfiprintf_r+0x1c6>
 800ae78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae7a:	445a      	add	r2, fp
 800ae7c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 809f 	beq.w	800afc6 <_svfiprintf_r+0x1c6>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae92:	f10a 0a01 	add.w	sl, sl, #1
 800ae96:	9304      	str	r3, [sp, #16]
 800ae98:	9307      	str	r3, [sp, #28]
 800ae9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae9e:	931a      	str	r3, [sp, #104]	@ 0x68
 800aea0:	4654      	mov	r4, sl
 800aea2:	2205      	movs	r2, #5
 800aea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea8:	484e      	ldr	r0, [pc, #312]	@ (800afe4 <_svfiprintf_r+0x1e4>)
 800aeaa:	f7f5 f9c9 	bl	8000240 <memchr>
 800aeae:	9a04      	ldr	r2, [sp, #16]
 800aeb0:	b9d8      	cbnz	r0, 800aeea <_svfiprintf_r+0xea>
 800aeb2:	06d0      	lsls	r0, r2, #27
 800aeb4:	bf44      	itt	mi
 800aeb6:	2320      	movmi	r3, #32
 800aeb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aebc:	0711      	lsls	r1, r2, #28
 800aebe:	bf44      	itt	mi
 800aec0:	232b      	movmi	r3, #43	@ 0x2b
 800aec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aec6:	f89a 3000 	ldrb.w	r3, [sl]
 800aeca:	2b2a      	cmp	r3, #42	@ 0x2a
 800aecc:	d015      	beq.n	800aefa <_svfiprintf_r+0xfa>
 800aece:	9a07      	ldr	r2, [sp, #28]
 800aed0:	4654      	mov	r4, sl
 800aed2:	2000      	movs	r0, #0
 800aed4:	f04f 0c0a 	mov.w	ip, #10
 800aed8:	4621      	mov	r1, r4
 800aeda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aede:	3b30      	subs	r3, #48	@ 0x30
 800aee0:	2b09      	cmp	r3, #9
 800aee2:	d94b      	bls.n	800af7c <_svfiprintf_r+0x17c>
 800aee4:	b1b0      	cbz	r0, 800af14 <_svfiprintf_r+0x114>
 800aee6:	9207      	str	r2, [sp, #28]
 800aee8:	e014      	b.n	800af14 <_svfiprintf_r+0x114>
 800aeea:	eba0 0308 	sub.w	r3, r0, r8
 800aeee:	fa09 f303 	lsl.w	r3, r9, r3
 800aef2:	4313      	orrs	r3, r2
 800aef4:	9304      	str	r3, [sp, #16]
 800aef6:	46a2      	mov	sl, r4
 800aef8:	e7d2      	b.n	800aea0 <_svfiprintf_r+0xa0>
 800aefa:	9b03      	ldr	r3, [sp, #12]
 800aefc:	1d19      	adds	r1, r3, #4
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	9103      	str	r1, [sp, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	bfbb      	ittet	lt
 800af06:	425b      	neglt	r3, r3
 800af08:	f042 0202 	orrlt.w	r2, r2, #2
 800af0c:	9307      	strge	r3, [sp, #28]
 800af0e:	9307      	strlt	r3, [sp, #28]
 800af10:	bfb8      	it	lt
 800af12:	9204      	strlt	r2, [sp, #16]
 800af14:	7823      	ldrb	r3, [r4, #0]
 800af16:	2b2e      	cmp	r3, #46	@ 0x2e
 800af18:	d10a      	bne.n	800af30 <_svfiprintf_r+0x130>
 800af1a:	7863      	ldrb	r3, [r4, #1]
 800af1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800af1e:	d132      	bne.n	800af86 <_svfiprintf_r+0x186>
 800af20:	9b03      	ldr	r3, [sp, #12]
 800af22:	1d1a      	adds	r2, r3, #4
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	9203      	str	r2, [sp, #12]
 800af28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af2c:	3402      	adds	r4, #2
 800af2e:	9305      	str	r3, [sp, #20]
 800af30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aff4 <_svfiprintf_r+0x1f4>
 800af34:	7821      	ldrb	r1, [r4, #0]
 800af36:	2203      	movs	r2, #3
 800af38:	4650      	mov	r0, sl
 800af3a:	f7f5 f981 	bl	8000240 <memchr>
 800af3e:	b138      	cbz	r0, 800af50 <_svfiprintf_r+0x150>
 800af40:	9b04      	ldr	r3, [sp, #16]
 800af42:	eba0 000a 	sub.w	r0, r0, sl
 800af46:	2240      	movs	r2, #64	@ 0x40
 800af48:	4082      	lsls	r2, r0
 800af4a:	4313      	orrs	r3, r2
 800af4c:	3401      	adds	r4, #1
 800af4e:	9304      	str	r3, [sp, #16]
 800af50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af54:	4824      	ldr	r0, [pc, #144]	@ (800afe8 <_svfiprintf_r+0x1e8>)
 800af56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af5a:	2206      	movs	r2, #6
 800af5c:	f7f5 f970 	bl	8000240 <memchr>
 800af60:	2800      	cmp	r0, #0
 800af62:	d036      	beq.n	800afd2 <_svfiprintf_r+0x1d2>
 800af64:	4b21      	ldr	r3, [pc, #132]	@ (800afec <_svfiprintf_r+0x1ec>)
 800af66:	bb1b      	cbnz	r3, 800afb0 <_svfiprintf_r+0x1b0>
 800af68:	9b03      	ldr	r3, [sp, #12]
 800af6a:	3307      	adds	r3, #7
 800af6c:	f023 0307 	bic.w	r3, r3, #7
 800af70:	3308      	adds	r3, #8
 800af72:	9303      	str	r3, [sp, #12]
 800af74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af76:	4433      	add	r3, r6
 800af78:	9309      	str	r3, [sp, #36]	@ 0x24
 800af7a:	e76a      	b.n	800ae52 <_svfiprintf_r+0x52>
 800af7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800af80:	460c      	mov	r4, r1
 800af82:	2001      	movs	r0, #1
 800af84:	e7a8      	b.n	800aed8 <_svfiprintf_r+0xd8>
 800af86:	2300      	movs	r3, #0
 800af88:	3401      	adds	r4, #1
 800af8a:	9305      	str	r3, [sp, #20]
 800af8c:	4619      	mov	r1, r3
 800af8e:	f04f 0c0a 	mov.w	ip, #10
 800af92:	4620      	mov	r0, r4
 800af94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af98:	3a30      	subs	r2, #48	@ 0x30
 800af9a:	2a09      	cmp	r2, #9
 800af9c:	d903      	bls.n	800afa6 <_svfiprintf_r+0x1a6>
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d0c6      	beq.n	800af30 <_svfiprintf_r+0x130>
 800afa2:	9105      	str	r1, [sp, #20]
 800afa4:	e7c4      	b.n	800af30 <_svfiprintf_r+0x130>
 800afa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800afaa:	4604      	mov	r4, r0
 800afac:	2301      	movs	r3, #1
 800afae:	e7f0      	b.n	800af92 <_svfiprintf_r+0x192>
 800afb0:	ab03      	add	r3, sp, #12
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	462a      	mov	r2, r5
 800afb6:	4b0e      	ldr	r3, [pc, #56]	@ (800aff0 <_svfiprintf_r+0x1f0>)
 800afb8:	a904      	add	r1, sp, #16
 800afba:	4638      	mov	r0, r7
 800afbc:	f7fd fe94 	bl	8008ce8 <_printf_float>
 800afc0:	1c42      	adds	r2, r0, #1
 800afc2:	4606      	mov	r6, r0
 800afc4:	d1d6      	bne.n	800af74 <_svfiprintf_r+0x174>
 800afc6:	89ab      	ldrh	r3, [r5, #12]
 800afc8:	065b      	lsls	r3, r3, #25
 800afca:	f53f af2d 	bmi.w	800ae28 <_svfiprintf_r+0x28>
 800afce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afd0:	e72c      	b.n	800ae2c <_svfiprintf_r+0x2c>
 800afd2:	ab03      	add	r3, sp, #12
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	462a      	mov	r2, r5
 800afd8:	4b05      	ldr	r3, [pc, #20]	@ (800aff0 <_svfiprintf_r+0x1f0>)
 800afda:	a904      	add	r1, sp, #16
 800afdc:	4638      	mov	r0, r7
 800afde:	f7fe f90b 	bl	80091f8 <_printf_i>
 800afe2:	e7ed      	b.n	800afc0 <_svfiprintf_r+0x1c0>
 800afe4:	0800ba5e 	.word	0x0800ba5e
 800afe8:	0800ba68 	.word	0x0800ba68
 800afec:	08008ce9 	.word	0x08008ce9
 800aff0:	0800ad49 	.word	0x0800ad49
 800aff4:	0800ba64 	.word	0x0800ba64

0800aff8 <__sflush_r>:
 800aff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800affc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b000:	0716      	lsls	r6, r2, #28
 800b002:	4605      	mov	r5, r0
 800b004:	460c      	mov	r4, r1
 800b006:	d454      	bmi.n	800b0b2 <__sflush_r+0xba>
 800b008:	684b      	ldr	r3, [r1, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	dc02      	bgt.n	800b014 <__sflush_r+0x1c>
 800b00e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b010:	2b00      	cmp	r3, #0
 800b012:	dd48      	ble.n	800b0a6 <__sflush_r+0xae>
 800b014:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b016:	2e00      	cmp	r6, #0
 800b018:	d045      	beq.n	800b0a6 <__sflush_r+0xae>
 800b01a:	2300      	movs	r3, #0
 800b01c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b020:	682f      	ldr	r7, [r5, #0]
 800b022:	6a21      	ldr	r1, [r4, #32]
 800b024:	602b      	str	r3, [r5, #0]
 800b026:	d030      	beq.n	800b08a <__sflush_r+0x92>
 800b028:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	0759      	lsls	r1, r3, #29
 800b02e:	d505      	bpl.n	800b03c <__sflush_r+0x44>
 800b030:	6863      	ldr	r3, [r4, #4]
 800b032:	1ad2      	subs	r2, r2, r3
 800b034:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b036:	b10b      	cbz	r3, 800b03c <__sflush_r+0x44>
 800b038:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b03a:	1ad2      	subs	r2, r2, r3
 800b03c:	2300      	movs	r3, #0
 800b03e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b040:	6a21      	ldr	r1, [r4, #32]
 800b042:	4628      	mov	r0, r5
 800b044:	47b0      	blx	r6
 800b046:	1c43      	adds	r3, r0, #1
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	d106      	bne.n	800b05a <__sflush_r+0x62>
 800b04c:	6829      	ldr	r1, [r5, #0]
 800b04e:	291d      	cmp	r1, #29
 800b050:	d82b      	bhi.n	800b0aa <__sflush_r+0xb2>
 800b052:	4a2a      	ldr	r2, [pc, #168]	@ (800b0fc <__sflush_r+0x104>)
 800b054:	40ca      	lsrs	r2, r1
 800b056:	07d6      	lsls	r6, r2, #31
 800b058:	d527      	bpl.n	800b0aa <__sflush_r+0xb2>
 800b05a:	2200      	movs	r2, #0
 800b05c:	6062      	str	r2, [r4, #4]
 800b05e:	04d9      	lsls	r1, r3, #19
 800b060:	6922      	ldr	r2, [r4, #16]
 800b062:	6022      	str	r2, [r4, #0]
 800b064:	d504      	bpl.n	800b070 <__sflush_r+0x78>
 800b066:	1c42      	adds	r2, r0, #1
 800b068:	d101      	bne.n	800b06e <__sflush_r+0x76>
 800b06a:	682b      	ldr	r3, [r5, #0]
 800b06c:	b903      	cbnz	r3, 800b070 <__sflush_r+0x78>
 800b06e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b072:	602f      	str	r7, [r5, #0]
 800b074:	b1b9      	cbz	r1, 800b0a6 <__sflush_r+0xae>
 800b076:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b07a:	4299      	cmp	r1, r3
 800b07c:	d002      	beq.n	800b084 <__sflush_r+0x8c>
 800b07e:	4628      	mov	r0, r5
 800b080:	f7ff f9e8 	bl	800a454 <_free_r>
 800b084:	2300      	movs	r3, #0
 800b086:	6363      	str	r3, [r4, #52]	@ 0x34
 800b088:	e00d      	b.n	800b0a6 <__sflush_r+0xae>
 800b08a:	2301      	movs	r3, #1
 800b08c:	4628      	mov	r0, r5
 800b08e:	47b0      	blx	r6
 800b090:	4602      	mov	r2, r0
 800b092:	1c50      	adds	r0, r2, #1
 800b094:	d1c9      	bne.n	800b02a <__sflush_r+0x32>
 800b096:	682b      	ldr	r3, [r5, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d0c6      	beq.n	800b02a <__sflush_r+0x32>
 800b09c:	2b1d      	cmp	r3, #29
 800b09e:	d001      	beq.n	800b0a4 <__sflush_r+0xac>
 800b0a0:	2b16      	cmp	r3, #22
 800b0a2:	d11e      	bne.n	800b0e2 <__sflush_r+0xea>
 800b0a4:	602f      	str	r7, [r5, #0]
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	e022      	b.n	800b0f0 <__sflush_r+0xf8>
 800b0aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ae:	b21b      	sxth	r3, r3
 800b0b0:	e01b      	b.n	800b0ea <__sflush_r+0xf2>
 800b0b2:	690f      	ldr	r7, [r1, #16]
 800b0b4:	2f00      	cmp	r7, #0
 800b0b6:	d0f6      	beq.n	800b0a6 <__sflush_r+0xae>
 800b0b8:	0793      	lsls	r3, r2, #30
 800b0ba:	680e      	ldr	r6, [r1, #0]
 800b0bc:	bf08      	it	eq
 800b0be:	694b      	ldreq	r3, [r1, #20]
 800b0c0:	600f      	str	r7, [r1, #0]
 800b0c2:	bf18      	it	ne
 800b0c4:	2300      	movne	r3, #0
 800b0c6:	eba6 0807 	sub.w	r8, r6, r7
 800b0ca:	608b      	str	r3, [r1, #8]
 800b0cc:	f1b8 0f00 	cmp.w	r8, #0
 800b0d0:	dde9      	ble.n	800b0a6 <__sflush_r+0xae>
 800b0d2:	6a21      	ldr	r1, [r4, #32]
 800b0d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b0d6:	4643      	mov	r3, r8
 800b0d8:	463a      	mov	r2, r7
 800b0da:	4628      	mov	r0, r5
 800b0dc:	47b0      	blx	r6
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	dc08      	bgt.n	800b0f4 <__sflush_r+0xfc>
 800b0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ea:	81a3      	strh	r3, [r4, #12]
 800b0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f4:	4407      	add	r7, r0
 800b0f6:	eba8 0800 	sub.w	r8, r8, r0
 800b0fa:	e7e7      	b.n	800b0cc <__sflush_r+0xd4>
 800b0fc:	20400001 	.word	0x20400001

0800b100 <_fflush_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	690b      	ldr	r3, [r1, #16]
 800b104:	4605      	mov	r5, r0
 800b106:	460c      	mov	r4, r1
 800b108:	b913      	cbnz	r3, 800b110 <_fflush_r+0x10>
 800b10a:	2500      	movs	r5, #0
 800b10c:	4628      	mov	r0, r5
 800b10e:	bd38      	pop	{r3, r4, r5, pc}
 800b110:	b118      	cbz	r0, 800b11a <_fflush_r+0x1a>
 800b112:	6a03      	ldr	r3, [r0, #32]
 800b114:	b90b      	cbnz	r3, 800b11a <_fflush_r+0x1a>
 800b116:	f7fe fa19 	bl	800954c <__sinit>
 800b11a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d0f3      	beq.n	800b10a <_fflush_r+0xa>
 800b122:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b124:	07d0      	lsls	r0, r2, #31
 800b126:	d404      	bmi.n	800b132 <_fflush_r+0x32>
 800b128:	0599      	lsls	r1, r3, #22
 800b12a:	d402      	bmi.n	800b132 <_fflush_r+0x32>
 800b12c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b12e:	f7fe fb98 	bl	8009862 <__retarget_lock_acquire_recursive>
 800b132:	4628      	mov	r0, r5
 800b134:	4621      	mov	r1, r4
 800b136:	f7ff ff5f 	bl	800aff8 <__sflush_r>
 800b13a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b13c:	07da      	lsls	r2, r3, #31
 800b13e:	4605      	mov	r5, r0
 800b140:	d4e4      	bmi.n	800b10c <_fflush_r+0xc>
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	059b      	lsls	r3, r3, #22
 800b146:	d4e1      	bmi.n	800b10c <_fflush_r+0xc>
 800b148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b14a:	f7fe fb8b 	bl	8009864 <__retarget_lock_release_recursive>
 800b14e:	e7dd      	b.n	800b10c <_fflush_r+0xc>

0800b150 <memmove>:
 800b150:	4288      	cmp	r0, r1
 800b152:	b510      	push	{r4, lr}
 800b154:	eb01 0402 	add.w	r4, r1, r2
 800b158:	d902      	bls.n	800b160 <memmove+0x10>
 800b15a:	4284      	cmp	r4, r0
 800b15c:	4623      	mov	r3, r4
 800b15e:	d807      	bhi.n	800b170 <memmove+0x20>
 800b160:	1e43      	subs	r3, r0, #1
 800b162:	42a1      	cmp	r1, r4
 800b164:	d008      	beq.n	800b178 <memmove+0x28>
 800b166:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b16a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b16e:	e7f8      	b.n	800b162 <memmove+0x12>
 800b170:	4402      	add	r2, r0
 800b172:	4601      	mov	r1, r0
 800b174:	428a      	cmp	r2, r1
 800b176:	d100      	bne.n	800b17a <memmove+0x2a>
 800b178:	bd10      	pop	{r4, pc}
 800b17a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b17e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b182:	e7f7      	b.n	800b174 <memmove+0x24>

0800b184 <_sbrk_r>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	4d06      	ldr	r5, [pc, #24]	@ (800b1a0 <_sbrk_r+0x1c>)
 800b188:	2300      	movs	r3, #0
 800b18a:	4604      	mov	r4, r0
 800b18c:	4608      	mov	r0, r1
 800b18e:	602b      	str	r3, [r5, #0]
 800b190:	f7f6 f8ee 	bl	8001370 <_sbrk>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d102      	bne.n	800b19e <_sbrk_r+0x1a>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	b103      	cbz	r3, 800b19e <_sbrk_r+0x1a>
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	bd38      	pop	{r3, r4, r5, pc}
 800b1a0:	200055b8 	.word	0x200055b8

0800b1a4 <__assert_func>:
 800b1a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1a6:	4614      	mov	r4, r2
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4b09      	ldr	r3, [pc, #36]	@ (800b1d0 <__assert_func+0x2c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4605      	mov	r5, r0
 800b1b0:	68d8      	ldr	r0, [r3, #12]
 800b1b2:	b14c      	cbz	r4, 800b1c8 <__assert_func+0x24>
 800b1b4:	4b07      	ldr	r3, [pc, #28]	@ (800b1d4 <__assert_func+0x30>)
 800b1b6:	9100      	str	r1, [sp, #0]
 800b1b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1bc:	4906      	ldr	r1, [pc, #24]	@ (800b1d8 <__assert_func+0x34>)
 800b1be:	462b      	mov	r3, r5
 800b1c0:	f000 f870 	bl	800b2a4 <fiprintf>
 800b1c4:	f000 f880 	bl	800b2c8 <abort>
 800b1c8:	4b04      	ldr	r3, [pc, #16]	@ (800b1dc <__assert_func+0x38>)
 800b1ca:	461c      	mov	r4, r3
 800b1cc:	e7f3      	b.n	800b1b6 <__assert_func+0x12>
 800b1ce:	bf00      	nop
 800b1d0:	2000001c 	.word	0x2000001c
 800b1d4:	0800ba79 	.word	0x0800ba79
 800b1d8:	0800ba86 	.word	0x0800ba86
 800b1dc:	0800bab4 	.word	0x0800bab4

0800b1e0 <_calloc_r>:
 800b1e0:	b570      	push	{r4, r5, r6, lr}
 800b1e2:	fba1 5402 	umull	r5, r4, r1, r2
 800b1e6:	b934      	cbnz	r4, 800b1f6 <_calloc_r+0x16>
 800b1e8:	4629      	mov	r1, r5
 800b1ea:	f7ff f9a7 	bl	800a53c <_malloc_r>
 800b1ee:	4606      	mov	r6, r0
 800b1f0:	b928      	cbnz	r0, 800b1fe <_calloc_r+0x1e>
 800b1f2:	4630      	mov	r0, r6
 800b1f4:	bd70      	pop	{r4, r5, r6, pc}
 800b1f6:	220c      	movs	r2, #12
 800b1f8:	6002      	str	r2, [r0, #0]
 800b1fa:	2600      	movs	r6, #0
 800b1fc:	e7f9      	b.n	800b1f2 <_calloc_r+0x12>
 800b1fe:	462a      	mov	r2, r5
 800b200:	4621      	mov	r1, r4
 800b202:	f7fe fa52 	bl	80096aa <memset>
 800b206:	e7f4      	b.n	800b1f2 <_calloc_r+0x12>

0800b208 <__ascii_mbtowc>:
 800b208:	b082      	sub	sp, #8
 800b20a:	b901      	cbnz	r1, 800b20e <__ascii_mbtowc+0x6>
 800b20c:	a901      	add	r1, sp, #4
 800b20e:	b142      	cbz	r2, 800b222 <__ascii_mbtowc+0x1a>
 800b210:	b14b      	cbz	r3, 800b226 <__ascii_mbtowc+0x1e>
 800b212:	7813      	ldrb	r3, [r2, #0]
 800b214:	600b      	str	r3, [r1, #0]
 800b216:	7812      	ldrb	r2, [r2, #0]
 800b218:	1e10      	subs	r0, r2, #0
 800b21a:	bf18      	it	ne
 800b21c:	2001      	movne	r0, #1
 800b21e:	b002      	add	sp, #8
 800b220:	4770      	bx	lr
 800b222:	4610      	mov	r0, r2
 800b224:	e7fb      	b.n	800b21e <__ascii_mbtowc+0x16>
 800b226:	f06f 0001 	mvn.w	r0, #1
 800b22a:	e7f8      	b.n	800b21e <__ascii_mbtowc+0x16>

0800b22c <_realloc_r>:
 800b22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b230:	4607      	mov	r7, r0
 800b232:	4614      	mov	r4, r2
 800b234:	460d      	mov	r5, r1
 800b236:	b921      	cbnz	r1, 800b242 <_realloc_r+0x16>
 800b238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b23c:	4611      	mov	r1, r2
 800b23e:	f7ff b97d 	b.w	800a53c <_malloc_r>
 800b242:	b92a      	cbnz	r2, 800b250 <_realloc_r+0x24>
 800b244:	f7ff f906 	bl	800a454 <_free_r>
 800b248:	4625      	mov	r5, r4
 800b24a:	4628      	mov	r0, r5
 800b24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b250:	f000 f841 	bl	800b2d6 <_malloc_usable_size_r>
 800b254:	4284      	cmp	r4, r0
 800b256:	4606      	mov	r6, r0
 800b258:	d802      	bhi.n	800b260 <_realloc_r+0x34>
 800b25a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b25e:	d8f4      	bhi.n	800b24a <_realloc_r+0x1e>
 800b260:	4621      	mov	r1, r4
 800b262:	4638      	mov	r0, r7
 800b264:	f7ff f96a 	bl	800a53c <_malloc_r>
 800b268:	4680      	mov	r8, r0
 800b26a:	b908      	cbnz	r0, 800b270 <_realloc_r+0x44>
 800b26c:	4645      	mov	r5, r8
 800b26e:	e7ec      	b.n	800b24a <_realloc_r+0x1e>
 800b270:	42b4      	cmp	r4, r6
 800b272:	4622      	mov	r2, r4
 800b274:	4629      	mov	r1, r5
 800b276:	bf28      	it	cs
 800b278:	4632      	movcs	r2, r6
 800b27a:	f7fe faf4 	bl	8009866 <memcpy>
 800b27e:	4629      	mov	r1, r5
 800b280:	4638      	mov	r0, r7
 800b282:	f7ff f8e7 	bl	800a454 <_free_r>
 800b286:	e7f1      	b.n	800b26c <_realloc_r+0x40>

0800b288 <__ascii_wctomb>:
 800b288:	4603      	mov	r3, r0
 800b28a:	4608      	mov	r0, r1
 800b28c:	b141      	cbz	r1, 800b2a0 <__ascii_wctomb+0x18>
 800b28e:	2aff      	cmp	r2, #255	@ 0xff
 800b290:	d904      	bls.n	800b29c <__ascii_wctomb+0x14>
 800b292:	228a      	movs	r2, #138	@ 0x8a
 800b294:	601a      	str	r2, [r3, #0]
 800b296:	f04f 30ff 	mov.w	r0, #4294967295
 800b29a:	4770      	bx	lr
 800b29c:	700a      	strb	r2, [r1, #0]
 800b29e:	2001      	movs	r0, #1
 800b2a0:	4770      	bx	lr
	...

0800b2a4 <fiprintf>:
 800b2a4:	b40e      	push	{r1, r2, r3}
 800b2a6:	b503      	push	{r0, r1, lr}
 800b2a8:	4601      	mov	r1, r0
 800b2aa:	ab03      	add	r3, sp, #12
 800b2ac:	4805      	ldr	r0, [pc, #20]	@ (800b2c4 <fiprintf+0x20>)
 800b2ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2b2:	6800      	ldr	r0, [r0, #0]
 800b2b4:	9301      	str	r3, [sp, #4]
 800b2b6:	f000 f83f 	bl	800b338 <_vfiprintf_r>
 800b2ba:	b002      	add	sp, #8
 800b2bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2c0:	b003      	add	sp, #12
 800b2c2:	4770      	bx	lr
 800b2c4:	2000001c 	.word	0x2000001c

0800b2c8 <abort>:
 800b2c8:	b508      	push	{r3, lr}
 800b2ca:	2006      	movs	r0, #6
 800b2cc:	f000 fa08 	bl	800b6e0 <raise>
 800b2d0:	2001      	movs	r0, #1
 800b2d2:	f7f5 ffd5 	bl	8001280 <_exit>

0800b2d6 <_malloc_usable_size_r>:
 800b2d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2da:	1f18      	subs	r0, r3, #4
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	bfbc      	itt	lt
 800b2e0:	580b      	ldrlt	r3, [r1, r0]
 800b2e2:	18c0      	addlt	r0, r0, r3
 800b2e4:	4770      	bx	lr

0800b2e6 <__sfputc_r>:
 800b2e6:	6893      	ldr	r3, [r2, #8]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	b410      	push	{r4}
 800b2ee:	6093      	str	r3, [r2, #8]
 800b2f0:	da08      	bge.n	800b304 <__sfputc_r+0x1e>
 800b2f2:	6994      	ldr	r4, [r2, #24]
 800b2f4:	42a3      	cmp	r3, r4
 800b2f6:	db01      	blt.n	800b2fc <__sfputc_r+0x16>
 800b2f8:	290a      	cmp	r1, #10
 800b2fa:	d103      	bne.n	800b304 <__sfputc_r+0x1e>
 800b2fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b300:	f000 b932 	b.w	800b568 <__swbuf_r>
 800b304:	6813      	ldr	r3, [r2, #0]
 800b306:	1c58      	adds	r0, r3, #1
 800b308:	6010      	str	r0, [r2, #0]
 800b30a:	7019      	strb	r1, [r3, #0]
 800b30c:	4608      	mov	r0, r1
 800b30e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <__sfputs_r>:
 800b314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b316:	4606      	mov	r6, r0
 800b318:	460f      	mov	r7, r1
 800b31a:	4614      	mov	r4, r2
 800b31c:	18d5      	adds	r5, r2, r3
 800b31e:	42ac      	cmp	r4, r5
 800b320:	d101      	bne.n	800b326 <__sfputs_r+0x12>
 800b322:	2000      	movs	r0, #0
 800b324:	e007      	b.n	800b336 <__sfputs_r+0x22>
 800b326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b32a:	463a      	mov	r2, r7
 800b32c:	4630      	mov	r0, r6
 800b32e:	f7ff ffda 	bl	800b2e6 <__sfputc_r>
 800b332:	1c43      	adds	r3, r0, #1
 800b334:	d1f3      	bne.n	800b31e <__sfputs_r+0xa>
 800b336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b338 <_vfiprintf_r>:
 800b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33c:	460d      	mov	r5, r1
 800b33e:	b09d      	sub	sp, #116	@ 0x74
 800b340:	4614      	mov	r4, r2
 800b342:	4698      	mov	r8, r3
 800b344:	4606      	mov	r6, r0
 800b346:	b118      	cbz	r0, 800b350 <_vfiprintf_r+0x18>
 800b348:	6a03      	ldr	r3, [r0, #32]
 800b34a:	b90b      	cbnz	r3, 800b350 <_vfiprintf_r+0x18>
 800b34c:	f7fe f8fe 	bl	800954c <__sinit>
 800b350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b352:	07d9      	lsls	r1, r3, #31
 800b354:	d405      	bmi.n	800b362 <_vfiprintf_r+0x2a>
 800b356:	89ab      	ldrh	r3, [r5, #12]
 800b358:	059a      	lsls	r2, r3, #22
 800b35a:	d402      	bmi.n	800b362 <_vfiprintf_r+0x2a>
 800b35c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b35e:	f7fe fa80 	bl	8009862 <__retarget_lock_acquire_recursive>
 800b362:	89ab      	ldrh	r3, [r5, #12]
 800b364:	071b      	lsls	r3, r3, #28
 800b366:	d501      	bpl.n	800b36c <_vfiprintf_r+0x34>
 800b368:	692b      	ldr	r3, [r5, #16]
 800b36a:	b99b      	cbnz	r3, 800b394 <_vfiprintf_r+0x5c>
 800b36c:	4629      	mov	r1, r5
 800b36e:	4630      	mov	r0, r6
 800b370:	f000 f938 	bl	800b5e4 <__swsetup_r>
 800b374:	b170      	cbz	r0, 800b394 <_vfiprintf_r+0x5c>
 800b376:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b378:	07dc      	lsls	r4, r3, #31
 800b37a:	d504      	bpl.n	800b386 <_vfiprintf_r+0x4e>
 800b37c:	f04f 30ff 	mov.w	r0, #4294967295
 800b380:	b01d      	add	sp, #116	@ 0x74
 800b382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b386:	89ab      	ldrh	r3, [r5, #12]
 800b388:	0598      	lsls	r0, r3, #22
 800b38a:	d4f7      	bmi.n	800b37c <_vfiprintf_r+0x44>
 800b38c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b38e:	f7fe fa69 	bl	8009864 <__retarget_lock_release_recursive>
 800b392:	e7f3      	b.n	800b37c <_vfiprintf_r+0x44>
 800b394:	2300      	movs	r3, #0
 800b396:	9309      	str	r3, [sp, #36]	@ 0x24
 800b398:	2320      	movs	r3, #32
 800b39a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b39e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3a2:	2330      	movs	r3, #48	@ 0x30
 800b3a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b554 <_vfiprintf_r+0x21c>
 800b3a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3ac:	f04f 0901 	mov.w	r9, #1
 800b3b0:	4623      	mov	r3, r4
 800b3b2:	469a      	mov	sl, r3
 800b3b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3b8:	b10a      	cbz	r2, 800b3be <_vfiprintf_r+0x86>
 800b3ba:	2a25      	cmp	r2, #37	@ 0x25
 800b3bc:	d1f9      	bne.n	800b3b2 <_vfiprintf_r+0x7a>
 800b3be:	ebba 0b04 	subs.w	fp, sl, r4
 800b3c2:	d00b      	beq.n	800b3dc <_vfiprintf_r+0xa4>
 800b3c4:	465b      	mov	r3, fp
 800b3c6:	4622      	mov	r2, r4
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f7ff ffa2 	bl	800b314 <__sfputs_r>
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	f000 80a7 	beq.w	800b524 <_vfiprintf_r+0x1ec>
 800b3d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3d8:	445a      	add	r2, fp
 800b3da:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f000 809f 	beq.w	800b524 <_vfiprintf_r+0x1ec>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3f0:	f10a 0a01 	add.w	sl, sl, #1
 800b3f4:	9304      	str	r3, [sp, #16]
 800b3f6:	9307      	str	r3, [sp, #28]
 800b3f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3fe:	4654      	mov	r4, sl
 800b400:	2205      	movs	r2, #5
 800b402:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b406:	4853      	ldr	r0, [pc, #332]	@ (800b554 <_vfiprintf_r+0x21c>)
 800b408:	f7f4 ff1a 	bl	8000240 <memchr>
 800b40c:	9a04      	ldr	r2, [sp, #16]
 800b40e:	b9d8      	cbnz	r0, 800b448 <_vfiprintf_r+0x110>
 800b410:	06d1      	lsls	r1, r2, #27
 800b412:	bf44      	itt	mi
 800b414:	2320      	movmi	r3, #32
 800b416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b41a:	0713      	lsls	r3, r2, #28
 800b41c:	bf44      	itt	mi
 800b41e:	232b      	movmi	r3, #43	@ 0x2b
 800b420:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b424:	f89a 3000 	ldrb.w	r3, [sl]
 800b428:	2b2a      	cmp	r3, #42	@ 0x2a
 800b42a:	d015      	beq.n	800b458 <_vfiprintf_r+0x120>
 800b42c:	9a07      	ldr	r2, [sp, #28]
 800b42e:	4654      	mov	r4, sl
 800b430:	2000      	movs	r0, #0
 800b432:	f04f 0c0a 	mov.w	ip, #10
 800b436:	4621      	mov	r1, r4
 800b438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b43c:	3b30      	subs	r3, #48	@ 0x30
 800b43e:	2b09      	cmp	r3, #9
 800b440:	d94b      	bls.n	800b4da <_vfiprintf_r+0x1a2>
 800b442:	b1b0      	cbz	r0, 800b472 <_vfiprintf_r+0x13a>
 800b444:	9207      	str	r2, [sp, #28]
 800b446:	e014      	b.n	800b472 <_vfiprintf_r+0x13a>
 800b448:	eba0 0308 	sub.w	r3, r0, r8
 800b44c:	fa09 f303 	lsl.w	r3, r9, r3
 800b450:	4313      	orrs	r3, r2
 800b452:	9304      	str	r3, [sp, #16]
 800b454:	46a2      	mov	sl, r4
 800b456:	e7d2      	b.n	800b3fe <_vfiprintf_r+0xc6>
 800b458:	9b03      	ldr	r3, [sp, #12]
 800b45a:	1d19      	adds	r1, r3, #4
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	9103      	str	r1, [sp, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	bfbb      	ittet	lt
 800b464:	425b      	neglt	r3, r3
 800b466:	f042 0202 	orrlt.w	r2, r2, #2
 800b46a:	9307      	strge	r3, [sp, #28]
 800b46c:	9307      	strlt	r3, [sp, #28]
 800b46e:	bfb8      	it	lt
 800b470:	9204      	strlt	r2, [sp, #16]
 800b472:	7823      	ldrb	r3, [r4, #0]
 800b474:	2b2e      	cmp	r3, #46	@ 0x2e
 800b476:	d10a      	bne.n	800b48e <_vfiprintf_r+0x156>
 800b478:	7863      	ldrb	r3, [r4, #1]
 800b47a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b47c:	d132      	bne.n	800b4e4 <_vfiprintf_r+0x1ac>
 800b47e:	9b03      	ldr	r3, [sp, #12]
 800b480:	1d1a      	adds	r2, r3, #4
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	9203      	str	r2, [sp, #12]
 800b486:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b48a:	3402      	adds	r4, #2
 800b48c:	9305      	str	r3, [sp, #20]
 800b48e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b564 <_vfiprintf_r+0x22c>
 800b492:	7821      	ldrb	r1, [r4, #0]
 800b494:	2203      	movs	r2, #3
 800b496:	4650      	mov	r0, sl
 800b498:	f7f4 fed2 	bl	8000240 <memchr>
 800b49c:	b138      	cbz	r0, 800b4ae <_vfiprintf_r+0x176>
 800b49e:	9b04      	ldr	r3, [sp, #16]
 800b4a0:	eba0 000a 	sub.w	r0, r0, sl
 800b4a4:	2240      	movs	r2, #64	@ 0x40
 800b4a6:	4082      	lsls	r2, r0
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	3401      	adds	r4, #1
 800b4ac:	9304      	str	r3, [sp, #16]
 800b4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b2:	4829      	ldr	r0, [pc, #164]	@ (800b558 <_vfiprintf_r+0x220>)
 800b4b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4b8:	2206      	movs	r2, #6
 800b4ba:	f7f4 fec1 	bl	8000240 <memchr>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d03f      	beq.n	800b542 <_vfiprintf_r+0x20a>
 800b4c2:	4b26      	ldr	r3, [pc, #152]	@ (800b55c <_vfiprintf_r+0x224>)
 800b4c4:	bb1b      	cbnz	r3, 800b50e <_vfiprintf_r+0x1d6>
 800b4c6:	9b03      	ldr	r3, [sp, #12]
 800b4c8:	3307      	adds	r3, #7
 800b4ca:	f023 0307 	bic.w	r3, r3, #7
 800b4ce:	3308      	adds	r3, #8
 800b4d0:	9303      	str	r3, [sp, #12]
 800b4d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4d4:	443b      	add	r3, r7
 800b4d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4d8:	e76a      	b.n	800b3b0 <_vfiprintf_r+0x78>
 800b4da:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4de:	460c      	mov	r4, r1
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	e7a8      	b.n	800b436 <_vfiprintf_r+0xfe>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	3401      	adds	r4, #1
 800b4e8:	9305      	str	r3, [sp, #20]
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	f04f 0c0a 	mov.w	ip, #10
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4f6:	3a30      	subs	r2, #48	@ 0x30
 800b4f8:	2a09      	cmp	r2, #9
 800b4fa:	d903      	bls.n	800b504 <_vfiprintf_r+0x1cc>
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d0c6      	beq.n	800b48e <_vfiprintf_r+0x156>
 800b500:	9105      	str	r1, [sp, #20]
 800b502:	e7c4      	b.n	800b48e <_vfiprintf_r+0x156>
 800b504:	fb0c 2101 	mla	r1, ip, r1, r2
 800b508:	4604      	mov	r4, r0
 800b50a:	2301      	movs	r3, #1
 800b50c:	e7f0      	b.n	800b4f0 <_vfiprintf_r+0x1b8>
 800b50e:	ab03      	add	r3, sp, #12
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	462a      	mov	r2, r5
 800b514:	4b12      	ldr	r3, [pc, #72]	@ (800b560 <_vfiprintf_r+0x228>)
 800b516:	a904      	add	r1, sp, #16
 800b518:	4630      	mov	r0, r6
 800b51a:	f7fd fbe5 	bl	8008ce8 <_printf_float>
 800b51e:	4607      	mov	r7, r0
 800b520:	1c78      	adds	r0, r7, #1
 800b522:	d1d6      	bne.n	800b4d2 <_vfiprintf_r+0x19a>
 800b524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b526:	07d9      	lsls	r1, r3, #31
 800b528:	d405      	bmi.n	800b536 <_vfiprintf_r+0x1fe>
 800b52a:	89ab      	ldrh	r3, [r5, #12]
 800b52c:	059a      	lsls	r2, r3, #22
 800b52e:	d402      	bmi.n	800b536 <_vfiprintf_r+0x1fe>
 800b530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b532:	f7fe f997 	bl	8009864 <__retarget_lock_release_recursive>
 800b536:	89ab      	ldrh	r3, [r5, #12]
 800b538:	065b      	lsls	r3, r3, #25
 800b53a:	f53f af1f 	bmi.w	800b37c <_vfiprintf_r+0x44>
 800b53e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b540:	e71e      	b.n	800b380 <_vfiprintf_r+0x48>
 800b542:	ab03      	add	r3, sp, #12
 800b544:	9300      	str	r3, [sp, #0]
 800b546:	462a      	mov	r2, r5
 800b548:	4b05      	ldr	r3, [pc, #20]	@ (800b560 <_vfiprintf_r+0x228>)
 800b54a:	a904      	add	r1, sp, #16
 800b54c:	4630      	mov	r0, r6
 800b54e:	f7fd fe53 	bl	80091f8 <_printf_i>
 800b552:	e7e4      	b.n	800b51e <_vfiprintf_r+0x1e6>
 800b554:	0800ba5e 	.word	0x0800ba5e
 800b558:	0800ba68 	.word	0x0800ba68
 800b55c:	08008ce9 	.word	0x08008ce9
 800b560:	0800b315 	.word	0x0800b315
 800b564:	0800ba64 	.word	0x0800ba64

0800b568 <__swbuf_r>:
 800b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56a:	460e      	mov	r6, r1
 800b56c:	4614      	mov	r4, r2
 800b56e:	4605      	mov	r5, r0
 800b570:	b118      	cbz	r0, 800b57a <__swbuf_r+0x12>
 800b572:	6a03      	ldr	r3, [r0, #32]
 800b574:	b90b      	cbnz	r3, 800b57a <__swbuf_r+0x12>
 800b576:	f7fd ffe9 	bl	800954c <__sinit>
 800b57a:	69a3      	ldr	r3, [r4, #24]
 800b57c:	60a3      	str	r3, [r4, #8]
 800b57e:	89a3      	ldrh	r3, [r4, #12]
 800b580:	071a      	lsls	r2, r3, #28
 800b582:	d501      	bpl.n	800b588 <__swbuf_r+0x20>
 800b584:	6923      	ldr	r3, [r4, #16]
 800b586:	b943      	cbnz	r3, 800b59a <__swbuf_r+0x32>
 800b588:	4621      	mov	r1, r4
 800b58a:	4628      	mov	r0, r5
 800b58c:	f000 f82a 	bl	800b5e4 <__swsetup_r>
 800b590:	b118      	cbz	r0, 800b59a <__swbuf_r+0x32>
 800b592:	f04f 37ff 	mov.w	r7, #4294967295
 800b596:	4638      	mov	r0, r7
 800b598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	6922      	ldr	r2, [r4, #16]
 800b59e:	1a98      	subs	r0, r3, r2
 800b5a0:	6963      	ldr	r3, [r4, #20]
 800b5a2:	b2f6      	uxtb	r6, r6
 800b5a4:	4283      	cmp	r3, r0
 800b5a6:	4637      	mov	r7, r6
 800b5a8:	dc05      	bgt.n	800b5b6 <__swbuf_r+0x4e>
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	f7ff fda7 	bl	800b100 <_fflush_r>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d1ed      	bne.n	800b592 <__swbuf_r+0x2a>
 800b5b6:	68a3      	ldr	r3, [r4, #8]
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	60a3      	str	r3, [r4, #8]
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	1c5a      	adds	r2, r3, #1
 800b5c0:	6022      	str	r2, [r4, #0]
 800b5c2:	701e      	strb	r6, [r3, #0]
 800b5c4:	6962      	ldr	r2, [r4, #20]
 800b5c6:	1c43      	adds	r3, r0, #1
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d004      	beq.n	800b5d6 <__swbuf_r+0x6e>
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	07db      	lsls	r3, r3, #31
 800b5d0:	d5e1      	bpl.n	800b596 <__swbuf_r+0x2e>
 800b5d2:	2e0a      	cmp	r6, #10
 800b5d4:	d1df      	bne.n	800b596 <__swbuf_r+0x2e>
 800b5d6:	4621      	mov	r1, r4
 800b5d8:	4628      	mov	r0, r5
 800b5da:	f7ff fd91 	bl	800b100 <_fflush_r>
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d0d9      	beq.n	800b596 <__swbuf_r+0x2e>
 800b5e2:	e7d6      	b.n	800b592 <__swbuf_r+0x2a>

0800b5e4 <__swsetup_r>:
 800b5e4:	b538      	push	{r3, r4, r5, lr}
 800b5e6:	4b29      	ldr	r3, [pc, #164]	@ (800b68c <__swsetup_r+0xa8>)
 800b5e8:	4605      	mov	r5, r0
 800b5ea:	6818      	ldr	r0, [r3, #0]
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	b118      	cbz	r0, 800b5f8 <__swsetup_r+0x14>
 800b5f0:	6a03      	ldr	r3, [r0, #32]
 800b5f2:	b90b      	cbnz	r3, 800b5f8 <__swsetup_r+0x14>
 800b5f4:	f7fd ffaa 	bl	800954c <__sinit>
 800b5f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5fc:	0719      	lsls	r1, r3, #28
 800b5fe:	d422      	bmi.n	800b646 <__swsetup_r+0x62>
 800b600:	06da      	lsls	r2, r3, #27
 800b602:	d407      	bmi.n	800b614 <__swsetup_r+0x30>
 800b604:	2209      	movs	r2, #9
 800b606:	602a      	str	r2, [r5, #0]
 800b608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b60c:	81a3      	strh	r3, [r4, #12]
 800b60e:	f04f 30ff 	mov.w	r0, #4294967295
 800b612:	e033      	b.n	800b67c <__swsetup_r+0x98>
 800b614:	0758      	lsls	r0, r3, #29
 800b616:	d512      	bpl.n	800b63e <__swsetup_r+0x5a>
 800b618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b61a:	b141      	cbz	r1, 800b62e <__swsetup_r+0x4a>
 800b61c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b620:	4299      	cmp	r1, r3
 800b622:	d002      	beq.n	800b62a <__swsetup_r+0x46>
 800b624:	4628      	mov	r0, r5
 800b626:	f7fe ff15 	bl	800a454 <_free_r>
 800b62a:	2300      	movs	r3, #0
 800b62c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	2300      	movs	r3, #0
 800b638:	6063      	str	r3, [r4, #4]
 800b63a:	6923      	ldr	r3, [r4, #16]
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	89a3      	ldrh	r3, [r4, #12]
 800b640:	f043 0308 	orr.w	r3, r3, #8
 800b644:	81a3      	strh	r3, [r4, #12]
 800b646:	6923      	ldr	r3, [r4, #16]
 800b648:	b94b      	cbnz	r3, 800b65e <__swsetup_r+0x7a>
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b654:	d003      	beq.n	800b65e <__swsetup_r+0x7a>
 800b656:	4621      	mov	r1, r4
 800b658:	4628      	mov	r0, r5
 800b65a:	f000 f883 	bl	800b764 <__smakebuf_r>
 800b65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b662:	f013 0201 	ands.w	r2, r3, #1
 800b666:	d00a      	beq.n	800b67e <__swsetup_r+0x9a>
 800b668:	2200      	movs	r2, #0
 800b66a:	60a2      	str	r2, [r4, #8]
 800b66c:	6962      	ldr	r2, [r4, #20]
 800b66e:	4252      	negs	r2, r2
 800b670:	61a2      	str	r2, [r4, #24]
 800b672:	6922      	ldr	r2, [r4, #16]
 800b674:	b942      	cbnz	r2, 800b688 <__swsetup_r+0xa4>
 800b676:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b67a:	d1c5      	bne.n	800b608 <__swsetup_r+0x24>
 800b67c:	bd38      	pop	{r3, r4, r5, pc}
 800b67e:	0799      	lsls	r1, r3, #30
 800b680:	bf58      	it	pl
 800b682:	6962      	ldrpl	r2, [r4, #20]
 800b684:	60a2      	str	r2, [r4, #8]
 800b686:	e7f4      	b.n	800b672 <__swsetup_r+0x8e>
 800b688:	2000      	movs	r0, #0
 800b68a:	e7f7      	b.n	800b67c <__swsetup_r+0x98>
 800b68c:	2000001c 	.word	0x2000001c

0800b690 <_raise_r>:
 800b690:	291f      	cmp	r1, #31
 800b692:	b538      	push	{r3, r4, r5, lr}
 800b694:	4605      	mov	r5, r0
 800b696:	460c      	mov	r4, r1
 800b698:	d904      	bls.n	800b6a4 <_raise_r+0x14>
 800b69a:	2316      	movs	r3, #22
 800b69c:	6003      	str	r3, [r0, #0]
 800b69e:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a2:	bd38      	pop	{r3, r4, r5, pc}
 800b6a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b6a6:	b112      	cbz	r2, 800b6ae <_raise_r+0x1e>
 800b6a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6ac:	b94b      	cbnz	r3, 800b6c2 <_raise_r+0x32>
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f000 f830 	bl	800b714 <_getpid_r>
 800b6b4:	4622      	mov	r2, r4
 800b6b6:	4601      	mov	r1, r0
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6be:	f000 b817 	b.w	800b6f0 <_kill_r>
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d00a      	beq.n	800b6dc <_raise_r+0x4c>
 800b6c6:	1c59      	adds	r1, r3, #1
 800b6c8:	d103      	bne.n	800b6d2 <_raise_r+0x42>
 800b6ca:	2316      	movs	r3, #22
 800b6cc:	6003      	str	r3, [r0, #0]
 800b6ce:	2001      	movs	r0, #1
 800b6d0:	e7e7      	b.n	800b6a2 <_raise_r+0x12>
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b6d8:	4620      	mov	r0, r4
 800b6da:	4798      	blx	r3
 800b6dc:	2000      	movs	r0, #0
 800b6de:	e7e0      	b.n	800b6a2 <_raise_r+0x12>

0800b6e0 <raise>:
 800b6e0:	4b02      	ldr	r3, [pc, #8]	@ (800b6ec <raise+0xc>)
 800b6e2:	4601      	mov	r1, r0
 800b6e4:	6818      	ldr	r0, [r3, #0]
 800b6e6:	f7ff bfd3 	b.w	800b690 <_raise_r>
 800b6ea:	bf00      	nop
 800b6ec:	2000001c 	.word	0x2000001c

0800b6f0 <_kill_r>:
 800b6f0:	b538      	push	{r3, r4, r5, lr}
 800b6f2:	4d07      	ldr	r5, [pc, #28]	@ (800b710 <_kill_r+0x20>)
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	4608      	mov	r0, r1
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	602b      	str	r3, [r5, #0]
 800b6fe:	f7f5 fdaf 	bl	8001260 <_kill>
 800b702:	1c43      	adds	r3, r0, #1
 800b704:	d102      	bne.n	800b70c <_kill_r+0x1c>
 800b706:	682b      	ldr	r3, [r5, #0]
 800b708:	b103      	cbz	r3, 800b70c <_kill_r+0x1c>
 800b70a:	6023      	str	r3, [r4, #0]
 800b70c:	bd38      	pop	{r3, r4, r5, pc}
 800b70e:	bf00      	nop
 800b710:	200055b8 	.word	0x200055b8

0800b714 <_getpid_r>:
 800b714:	f7f5 bd9c 	b.w	8001250 <_getpid>

0800b718 <__swhatbuf_r>:
 800b718:	b570      	push	{r4, r5, r6, lr}
 800b71a:	460c      	mov	r4, r1
 800b71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b720:	2900      	cmp	r1, #0
 800b722:	b096      	sub	sp, #88	@ 0x58
 800b724:	4615      	mov	r5, r2
 800b726:	461e      	mov	r6, r3
 800b728:	da0d      	bge.n	800b746 <__swhatbuf_r+0x2e>
 800b72a:	89a3      	ldrh	r3, [r4, #12]
 800b72c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b730:	f04f 0100 	mov.w	r1, #0
 800b734:	bf14      	ite	ne
 800b736:	2340      	movne	r3, #64	@ 0x40
 800b738:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b73c:	2000      	movs	r0, #0
 800b73e:	6031      	str	r1, [r6, #0]
 800b740:	602b      	str	r3, [r5, #0]
 800b742:	b016      	add	sp, #88	@ 0x58
 800b744:	bd70      	pop	{r4, r5, r6, pc}
 800b746:	466a      	mov	r2, sp
 800b748:	f000 f848 	bl	800b7dc <_fstat_r>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	dbec      	blt.n	800b72a <__swhatbuf_r+0x12>
 800b750:	9901      	ldr	r1, [sp, #4]
 800b752:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b756:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b75a:	4259      	negs	r1, r3
 800b75c:	4159      	adcs	r1, r3
 800b75e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b762:	e7eb      	b.n	800b73c <__swhatbuf_r+0x24>

0800b764 <__smakebuf_r>:
 800b764:	898b      	ldrh	r3, [r1, #12]
 800b766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b768:	079d      	lsls	r5, r3, #30
 800b76a:	4606      	mov	r6, r0
 800b76c:	460c      	mov	r4, r1
 800b76e:	d507      	bpl.n	800b780 <__smakebuf_r+0x1c>
 800b770:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	6123      	str	r3, [r4, #16]
 800b778:	2301      	movs	r3, #1
 800b77a:	6163      	str	r3, [r4, #20]
 800b77c:	b003      	add	sp, #12
 800b77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b780:	ab01      	add	r3, sp, #4
 800b782:	466a      	mov	r2, sp
 800b784:	f7ff ffc8 	bl	800b718 <__swhatbuf_r>
 800b788:	9f00      	ldr	r7, [sp, #0]
 800b78a:	4605      	mov	r5, r0
 800b78c:	4639      	mov	r1, r7
 800b78e:	4630      	mov	r0, r6
 800b790:	f7fe fed4 	bl	800a53c <_malloc_r>
 800b794:	b948      	cbnz	r0, 800b7aa <__smakebuf_r+0x46>
 800b796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b79a:	059a      	lsls	r2, r3, #22
 800b79c:	d4ee      	bmi.n	800b77c <__smakebuf_r+0x18>
 800b79e:	f023 0303 	bic.w	r3, r3, #3
 800b7a2:	f043 0302 	orr.w	r3, r3, #2
 800b7a6:	81a3      	strh	r3, [r4, #12]
 800b7a8:	e7e2      	b.n	800b770 <__smakebuf_r+0xc>
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	6020      	str	r0, [r4, #0]
 800b7ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7b2:	81a3      	strh	r3, [r4, #12]
 800b7b4:	9b01      	ldr	r3, [sp, #4]
 800b7b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b7ba:	b15b      	cbz	r3, 800b7d4 <__smakebuf_r+0x70>
 800b7bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f000 f81d 	bl	800b800 <_isatty_r>
 800b7c6:	b128      	cbz	r0, 800b7d4 <__smakebuf_r+0x70>
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	f023 0303 	bic.w	r3, r3, #3
 800b7ce:	f043 0301 	orr.w	r3, r3, #1
 800b7d2:	81a3      	strh	r3, [r4, #12]
 800b7d4:	89a3      	ldrh	r3, [r4, #12]
 800b7d6:	431d      	orrs	r5, r3
 800b7d8:	81a5      	strh	r5, [r4, #12]
 800b7da:	e7cf      	b.n	800b77c <__smakebuf_r+0x18>

0800b7dc <_fstat_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	4d07      	ldr	r5, [pc, #28]	@ (800b7fc <_fstat_r+0x20>)
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	4608      	mov	r0, r1
 800b7e6:	4611      	mov	r1, r2
 800b7e8:	602b      	str	r3, [r5, #0]
 800b7ea:	f7f5 fd99 	bl	8001320 <_fstat>
 800b7ee:	1c43      	adds	r3, r0, #1
 800b7f0:	d102      	bne.n	800b7f8 <_fstat_r+0x1c>
 800b7f2:	682b      	ldr	r3, [r5, #0]
 800b7f4:	b103      	cbz	r3, 800b7f8 <_fstat_r+0x1c>
 800b7f6:	6023      	str	r3, [r4, #0]
 800b7f8:	bd38      	pop	{r3, r4, r5, pc}
 800b7fa:	bf00      	nop
 800b7fc:	200055b8 	.word	0x200055b8

0800b800 <_isatty_r>:
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	4d06      	ldr	r5, [pc, #24]	@ (800b81c <_isatty_r+0x1c>)
 800b804:	2300      	movs	r3, #0
 800b806:	4604      	mov	r4, r0
 800b808:	4608      	mov	r0, r1
 800b80a:	602b      	str	r3, [r5, #0]
 800b80c:	f7f5 fd98 	bl	8001340 <_isatty>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d102      	bne.n	800b81a <_isatty_r+0x1a>
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	b103      	cbz	r3, 800b81a <_isatty_r+0x1a>
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	200055b8 	.word	0x200055b8

0800b820 <_init>:
 800b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b822:	bf00      	nop
 800b824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b826:	bc08      	pop	{r3}
 800b828:	469e      	mov	lr, r3
 800b82a:	4770      	bx	lr

0800b82c <_fini>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	bf00      	nop
 800b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b832:	bc08      	pop	{r3}
 800b834:	469e      	mov	lr, r3
 800b836:	4770      	bx	lr
