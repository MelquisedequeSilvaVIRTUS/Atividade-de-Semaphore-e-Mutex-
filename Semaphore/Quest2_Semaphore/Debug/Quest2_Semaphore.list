
Quest2_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008224  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08008424  08008424  00009424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008580  08008580  0000a1a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008580  08008580  00009580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008588  08008588  0000a1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008588  08008588  00009588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800858c  0800858c  0000958c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008590  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  080085f0  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08008690  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000051f8  200001a0  08008730  0000a1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005398  08008730  0000a398  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002255e  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041e6  00000000  00000000  0002c72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a40  00000000  00000000  00030918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001478  00000000  00000000  00032358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000407b  00000000  00000000  000337d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001eaca  00000000  00000000  0003784b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010db19  00000000  00000000  00056315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00163e2e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000072dc  00000000  00000000  00163e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  0016b150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800840c 	.word	0x0800840c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	0800840c 	.word	0x0800840c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b988 	b.w	8000578 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	468e      	mov	lr, r1
 8000288:	4604      	mov	r4, r0
 800028a:	4688      	mov	r8, r1
 800028c:	2b00      	cmp	r3, #0
 800028e:	d14a      	bne.n	8000326 <__udivmoddi4+0xa6>
 8000290:	428a      	cmp	r2, r1
 8000292:	4617      	mov	r7, r2
 8000294:	d962      	bls.n	800035c <__udivmoddi4+0xdc>
 8000296:	fab2 f682 	clz	r6, r2
 800029a:	b14e      	cbz	r6, 80002b0 <__udivmoddi4+0x30>
 800029c:	f1c6 0320 	rsb	r3, r6, #32
 80002a0:	fa01 f806 	lsl.w	r8, r1, r6
 80002a4:	fa20 f303 	lsr.w	r3, r0, r3
 80002a8:	40b7      	lsls	r7, r6
 80002aa:	ea43 0808 	orr.w	r8, r3, r8
 80002ae:	40b4      	lsls	r4, r6
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f fc87 	uxth.w	ip, r7
 80002b8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002bc:	0c23      	lsrs	r3, r4, #16
 80002be:	fb0e 8811 	mls	r8, lr, r1, r8
 80002c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002c6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x62>
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002d4:	f080 80ea 	bcs.w	80004ac <__udivmoddi4+0x22c>
 80002d8:	429a      	cmp	r2, r3
 80002da:	f240 80e7 	bls.w	80004ac <__udivmoddi4+0x22c>
 80002de:	3902      	subs	r1, #2
 80002e0:	443b      	add	r3, r7
 80002e2:	1a9a      	subs	r2, r3, r2
 80002e4:	b2a3      	uxth	r3, r4
 80002e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002f2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002f6:	459c      	cmp	ip, r3
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0x8e>
 80002fa:	18fb      	adds	r3, r7, r3
 80002fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000300:	f080 80d6 	bcs.w	80004b0 <__udivmoddi4+0x230>
 8000304:	459c      	cmp	ip, r3
 8000306:	f240 80d3 	bls.w	80004b0 <__udivmoddi4+0x230>
 800030a:	443b      	add	r3, r7
 800030c:	3802      	subs	r0, #2
 800030e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000312:	eba3 030c 	sub.w	r3, r3, ip
 8000316:	2100      	movs	r1, #0
 8000318:	b11d      	cbz	r5, 8000322 <__udivmoddi4+0xa2>
 800031a:	40f3      	lsrs	r3, r6
 800031c:	2200      	movs	r2, #0
 800031e:	e9c5 3200 	strd	r3, r2, [r5]
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d905      	bls.n	8000336 <__udivmoddi4+0xb6>
 800032a:	b10d      	cbz	r5, 8000330 <__udivmoddi4+0xb0>
 800032c:	e9c5 0100 	strd	r0, r1, [r5]
 8000330:	2100      	movs	r1, #0
 8000332:	4608      	mov	r0, r1
 8000334:	e7f5      	b.n	8000322 <__udivmoddi4+0xa2>
 8000336:	fab3 f183 	clz	r1, r3
 800033a:	2900      	cmp	r1, #0
 800033c:	d146      	bne.n	80003cc <__udivmoddi4+0x14c>
 800033e:	4573      	cmp	r3, lr
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0xc8>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 8105 	bhi.w	8000552 <__udivmoddi4+0x2d2>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb6e 0203 	sbc.w	r2, lr, r3
 800034e:	2001      	movs	r0, #1
 8000350:	4690      	mov	r8, r2
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0e5      	beq.n	8000322 <__udivmoddi4+0xa2>
 8000356:	e9c5 4800 	strd	r4, r8, [r5]
 800035a:	e7e2      	b.n	8000322 <__udivmoddi4+0xa2>
 800035c:	2a00      	cmp	r2, #0
 800035e:	f000 8090 	beq.w	8000482 <__udivmoddi4+0x202>
 8000362:	fab2 f682 	clz	r6, r2
 8000366:	2e00      	cmp	r6, #0
 8000368:	f040 80a4 	bne.w	80004b4 <__udivmoddi4+0x234>
 800036c:	1a8a      	subs	r2, r1, r2
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	b280      	uxth	r0, r0
 8000376:	b2bc      	uxth	r4, r7
 8000378:	2101      	movs	r1, #1
 800037a:	fbb2 fcfe 	udiv	ip, r2, lr
 800037e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000386:	fb04 f20c 	mul.w	r2, r4, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d907      	bls.n	800039e <__udivmoddi4+0x11e>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x11c>
 8000396:	429a      	cmp	r2, r3
 8000398:	f200 80e0 	bhi.w	800055c <__udivmoddi4+0x2dc>
 800039c:	46c4      	mov	ip, r8
 800039e:	1a9b      	subs	r3, r3, r2
 80003a0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003a4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ac:	fb02 f404 	mul.w	r4, r2, r4
 80003b0:	429c      	cmp	r4, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x144>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x142>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f200 80ca 	bhi.w	8000556 <__udivmoddi4+0x2d6>
 80003c2:	4602      	mov	r2, r0
 80003c4:	1b1b      	subs	r3, r3, r4
 80003c6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0x98>
 80003cc:	f1c1 0620 	rsb	r6, r1, #32
 80003d0:	408b      	lsls	r3, r1
 80003d2:	fa22 f706 	lsr.w	r7, r2, r6
 80003d6:	431f      	orrs	r7, r3
 80003d8:	fa0e f401 	lsl.w	r4, lr, r1
 80003dc:	fa20 f306 	lsr.w	r3, r0, r6
 80003e0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003e8:	4323      	orrs	r3, r4
 80003ea:	fa00 f801 	lsl.w	r8, r0, r1
 80003ee:	fa1f fc87 	uxth.w	ip, r7
 80003f2:	fbbe f0f9 	udiv	r0, lr, r9
 80003f6:	0c1c      	lsrs	r4, r3, #16
 80003f8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000400:	fb00 fe0c 	mul.w	lr, r0, ip
 8000404:	45a6      	cmp	lr, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x1a0>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000412:	f080 809c 	bcs.w	800054e <__udivmoddi4+0x2ce>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f240 8099 	bls.w	800054e <__udivmoddi4+0x2ce>
 800041c:	3802      	subs	r0, #2
 800041e:	443c      	add	r4, r7
 8000420:	eba4 040e 	sub.w	r4, r4, lr
 8000424:	fa1f fe83 	uxth.w	lr, r3
 8000428:	fbb4 f3f9 	udiv	r3, r4, r9
 800042c:	fb09 4413 	mls	r4, r9, r3, r4
 8000430:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000434:	fb03 fc0c 	mul.w	ip, r3, ip
 8000438:	45a4      	cmp	ip, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x1ce>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000442:	f080 8082 	bcs.w	800054a <__udivmoddi4+0x2ca>
 8000446:	45a4      	cmp	ip, r4
 8000448:	d97f      	bls.n	800054a <__udivmoddi4+0x2ca>
 800044a:	3b02      	subs	r3, #2
 800044c:	443c      	add	r4, r7
 800044e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	fba0 ec02 	umull	lr, ip, r0, r2
 800045a:	4564      	cmp	r4, ip
 800045c:	4673      	mov	r3, lr
 800045e:	46e1      	mov	r9, ip
 8000460:	d362      	bcc.n	8000528 <__udivmoddi4+0x2a8>
 8000462:	d05f      	beq.n	8000524 <__udivmoddi4+0x2a4>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x1fe>
 8000466:	ebb8 0203 	subs.w	r2, r8, r3
 800046a:	eb64 0409 	sbc.w	r4, r4, r9
 800046e:	fa04 f606 	lsl.w	r6, r4, r6
 8000472:	fa22 f301 	lsr.w	r3, r2, r1
 8000476:	431e      	orrs	r6, r3
 8000478:	40cc      	lsrs	r4, r1
 800047a:	e9c5 6400 	strd	r6, r4, [r5]
 800047e:	2100      	movs	r1, #0
 8000480:	e74f      	b.n	8000322 <__udivmoddi4+0xa2>
 8000482:	fbb1 fcf2 	udiv	ip, r1, r2
 8000486:	0c01      	lsrs	r1, r0, #16
 8000488:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800048c:	b280      	uxth	r0, r0
 800048e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000492:	463b      	mov	r3, r7
 8000494:	4638      	mov	r0, r7
 8000496:	463c      	mov	r4, r7
 8000498:	46b8      	mov	r8, r7
 800049a:	46be      	mov	lr, r7
 800049c:	2620      	movs	r6, #32
 800049e:	fbb1 f1f7 	udiv	r1, r1, r7
 80004a2:	eba2 0208 	sub.w	r2, r2, r8
 80004a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004aa:	e766      	b.n	800037a <__udivmoddi4+0xfa>
 80004ac:	4601      	mov	r1, r0
 80004ae:	e718      	b.n	80002e2 <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e72c      	b.n	800030e <__udivmoddi4+0x8e>
 80004b4:	f1c6 0220 	rsb	r2, r6, #32
 80004b8:	fa2e f302 	lsr.w	r3, lr, r2
 80004bc:	40b7      	lsls	r7, r6
 80004be:	40b1      	lsls	r1, r6
 80004c0:	fa20 f202 	lsr.w	r2, r0, r2
 80004c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c8:	430a      	orrs	r2, r1
 80004ca:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ce:	b2bc      	uxth	r4, r7
 80004d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb08 f904 	mul.w	r9, r8, r4
 80004de:	40b0      	lsls	r0, r6
 80004e0:	4589      	cmp	r9, r1
 80004e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004e6:	b280      	uxth	r0, r0
 80004e8:	d93e      	bls.n	8000568 <__udivmoddi4+0x2e8>
 80004ea:	1879      	adds	r1, r7, r1
 80004ec:	f108 3cff 	add.w	ip, r8, #4294967295
 80004f0:	d201      	bcs.n	80004f6 <__udivmoddi4+0x276>
 80004f2:	4589      	cmp	r9, r1
 80004f4:	d81f      	bhi.n	8000536 <__udivmoddi4+0x2b6>
 80004f6:	eba1 0109 	sub.w	r1, r1, r9
 80004fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fe:	fb09 f804 	mul.w	r8, r9, r4
 8000502:	fb0e 1119 	mls	r1, lr, r9, r1
 8000506:	b292      	uxth	r2, r2
 8000508:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800050c:	4542      	cmp	r2, r8
 800050e:	d229      	bcs.n	8000564 <__udivmoddi4+0x2e4>
 8000510:	18ba      	adds	r2, r7, r2
 8000512:	f109 31ff 	add.w	r1, r9, #4294967295
 8000516:	d2c4      	bcs.n	80004a2 <__udivmoddi4+0x222>
 8000518:	4542      	cmp	r2, r8
 800051a:	d2c2      	bcs.n	80004a2 <__udivmoddi4+0x222>
 800051c:	f1a9 0102 	sub.w	r1, r9, #2
 8000520:	443a      	add	r2, r7
 8000522:	e7be      	b.n	80004a2 <__udivmoddi4+0x222>
 8000524:	45f0      	cmp	r8, lr
 8000526:	d29d      	bcs.n	8000464 <__udivmoddi4+0x1e4>
 8000528:	ebbe 0302 	subs.w	r3, lr, r2
 800052c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000530:	3801      	subs	r0, #1
 8000532:	46e1      	mov	r9, ip
 8000534:	e796      	b.n	8000464 <__udivmoddi4+0x1e4>
 8000536:	eba7 0909 	sub.w	r9, r7, r9
 800053a:	4449      	add	r1, r9
 800053c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000540:	fbb1 f9fe 	udiv	r9, r1, lr
 8000544:	fb09 f804 	mul.w	r8, r9, r4
 8000548:	e7db      	b.n	8000502 <__udivmoddi4+0x282>
 800054a:	4673      	mov	r3, lr
 800054c:	e77f      	b.n	800044e <__udivmoddi4+0x1ce>
 800054e:	4650      	mov	r0, sl
 8000550:	e766      	b.n	8000420 <__udivmoddi4+0x1a0>
 8000552:	4608      	mov	r0, r1
 8000554:	e6fd      	b.n	8000352 <__udivmoddi4+0xd2>
 8000556:	443b      	add	r3, r7
 8000558:	3a02      	subs	r2, #2
 800055a:	e733      	b.n	80003c4 <__udivmoddi4+0x144>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	443b      	add	r3, r7
 8000562:	e71c      	b.n	800039e <__udivmoddi4+0x11e>
 8000564:	4649      	mov	r1, r9
 8000566:	e79c      	b.n	80004a2 <__udivmoddi4+0x222>
 8000568:	eba1 0109 	sub.w	r1, r1, r9
 800056c:	46c4      	mov	ip, r8
 800056e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000572:	fb09 f804 	mul.w	r8, r9, r4
 8000576:	e7c4      	b.n	8000502 <__udivmoddi4+0x282>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fd97 	bl	80010b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f844 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f960 	bl	800084c <MX_GPIO_Init>
  MX_ETH_Init();
 800058c:	f000 f8b2 	bl	80006f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000590:	f000 f8fe 	bl	8000790 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000594:	f000 f92c 	bl	80007f0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000598:	f004 f9f0 	bl	800497c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 0, &myCountingSem01_attributes);
 800059c:	4a11      	ldr	r2, [pc, #68]	@ (80005e4 <main+0x68>)
 800059e:	2100      	movs	r1, #0
 80005a0:	2002      	movs	r0, #2
 80005a2:	f004 fb29 	bl	8004bf8 <osSemaphoreNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <main+0x6c>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 80005ac:	4a0f      	ldr	r2, [pc, #60]	@ (80005ec <main+0x70>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	480f      	ldr	r0, [pc, #60]	@ (80005f0 <main+0x74>)
 80005b2:	f004 fa4d 	bl	8004a50 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0e      	ldr	r2, [pc, #56]	@ (80005f4 <main+0x78>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005bc:	4a0e      	ldr	r2, [pc, #56]	@ (80005f8 <main+0x7c>)
 80005be:	2100      	movs	r1, #0
 80005c0:	480e      	ldr	r0, [pc, #56]	@ (80005fc <main+0x80>)
 80005c2:	f004 fa45 	bl	8004a50 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <main+0x84>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80005cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <main+0x88>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <main+0x8c>)
 80005d2:	f004 fa3d 	bl	8004a50 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0c      	ldr	r2, [pc, #48]	@ (800060c <main+0x90>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005dc:	f004 fa02 	bl	80049e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0x64>
 80005e4:	08008558 	.word	0x08008558
 80005e8:	20000818 	.word	0x20000818
 80005ec:	080084ec 	.word	0x080084ec
 80005f0:	080009f5 	.word	0x080009f5
 80005f4:	2000080c 	.word	0x2000080c
 80005f8:	08008510 	.word	0x08008510
 80005fc:	08000a6d 	.word	0x08000a6d
 8000600:	20000810 	.word	0x20000810
 8000604:	08008534 	.word	0x08008534
 8000608:	08000ae5 	.word	0x08000ae5
 800060c:	20000814 	.word	0x20000814

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	@ 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f007 fe04 	bl	800822c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000634:	f001 fcf0 	bl	8002018 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	4b2c      	ldr	r3, [pc, #176]	@ (80006ec <SystemClock_Config+0xdc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a2b      	ldr	r2, [pc, #172]	@ (80006ec <SystemClock_Config+0xdc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <SystemClock_Config+0xdc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <SystemClock_Config+0xe0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000658:	4a25      	ldr	r2, [pc, #148]	@ (80006f0 <SystemClock_Config+0xe0>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <SystemClock_Config+0xe0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000674:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000684:	2360      	movs	r3, #96	@ 0x60
 8000686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000690:	2302      	movs	r3, #2
 8000692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fd1d 	bl	80020d8 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a4:	f000 fa6c 	bl	8000b80 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a8:	f001 fcc6 	bl	8002038 <HAL_PWREx_EnableOverDrive>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006b2:	f000 fa65 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2103      	movs	r1, #3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 ffae 	bl	8002634 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006de:	f000 fa4f 	bl	8000b80 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <MX_ETH_Init+0x84>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <MX_ETH_Init+0x88>)
 80006fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <MX_ETH_Init+0x8c>)
 800070c:	22e1      	movs	r2, #225	@ 0xe1
 800070e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_ETH_Init+0x8c>)
 800071e:	2200      	movs	r2, #0
 8000720:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_ETH_Init+0x84>)
 8000724:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000726:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_ETH_Init+0x84>)
 800072a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800072e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_ETH_Init+0x84>)
 8000732:	4a14      	ldr	r2, [pc, #80]	@ (8000784 <MX_ETH_Init+0x90>)
 8000734:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_ETH_Init+0x84>)
 8000738:	4a13      	ldr	r2, [pc, #76]	@ (8000788 <MX_ETH_Init+0x94>)
 800073a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_ETH_Init+0x84>)
 800073e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000742:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <MX_ETH_Init+0x84>)
 8000746:	f000 fde7 	bl	8001318 <HAL_ETH_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000750:	f000 fa16 	bl	8000b80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000754:	2238      	movs	r2, #56	@ 0x38
 8000756:	2100      	movs	r1, #0
 8000758:	480c      	ldr	r0, [pc, #48]	@ (800078c <MX_ETH_Init+0x98>)
 800075a:	f007 fd67 	bl	800822c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_ETH_Init+0x98>)
 8000760:	2221      	movs	r2, #33	@ 0x21
 8000762:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_ETH_Init+0x98>)
 8000766:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800076a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <MX_ETH_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200001f4 	.word	0x200001f4
 800077c:	40028000 	.word	0x40028000
 8000780:	20000820 	.word	0x20000820
 8000784:	20000100 	.word	0x20000100
 8000788:	20000060 	.word	0x20000060
 800078c:	200001bc 	.word	0x200001bc

08000790 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <MX_USART3_UART_Init+0x5c>)
 8000798:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007d4:	f003 f87c 	bl	80038d0 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 f9cf 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200002a4 	.word	0x200002a4
 80007ec:	40004800 	.word	0x40004800

080007f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2206      	movs	r2, #6
 8000800:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	2202      	movs	r2, #2
 8000806:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	2202      	movs	r2, #2
 8000812:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2201      	movs	r2, #1
 8000818:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2201      	movs	r2, #1
 800082a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	f001 fab6 	bl	8001da4 <HAL_PCD_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f99f 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000032c 	.word	0x2000032c

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	@ 0x30
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b4b      	ldr	r3, [pc, #300]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a4a      	ldr	r2, [pc, #296]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b48      	ldr	r3, [pc, #288]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	4b45      	ldr	r3, [pc, #276]	@ (8000990 <MX_GPIO_Init+0x144>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a44      	ldr	r2, [pc, #272]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b42      	ldr	r3, [pc, #264]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b3f      	ldr	r3, [pc, #252]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a3e      	ldr	r2, [pc, #248]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b3c      	ldr	r3, [pc, #240]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b39      	ldr	r3, [pc, #228]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a38      	ldr	r2, [pc, #224]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b36      	ldr	r3, [pc, #216]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	4b33      	ldr	r3, [pc, #204]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a32      	ldr	r2, [pc, #200]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b30      	ldr	r3, [pc, #192]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008da:	4b2d      	ldr	r3, [pc, #180]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a2c      	ldr	r2, [pc, #176]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008f8:	4826      	ldr	r0, [pc, #152]	@ (8000994 <MX_GPIO_Init+0x148>)
 80008fa:	f001 fa07 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2140      	movs	r1, #64	@ 0x40
 8000902:	4825      	ldr	r0, [pc, #148]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000904:	f001 fa02 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000908:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	481f      	ldr	r0, [pc, #124]	@ (800099c <MX_GPIO_Init+0x150>)
 8000920:	f001 f848 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000924:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4815      	ldr	r0, [pc, #84]	@ (8000994 <MX_GPIO_Init+0x148>)
 800093e:	f001 f839 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000942:	2340      	movs	r3, #64	@ 0x40
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	480f      	ldr	r0, [pc, #60]	@ (8000998 <MX_GPIO_Init+0x14c>)
 800095a:	f001 f82b 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800095e:	2380      	movs	r3, #128	@ 0x80
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4809      	ldr	r0, [pc, #36]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000972:	f001 f81f 	bl	80019b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2105      	movs	r1, #5
 800097a:	2028      	movs	r0, #40	@ 0x28
 800097c:	f000 fca2 	bl	80012c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000980:	2028      	movs	r0, #40	@ 0x28
 8000982:	f000 fcbb 	bl	80012fc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	@ 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40020400 	.word	0x40020400
 8000998:	40021800 	.word	0x40021800
 800099c:	40020800 	.word	0x40020800

080009a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	80fb      	strh	r3, [r7, #6]
	if(pin == USER_Btn_Pin)
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009b0:	d115      	bne.n	80009de <HAL_GPIO_EXTI_Callback+0x3e>
	{
		char *str = "Release! /r/n";
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0x48>)
 80009b4:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), 100);
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f7ff fc42 	bl	8000240 <strlen>
 80009bc:	4603      	mov	r3, r0
 80009be:	b29a      	uxth	r2, r3
 80009c0:	2364      	movs	r3, #100	@ 0x64
 80009c2:	68f9      	ldr	r1, [r7, #12]
 80009c4:	4809      	ldr	r0, [pc, #36]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x4c>)
 80009c6:	f002 ffd1 	bl	800396c <HAL_UART_Transmit>


		osSemaphoreRelease(myCountingSem01Handle);
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 fa14 	bl	8004dfc <osSemaphoreRelease>
		osSemaphoreRelease(myCountingSem01Handle);
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f004 fa0f 	bl	8004dfc <osSemaphoreRelease>
	}
}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	08008458 	.word	0x08008458
 80009ec:	200002a4 	.word	0x200002a4
 80009f0:	20000818 	.word	0x20000818

080009f4 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  count = osSemaphoreGetCount(myCountingSem01Handle);
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <StartTask01+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f004 fa53 	bl	8004eac <osSemaphoreGetCount>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a14      	ldr	r2, [pc, #80]	@ (8000a5c <StartTask01+0x68>)
 8000a0a:	6013      	str	r3, [r2, #0]
	  osSemaphoreAcquire(myCountingSem01Handle, osWaitForever);
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <StartTask01+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295
 8000a14:	4618      	mov	r0, r3
 8000a16:	f004 f98b 	bl	8004d30 <osSemaphoreAcquire>
	  count = osSemaphoreGetCount(myCountingSem01Handle);
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <StartTask01+0x64>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f004 fa44 	bl	8004eac <osSemaphoreGetCount>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <StartTask01+0x68>)
 8000a28:	6013      	str	r3, [r2, #0]


	  char *str =  "Task 01 adquirindo semaforo!/r/n";
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <StartTask01+0x6c>)
 8000a2c:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), 100);
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff fc06 	bl	8000240 <strlen>
 8000a34:	4603      	mov	r3, r0
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	2364      	movs	r3, #100	@ 0x64
 8000a3a:	68f9      	ldr	r1, [r7, #12]
 8000a3c:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <StartTask01+0x70>)
 8000a3e:	f002 ff95 	bl	800396c <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a42:	2101      	movs	r1, #1
 8000a44:	4808      	ldr	r0, [pc, #32]	@ (8000a68 <StartTask01+0x74>)
 8000a46:	f001 f97a 	bl	8001d3e <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000a4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a4e:	f004 f8a5 	bl	8004b9c <osDelay>
  {
 8000a52:	bf00      	nop
 8000a54:	e7d2      	b.n	80009fc <StartTask01+0x8>
 8000a56:	bf00      	nop
 8000a58:	20000818 	.word	0x20000818
 8000a5c:	2000081c 	.word	0x2000081c
 8000a60:	08008468 	.word	0x08008468
 8000a64:	200002a4 	.word	0x200002a4
 8000a68:	40020400 	.word	0x40020400

08000a6c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  count = osSemaphoreGetCount(myCountingSem01Handle);
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <StartTask02+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 fa17 	bl	8004eac <osSemaphoreGetCount>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4a14      	ldr	r2, [pc, #80]	@ (8000ad4 <StartTask02+0x68>)
 8000a82:	6013      	str	r3, [r2, #0]
	  osSemaphoreAcquire(myCountingSem01Handle, osWaitForever);
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <StartTask02+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 f94f 	bl	8004d30 <osSemaphoreAcquire>
	  count = osSemaphoreGetCount(myCountingSem01Handle);
 8000a92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <StartTask02+0x64>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 fa08 	bl	8004eac <osSemaphoreGetCount>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <StartTask02+0x68>)
 8000aa0:	6013      	str	r3, [r2, #0]


	  char *str =  "Task 02 adquirindo semaforo!/r/n";
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <StartTask02+0x6c>)
 8000aa4:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), 100);
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f7ff fbca 	bl	8000240 <strlen>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	2364      	movs	r3, #100	@ 0x64
 8000ab2:	68f9      	ldr	r1, [r7, #12]
 8000ab4:	4809      	ldr	r0, [pc, #36]	@ (8000adc <StartTask02+0x70>)
 8000ab6:	f002 ff59 	bl	800396c <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000aba:	2180      	movs	r1, #128	@ 0x80
 8000abc:	4808      	ldr	r0, [pc, #32]	@ (8000ae0 <StartTask02+0x74>)
 8000abe:	f001 f93e 	bl	8001d3e <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000ac2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ac6:	f004 f869 	bl	8004b9c <osDelay>
  {
 8000aca:	bf00      	nop
 8000acc:	e7d2      	b.n	8000a74 <StartTask02+0x8>
 8000ace:	bf00      	nop
 8000ad0:	20000818 	.word	0x20000818
 8000ad4:	2000081c 	.word	0x2000081c
 8000ad8:	0800848c 	.word	0x0800848c
 8000adc:	200002a4 	.word	0x200002a4
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  count = osSemaphoreGetCount(myCountingSem01Handle);
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <StartTask03+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f004 f9db 	bl	8004eac <osSemaphoreGetCount>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4a14      	ldr	r2, [pc, #80]	@ (8000b4c <StartTask03+0x68>)
 8000afa:	6013      	str	r3, [r2, #0]
	  osSemaphoreAcquire(myCountingSem01Handle, osWaitForever);
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <StartTask03+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 f913 	bl	8004d30 <osSemaphoreAcquire>
	  count = osSemaphoreGetCount(myCountingSem01Handle);
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <StartTask03+0x64>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f004 f9cc 	bl	8004eac <osSemaphoreGetCount>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <StartTask03+0x68>)
 8000b18:	6013      	str	r3, [r2, #0]


	  char *str =  "Task 03 adquirindo semaforo!/r/n";
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <StartTask03+0x6c>)
 8000b1c:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), 100);
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f7ff fb8e 	bl	8000240 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	2364      	movs	r3, #100	@ 0x64
 8000b2a:	68f9      	ldr	r1, [r7, #12]
 8000b2c:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <StartTask03+0x70>)
 8000b2e:	f002 ff1d 	bl	800396c <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b36:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <StartTask03+0x74>)
 8000b38:	f001 f901 	bl	8001d3e <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000b3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b40:	f004 f82c 	bl	8004b9c <osDelay>
  {
 8000b44:	bf00      	nop
 8000b46:	e7d1      	b.n	8000aec <StartTask03+0x8>
 8000b48:	20000818 	.word	0x20000818
 8000b4c:	2000081c 	.word	0x2000081c
 8000b50:	080084b0 	.word	0x080084b0
 8000b54:	200002a4 	.word	0x200002a4
 8000b58:	40020400 	.word	0x40020400

08000b5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000b6e:	f000 faad 	bl	80010cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40010000 	.word	0x40010000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a10      	ldr	r2, [pc, #64]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	f06f 0001 	mvn.w	r0, #1
 8000bca:	f000 fb7b 	bl	80012c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	@ 0x38
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a4e      	ldr	r2, [pc, #312]	@ (8000d34 <HAL_ETH_MspInit+0x158>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	f040 8096 	bne.w	8000d2c <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c00:	4b4d      	ldr	r3, [pc, #308]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c04:	4a4c      	ldr	r2, [pc, #304]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c14:	623b      	str	r3, [r7, #32]
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	4b47      	ldr	r3, [pc, #284]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1c:	4a46      	ldr	r2, [pc, #280]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c24:	4b44      	ldr	r3, [pc, #272]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	4b41      	ldr	r3, [pc, #260]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c34:	4a40      	ldr	r2, [pc, #256]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c48:	4b3b      	ldr	r3, [pc, #236]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c54:	4b38      	ldr	r3, [pc, #224]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b35      	ldr	r3, [pc, #212]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c64:	4a34      	ldr	r2, [pc, #208]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6c:	4b32      	ldr	r3, [pc, #200]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	4b2f      	ldr	r3, [pc, #188]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c7e:	f043 0302 	orr.w	r3, r3, #2
 8000c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c84:	4b2c      	ldr	r3, [pc, #176]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c90:	4b29      	ldr	r3, [pc, #164]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c94:	4a28      	ldr	r2, [pc, #160]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9c:	4b26      	ldr	r3, [pc, #152]	@ (8000d38 <HAL_ETH_MspInit+0x15c>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ca8:	2332      	movs	r3, #50	@ 0x32
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb8:	230b      	movs	r3, #11
 8000cba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	481e      	ldr	r0, [pc, #120]	@ (8000d3c <HAL_ETH_MspInit+0x160>)
 8000cc4:	f000 fe76 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cc8:	2386      	movs	r3, #134	@ 0x86
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd8:	230b      	movs	r3, #11
 8000cda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4817      	ldr	r0, [pc, #92]	@ (8000d40 <HAL_ETH_MspInit+0x164>)
 8000ce4:	f000 fe66 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ce8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfa:	230b      	movs	r3, #11
 8000cfc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	480f      	ldr	r0, [pc, #60]	@ (8000d44 <HAL_ETH_MspInit+0x168>)
 8000d06:	f000 fe55 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d0a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1c:	230b      	movs	r3, #11
 8000d1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d24:	4619      	mov	r1, r3
 8000d26:	4808      	ldr	r0, [pc, #32]	@ (8000d48 <HAL_ETH_MspInit+0x16c>)
 8000d28:	f000 fe44 	bl	80019b4 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3738      	adds	r7, #56	@ 0x38
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40028000 	.word	0x40028000
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020800 	.word	0x40020800
 8000d40:	40020000 	.word	0x40020000
 8000d44:	40020400 	.word	0x40020400
 8000d48:	40021800 	.word	0x40021800

08000d4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0ae      	sub	sp, #184	@ 0xb8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2290      	movs	r2, #144	@ 0x90
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f007 fa5d 	bl	800822c <memset>
  if(huart->Instance==USART3)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a22      	ldr	r2, [pc, #136]	@ (8000e00 <HAL_UART_MspInit+0xb4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d13c      	bne.n	8000df6 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 feaa 	bl	8002ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d96:	f7ff fef3 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <HAL_UART_MspInit+0xb8>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	4a19      	ldr	r2, [pc, #100]	@ (8000e04 <HAL_UART_MspInit+0xb8>)
 8000da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <HAL_UART_MspInit+0xb8>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <HAL_UART_MspInit+0xb8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a13      	ldr	r2, [pc, #76]	@ (8000e04 <HAL_UART_MspInit+0xb8>)
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <HAL_UART_MspInit+0xb8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de4:	2307      	movs	r3, #7
 8000de6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <HAL_UART_MspInit+0xbc>)
 8000df2:	f000 fddf 	bl	80019b4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000df6:	bf00      	nop
 8000df8:	37b8      	adds	r7, #184	@ 0xb8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40004800 	.word	0x40004800
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020c00 	.word	0x40020c00

08000e0c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0ae      	sub	sp, #184	@ 0xb8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2290      	movs	r2, #144	@ 0x90
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 f9fd 	bl	800822c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e3a:	d159      	bne.n	8000ef0 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e40:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fe49 	bl	8002ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e58:	f7ff fe92 	bl	8000b80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b26      	ldr	r3, [pc, #152]	@ (8000ef8 <HAL_PCD_MspInit+0xec>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	4a25      	ldr	r2, [pc, #148]	@ (8000ef8 <HAL_PCD_MspInit+0xec>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e68:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <HAL_PCD_MspInit+0xec>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e74:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e8e:	230a      	movs	r3, #10
 8000e90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4818      	ldr	r0, [pc, #96]	@ (8000efc <HAL_PCD_MspInit+0xf0>)
 8000e9c:	f000 fd8a 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ea0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4810      	ldr	r0, [pc, #64]	@ (8000efc <HAL_PCD_MspInit+0xf0>)
 8000ebc:	f000 fd7a 	bl	80019b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <HAL_PCD_MspInit+0xec>)
 8000ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef8 <HAL_PCD_MspInit+0xec>)
 8000ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eca:	6353      	str	r3, [r2, #52]	@ 0x34
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_PCD_MspInit+0xec>)
 8000ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <HAL_PCD_MspInit+0xec>)
 8000eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000edc:	4a06      	ldr	r2, [pc, #24]	@ (8000ef8 <HAL_PCD_MspInit+0xec>)
 8000ede:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee4:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <HAL_PCD_MspInit+0xec>)
 8000ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ef0:	bf00      	nop
 8000ef2:	37b8      	adds	r7, #184	@ 0xb8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	@ 0x30
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f10:	4b2e      	ldr	r3, [pc, #184]	@ (8000fcc <HAL_InitTick+0xcc>)
 8000f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f14:	4a2d      	ldr	r2, [pc, #180]	@ (8000fcc <HAL_InitTick+0xcc>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <HAL_InitTick+0xcc>)
 8000f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f28:	f107 020c 	add.w	r2, r7, #12
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fda4 	bl	8002a80 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f38:	f001 fd8e 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 8000f3c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f40:	4a23      	ldr	r2, [pc, #140]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	0c9b      	lsrs	r3, r3, #18
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <HAL_InitTick+0xd4>)
 8000f4e:	4a22      	ldr	r2, [pc, #136]	@ (8000fd8 <HAL_InitTick+0xd8>)
 8000f50:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <HAL_InitTick+0xd4>)
 8000f54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f58:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd4 <HAL_InitTick+0xd4>)
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <HAL_InitTick+0xd4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <HAL_InitTick+0xd4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_InitTick+0xd4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f72:	4818      	ldr	r0, [pc, #96]	@ (8000fd4 <HAL_InitTick+0xd4>)
 8000f74:	f002 f9de 	bl	8003334 <HAL_TIM_Base_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d11b      	bne.n	8000fbe <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f86:	4813      	ldr	r0, [pc, #76]	@ (8000fd4 <HAL_InitTick+0xd4>)
 8000f88:	f002 fa36 	bl	80033f8 <HAL_TIM_Base_Start_IT>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d111      	bne.n	8000fbe <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f9a:	2019      	movs	r0, #25
 8000f9c:	f000 f9ae 	bl	80012fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	d808      	bhi.n	8000fb8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	2019      	movs	r0, #25
 8000fac:	f000 f98a 	bl	80012c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <HAL_InitTick+0xdc>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e002      	b.n	8000fbe <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3730      	adds	r7, #48	@ 0x30
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	431bde83 	.word	0x431bde83
 8000fd4:	20000828 	.word	0x20000828
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <UsageFault_Handler+0x4>

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800101e:	f002 fa63 	bl	80034e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000828 	.word	0x20000828

0800102c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001030:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001034:	f000 fe9e 	bl	8001d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001098 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001064:	f7ff ffea 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001068:	480c      	ldr	r0, [pc, #48]	@ (800109c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106a:	490d      	ldr	r1, [pc, #52]	@ (80010a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800106c:	4a0d      	ldr	r2, [pc, #52]	@ (80010a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001080:	4c0a      	ldr	r4, [pc, #40]	@ (80010ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800108e:	f007 f933 	bl	80082f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fa73 	bl	800057c <main>
  bx  lr    
 8001096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001098:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010a4:	08008590 	.word	0x08008590
  ldr r2, =_sbss
 80010a8:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80010ac:	20005398 	.word	0x20005398

080010b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC_IRQHandler>

080010b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b6:	2003      	movs	r0, #3
 80010b8:	f000 f8f9 	bl	80012ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010bc:	200f      	movs	r0, #15
 80010be:	f7ff ff1f 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c2:	f7ff fd63 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	@ (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000874 	.word	0x20000874

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000874 	.word	0x20000874

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff ffee 	bl	80010f4 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d005      	beq.n	8001132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_Delay+0x44>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001132:	bf00      	nop
 8001134:	f7ff ffde 	bl	80010f4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8f7      	bhi.n	8001134 <HAL_Delay+0x28>
  {
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <__NVIC_SetPriorityGrouping+0x40>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	4313      	orrs	r3, r2
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	@ (8001194 <__NVIC_SetPriorityGrouping+0x40>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00
 8001198:	05fa0000 	.word	0x05fa0000

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	@ (80011f0 <__NVIC_EnableIRQ+0x38>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	@ (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	@ (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff4c 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d6:	f7ff ff61 	bl	800119c <__NVIC_GetPriorityGrouping>
 80012da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	6978      	ldr	r0, [r7, #20]
 80012e2:	f7ff ffb1 	bl	8001248 <NVIC_EncodePriority>
 80012e6:	4602      	mov	r2, r0
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff80 	bl	80011f4 <__NVIC_SetPriority>
}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff54 	bl	80011b8 <__NVIC_EnableIRQ>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e086      	b.n	8001438 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001330:	2b00      	cmp	r3, #0
 8001332:	d106      	bne.n	8001342 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2220      	movs	r2, #32
 8001338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fc4d 	bl	8000bdc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <HAL_ETH_Init+0x128>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	4a3e      	ldr	r2, [pc, #248]	@ (8001440 <HAL_ETH_Init+0x128>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134c:	6453      	str	r3, [r2, #68]	@ 0x44
 800134e:	4b3c      	ldr	r3, [pc, #240]	@ (8001440 <HAL_ETH_Init+0x128>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800135a:	4b3a      	ldr	r3, [pc, #232]	@ (8001444 <HAL_ETH_Init+0x12c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a39      	ldr	r2, [pc, #228]	@ (8001444 <HAL_ETH_Init+0x12c>)
 8001360:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001364:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001366:	4b37      	ldr	r3, [pc, #220]	@ (8001444 <HAL_ETH_Init+0x12c>)
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	4935      	ldr	r1, [pc, #212]	@ (8001444 <HAL_ETH_Init+0x12c>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001374:	4b33      	ldr	r3, [pc, #204]	@ (8001444 <HAL_ETH_Init+0x12c>)
 8001376:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800138e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001390:	f7ff feb0 	bl	80010f4 <HAL_GetTick>
 8001394:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001396:	e011      	b.n	80013bc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001398:	f7ff feac 	bl	80010f4 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013a6:	d909      	bls.n	80013bc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2204      	movs	r2, #4
 80013ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	22e0      	movs	r2, #224	@ 0xe0
 80013b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e03d      	b.n	8001438 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1e4      	bne.n	8001398 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f97a 	bl	80016c8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 fa25 	bl	8001824 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fa7b 	bl	80018d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	461a      	mov	r2, r3
 80013e6:	2100      	movs	r1, #0
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f9e3 	bl	80017b4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80013fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <HAL_ETH_Init+0x130>)
 800140c:	430b      	orrs	r3, r1
 800140e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001422:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2210      	movs	r2, #16
 8001432:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40013800 	.word	0x40013800
 8001448:	00020060 	.word	0x00020060

0800144c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4b53      	ldr	r3, [pc, #332]	@ (80015b0 <ETH_SetMACConfig+0x164>)
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	7b9b      	ldrb	r3, [r3, #14]
 800146a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	7c12      	ldrb	r2, [r2, #16]
 8001470:	2a00      	cmp	r2, #0
 8001472:	d102      	bne.n	800147a <ETH_SetMACConfig+0x2e>
 8001474:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001478:	e000      	b.n	800147c <ETH_SetMACConfig+0x30>
 800147a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800147c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	7c52      	ldrb	r2, [r2, #17]
 8001482:	2a00      	cmp	r2, #0
 8001484:	d102      	bne.n	800148c <ETH_SetMACConfig+0x40>
 8001486:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800148a:	e000      	b.n	800148e <ETH_SetMACConfig+0x42>
 800148c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800148e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001494:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	7fdb      	ldrb	r3, [r3, #31]
 800149a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800149c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	7f92      	ldrb	r2, [r2, #30]
 80014a8:	2a00      	cmp	r2, #0
 80014aa:	d102      	bne.n	80014b2 <ETH_SetMACConfig+0x66>
 80014ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014b0:	e000      	b.n	80014b4 <ETH_SetMACConfig+0x68>
 80014b2:	2200      	movs	r2, #0
                        macconf->Speed |
 80014b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	7f1b      	ldrb	r3, [r3, #28]
 80014ba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014bc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	791b      	ldrb	r3, [r3, #4]
 80014c8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014d2:	2a00      	cmp	r2, #0
 80014d4:	d102      	bne.n	80014dc <ETH_SetMACConfig+0x90>
 80014d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014da:	e000      	b.n	80014de <ETH_SetMACConfig+0x92>
 80014dc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	7bdb      	ldrb	r3, [r3, #15]
 80014e4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014e6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80014f4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014f6:	4313      	orrs	r3, r2
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff fdfc 	bl	800110c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800152a:	4013      	ands	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001532:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800153a:	2a00      	cmp	r2, #0
 800153c:	d101      	bne.n	8001542 <ETH_SetMACConfig+0xf6>
 800153e:	2280      	movs	r2, #128	@ 0x80
 8001540:	e000      	b.n	8001544 <ETH_SetMACConfig+0xf8>
 8001542:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001544:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800154a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001552:	2a01      	cmp	r2, #1
 8001554:	d101      	bne.n	800155a <ETH_SetMACConfig+0x10e>
 8001556:	2208      	movs	r2, #8
 8001558:	e000      	b.n	800155c <ETH_SetMACConfig+0x110>
 800155a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800155c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001564:	2a01      	cmp	r2, #1
 8001566:	d101      	bne.n	800156c <ETH_SetMACConfig+0x120>
 8001568:	2204      	movs	r2, #4
 800156a:	e000      	b.n	800156e <ETH_SetMACConfig+0x122>
 800156c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800156e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001576:	2a01      	cmp	r2, #1
 8001578:	d101      	bne.n	800157e <ETH_SetMACConfig+0x132>
 800157a:	2202      	movs	r2, #2
 800157c:	e000      	b.n	8001580 <ETH_SetMACConfig+0x134>
 800157e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001580:	4313      	orrs	r3, r2
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff fdb7 	bl	800110c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	619a      	str	r2, [r3, #24]
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	fd20810f 	.word	0xfd20810f

080015b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4b3d      	ldr	r3, [pc, #244]	@ (80016c4 <ETH_SetDMAConfig+0x110>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	7b1b      	ldrb	r3, [r3, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <ETH_SetDMAConfig+0x2c>
 80015da:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015de:	e000      	b.n	80015e2 <ETH_SetDMAConfig+0x2e>
 80015e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	7b5b      	ldrb	r3, [r3, #13]
 80015e6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015e8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	7f52      	ldrb	r2, [r2, #29]
 80015ee:	2a00      	cmp	r2, #0
 80015f0:	d102      	bne.n	80015f8 <ETH_SetDMAConfig+0x44>
 80015f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80015f6:	e000      	b.n	80015fa <ETH_SetDMAConfig+0x46>
 80015f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	7b9b      	ldrb	r3, [r3, #14]
 8001600:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001602:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001608:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	7f1b      	ldrb	r3, [r3, #28]
 800160e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001610:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	7f9b      	ldrb	r3, [r3, #30]
 8001616:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001618:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800161e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001626:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001628:	4313      	orrs	r3, r2
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001638:	461a      	mov	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff fd5e 	bl	800110c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001658:	461a      	mov	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	791b      	ldrb	r3, [r3, #4]
 8001662:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001668:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800166e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001674:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800167c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800167e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001684:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001686:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800168c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001696:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800169a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016a8:	2001      	movs	r0, #1
 80016aa:	f7ff fd2f 	bl	800110c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	f8de3f23 	.word	0xf8de3f23

080016c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0a6      	sub	sp, #152	@ 0x98
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016dc:	2300      	movs	r3, #0
 80016de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800170a:	2300      	movs	r3, #0
 800170c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001714:	2300      	movs	r3, #0
 8001716:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001730:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001734:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001736:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800173a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001742:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001746:	4619      	mov	r1, r3
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fe7f 	bl	800144c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800174e:	2301      	movs	r3, #1
 8001750:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001752:	2301      	movs	r3, #1
 8001754:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800175c:	2301      	movs	r3, #1
 800175e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001770:	2300      	movs	r3, #0
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001774:	2301      	movs	r3, #1
 8001776:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800177a:	2301      	movs	r3, #1
 800177c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800177e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001782:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001784:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001788:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800178a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800178e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001790:	2301      	movs	r3, #1
 8001792:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001796:	2300      	movs	r3, #0
 8001798:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff05 	bl	80015b4 <ETH_SetDMAConfig>
}
 80017aa:	bf00      	nop
 80017ac:	3798      	adds	r7, #152	@ 0x98
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3305      	adds	r3, #5
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	3204      	adds	r2, #4
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <ETH_MACAddressConfig+0x68>)
 80017d6:	4413      	add	r3, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3303      	adds	r3, #3
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	061a      	lsls	r2, r3, #24
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3302      	adds	r3, #2
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	041b      	lsls	r3, r3, #16
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3301      	adds	r3, #1
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	4313      	orrs	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	4313      	orrs	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <ETH_MACAddressConfig+0x6c>)
 8001806:	4413      	add	r3, r2
 8001808:	461a      	mov	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	6013      	str	r3, [r2, #0]
}
 800180e:	bf00      	nop
 8001810:	371c      	adds	r7, #28
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40028040 	.word	0x40028040
 8001820:	40028044 	.word	0x40028044

08001824 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e03e      	b.n	80018b0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68d9      	ldr	r1, [r3, #12]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2200      	movs	r2, #0
 800184e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	3206      	adds	r2, #6
 8001864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d80c      	bhi.n	8001894 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68d9      	ldr	r1, [r3, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	461a      	mov	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	e004      	b.n	800189e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	461a      	mov	r2, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3301      	adds	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d9bd      	bls.n	8001832 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c8:	611a      	str	r2, [r3, #16]
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e048      	b.n	8001976 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6919      	ldr	r1, [r3, #16]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2200      	movs	r2, #0
 8001900:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001920:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	3212      	adds	r2, #18
 8001942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d80c      	bhi.n	8001966 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6919      	ldr	r1, [r3, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	e004      	b.n	8001970 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	461a      	mov	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3301      	adds	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d9b3      	bls.n	80018e4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019a6:	60da      	str	r2, [r3, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	@ 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e175      	b.n	8001cc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8164 	bne.w	8001cba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d005      	beq.n	8001a0a <HAL_GPIO_Init+0x56>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d130      	bne.n	8001a6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 0201 	and.w	r2, r3, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d017      	beq.n	8001aa8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d123      	bne.n	8001afc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80be 	beq.w	8001cba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	4b66      	ldr	r3, [pc, #408]	@ (8001cd8 <HAL_GPIO_Init+0x324>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	4a65      	ldr	r2, [pc, #404]	@ (8001cd8 <HAL_GPIO_Init+0x324>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4a:	4b63      	ldr	r3, [pc, #396]	@ (8001cd8 <HAL_GPIO_Init+0x324>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b56:	4a61      	ldr	r2, [pc, #388]	@ (8001cdc <HAL_GPIO_Init+0x328>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a58      	ldr	r2, [pc, #352]	@ (8001ce0 <HAL_GPIO_Init+0x32c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d037      	beq.n	8001bf2 <HAL_GPIO_Init+0x23e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a57      	ldr	r2, [pc, #348]	@ (8001ce4 <HAL_GPIO_Init+0x330>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d031      	beq.n	8001bee <HAL_GPIO_Init+0x23a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a56      	ldr	r2, [pc, #344]	@ (8001ce8 <HAL_GPIO_Init+0x334>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d02b      	beq.n	8001bea <HAL_GPIO_Init+0x236>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a55      	ldr	r2, [pc, #340]	@ (8001cec <HAL_GPIO_Init+0x338>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d025      	beq.n	8001be6 <HAL_GPIO_Init+0x232>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a54      	ldr	r2, [pc, #336]	@ (8001cf0 <HAL_GPIO_Init+0x33c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01f      	beq.n	8001be2 <HAL_GPIO_Init+0x22e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a53      	ldr	r2, [pc, #332]	@ (8001cf4 <HAL_GPIO_Init+0x340>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d019      	beq.n	8001bde <HAL_GPIO_Init+0x22a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a52      	ldr	r2, [pc, #328]	@ (8001cf8 <HAL_GPIO_Init+0x344>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_GPIO_Init+0x226>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a51      	ldr	r2, [pc, #324]	@ (8001cfc <HAL_GPIO_Init+0x348>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00d      	beq.n	8001bd6 <HAL_GPIO_Init+0x222>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a50      	ldr	r2, [pc, #320]	@ (8001d00 <HAL_GPIO_Init+0x34c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <HAL_GPIO_Init+0x21e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4f      	ldr	r2, [pc, #316]	@ (8001d04 <HAL_GPIO_Init+0x350>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_GPIO_Init+0x21a>
 8001bca:	2309      	movs	r3, #9
 8001bcc:	e012      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bce:	230a      	movs	r3, #10
 8001bd0:	e010      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	e00e      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	e00c      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bda:	2306      	movs	r3, #6
 8001bdc:	e00a      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bde:	2305      	movs	r3, #5
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c04:	4935      	ldr	r1, [pc, #212]	@ (8001cdc <HAL_GPIO_Init+0x328>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c12:	4b3d      	ldr	r3, [pc, #244]	@ (8001d08 <HAL_GPIO_Init+0x354>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c36:	4a34      	ldr	r2, [pc, #208]	@ (8001d08 <HAL_GPIO_Init+0x354>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c3c:	4b32      	ldr	r3, [pc, #200]	@ (8001d08 <HAL_GPIO_Init+0x354>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c60:	4a29      	ldr	r2, [pc, #164]	@ (8001d08 <HAL_GPIO_Init+0x354>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c66:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <HAL_GPIO_Init+0x354>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d08 <HAL_GPIO_Init+0x354>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <HAL_GPIO_Init+0x354>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb4:	4a14      	ldr	r2, [pc, #80]	@ (8001d08 <HAL_GPIO_Init+0x354>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	f67f ae86 	bls.w	80019d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3724      	adds	r7, #36	@ 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40021400 	.word	0x40021400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40021c00 	.word	0x40021c00
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40022400 	.word	0x40022400
 8001d08:	40013c00 	.word	0x40013c00

08001d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d28:	e003      	b.n	8001d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	619a      	str	r2, [r3, #24]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d50:	887a      	ldrh	r2, [r7, #2]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4013      	ands	r3, r2
 8001d56:	041a      	lsls	r2, r3, #16
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	887b      	ldrh	r3, [r7, #2]
 8001d5e:	400b      	ands	r3, r1
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d7e:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fe04 	bl	80009a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40013c00 	.word	0x40013c00

08001da4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e108      	b.n	8001fc8 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d106      	bne.n	8001dd6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff f81b 	bl	8000e0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001de4:	d102      	bne.n	8001dec <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 fb1f 	bl	8004434 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7c1a      	ldrb	r2, [r3, #16]
 8001dfe:	f88d 2000 	strb.w	r2, [sp]
 8001e02:	3304      	adds	r3, #4
 8001e04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e06:	f002 fabb 	bl	8004380 <USB_CoreInit>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0d5      	b.n	8001fc8 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f002 fb17 	bl	8004456 <USB_SetCurrentMode>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0c6      	b.n	8001fc8 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	e04a      	b.n	8001ed6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3315      	adds	r3, #21
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	3314      	adds	r3, #20
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	b298      	uxth	r0, r3
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	332e      	adds	r3, #46	@ 0x2e
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3318      	adds	r3, #24
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	331c      	adds	r3, #28
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3320      	adds	r3, #32
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	3324      	adds	r3, #36	@ 0x24
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	791b      	ldrb	r3, [r3, #4]
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d3af      	bcc.n	8001e40 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e044      	b.n	8001f70 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	791b      	ldrb	r3, [r3, #4]
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3b5      	bcc.n	8001ee6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7c1a      	ldrb	r2, [r3, #16]
 8001f82:	f88d 2000 	strb.w	r2, [sp]
 8001f86:	3304      	adds	r3, #4
 8001f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f8a:	f002 fab1 	bl	80044f0 <USB_DevInit>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e013      	b.n	8001fc8 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7b1b      	ldrb	r3, [r3, #12]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d102      	bne.n	8001fbc <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f80a 	bl	8001fd0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f002 fc6c 	bl	800489e <USB_DevDisconnect>

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ffe:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_PCDEx_ActivateLPM+0x44>)
 8002000:	4313      	orrs	r3, r2
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	10000003 	.word	0x10000003

08002018 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201c:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40007000 	.word	0x40007000

08002038 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	4a22      	ldr	r2, [pc, #136]	@ (80020d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	@ 0x40
 800204e:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800205a:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1d      	ldr	r2, [pc, #116]	@ (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002064:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002066:	f7ff f845 	bl	80010f4 <HAL_GetTick>
 800206a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800206c:	e009      	b.n	8002082 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800206e:	f7ff f841 	bl	80010f4 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800207c:	d901      	bls.n	8002082 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e022      	b.n	80020c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002082:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800208a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800208e:	d1ee      	bne.n	800206e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002090:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0f      	ldr	r2, [pc, #60]	@ (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800209a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800209c:	f7ff f82a 	bl	80010f4 <HAL_GetTick>
 80020a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020a2:	e009      	b.n	80020b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020a4:	f7ff f826 	bl	80010f4 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020b2:	d901      	bls.n	80020b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e007      	b.n	80020c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020c4:	d1ee      	bne.n	80020a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40007000 	.word	0x40007000

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e29b      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8087 	beq.w	800220a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020fc:	4b96      	ldr	r3, [pc, #600]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b04      	cmp	r3, #4
 8002106:	d00c      	beq.n	8002122 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002108:	4b93      	ldr	r3, [pc, #588]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b08      	cmp	r3, #8
 8002112:	d112      	bne.n	800213a <HAL_RCC_OscConfig+0x62>
 8002114:	4b90      	ldr	r3, [pc, #576]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002120:	d10b      	bne.n	800213a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002122:	4b8d      	ldr	r3, [pc, #564]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d06c      	beq.n	8002208 <HAL_RCC_OscConfig+0x130>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d168      	bne.n	8002208 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e275      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x7a>
 8002144:	4b84      	ldr	r3, [pc, #528]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a83      	ldr	r2, [pc, #524]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e02e      	b.n	80021b0 <HAL_RCC_OscConfig+0xd8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x9c>
 800215a:	4b7f      	ldr	r3, [pc, #508]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7e      	ldr	r2, [pc, #504]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b7c      	ldr	r3, [pc, #496]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a7b      	ldr	r2, [pc, #492]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800216c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xd8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0xc0>
 800217e:	4b76      	ldr	r3, [pc, #472]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a75      	ldr	r2, [pc, #468]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b73      	ldr	r3, [pc, #460]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a72      	ldr	r2, [pc, #456]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xd8>
 8002198:	4b6f      	ldr	r3, [pc, #444]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a6e      	ldr	r2, [pc, #440]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe ff9c 	bl	80010f4 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7fe ff98 	bl	80010f4 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	@ 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e229      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b61      	ldr	r3, [pc, #388]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xe8>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe ff88 	bl	80010f4 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7fe ff84 	bl	80010f4 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	@ 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e215      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	4b57      	ldr	r3, [pc, #348]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x110>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d069      	beq.n	80022ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002216:	4b50      	ldr	r3, [pc, #320]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b4d      	ldr	r3, [pc, #308]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b08      	cmp	r3, #8
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x190>
 800222e:	4b4a      	ldr	r3, [pc, #296]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b47      	ldr	r3, [pc, #284]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x17a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1e9      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b41      	ldr	r3, [pc, #260]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	493d      	ldr	r1, [pc, #244]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	e040      	b.n	80022ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d023      	beq.n	80022b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002270:	4b39      	ldr	r3, [pc, #228]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a38      	ldr	r2, [pc, #224]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe ff3a 	bl	80010f4 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7fe ff36 	bl	80010f4 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1c7      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b30      	ldr	r3, [pc, #192]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4929      	ldr	r1, [pc, #164]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
 80022b6:	e018      	b.n	80022ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b8:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a26      	ldr	r2, [pc, #152]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe ff16 	bl	80010f4 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022cc:	f7fe ff12 	bl	80010f4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1a3      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	4b1e      	ldr	r3, [pc, #120]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d038      	beq.n	8002368 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d019      	beq.n	8002332 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fe:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002302:	4a15      	ldr	r2, [pc, #84]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230a:	f7fe fef3 	bl	80010f4 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002312:	f7fe feef 	bl	80010f4 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e180      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x23a>
 8002330:	e01a      	b.n	8002368 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002336:	4a08      	ldr	r2, [pc, #32]	@ (8002358 <HAL_RCC_OscConfig+0x280>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233e:	f7fe fed9 	bl	80010f4 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002346:	f7fe fed5 	bl	80010f4 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d903      	bls.n	800235c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e166      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
 8002358:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	4b92      	ldr	r3, [pc, #584]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800235e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ee      	bne.n	8002346 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80a4 	beq.w	80024be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002376:	4b8c      	ldr	r3, [pc, #560]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10d      	bne.n	800239e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	4b89      	ldr	r3, [pc, #548]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	4a88      	ldr	r2, [pc, #544]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	@ 0x40
 800238e:	4b86      	ldr	r3, [pc, #536]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239e:	4b83      	ldr	r3, [pc, #524]	@ (80025ac <HAL_RCC_OscConfig+0x4d4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023aa:	4b80      	ldr	r3, [pc, #512]	@ (80025ac <HAL_RCC_OscConfig+0x4d4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7f      	ldr	r2, [pc, #508]	@ (80025ac <HAL_RCC_OscConfig+0x4d4>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fe9d 	bl	80010f4 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7fe fe99 	bl	80010f4 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	@ 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e12a      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d0:	4b76      	ldr	r3, [pc, #472]	@ (80025ac <HAL_RCC_OscConfig+0x4d4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x31a>
 80023e4:	4b70      	ldr	r3, [pc, #448]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e8:	4a6f      	ldr	r2, [pc, #444]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f0:	e02d      	b.n	800244e <HAL_RCC_OscConfig+0x376>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x33c>
 80023fa:	4b6b      	ldr	r3, [pc, #428]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fe:	4a6a      	ldr	r2, [pc, #424]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6713      	str	r3, [r2, #112]	@ 0x70
 8002406:	4b68      	ldr	r3, [pc, #416]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240a:	4a67      	ldr	r2, [pc, #412]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6713      	str	r3, [r2, #112]	@ 0x70
 8002412:	e01c      	b.n	800244e <HAL_RCC_OscConfig+0x376>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b05      	cmp	r3, #5
 800241a:	d10c      	bne.n	8002436 <HAL_RCC_OscConfig+0x35e>
 800241c:	4b62      	ldr	r3, [pc, #392]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002420:	4a61      	ldr	r2, [pc, #388]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	6713      	str	r3, [r2, #112]	@ 0x70
 8002428:	4b5f      	ldr	r3, [pc, #380]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242c:	4a5e      	ldr	r2, [pc, #376]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6713      	str	r3, [r2, #112]	@ 0x70
 8002434:	e00b      	b.n	800244e <HAL_RCC_OscConfig+0x376>
 8002436:	4b5c      	ldr	r3, [pc, #368]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243a:	4a5b      	ldr	r2, [pc, #364]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6713      	str	r3, [r2, #112]	@ 0x70
 8002442:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002446:	4a58      	ldr	r2, [pc, #352]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d015      	beq.n	8002482 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7fe fe4d 	bl	80010f4 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe fe49 	bl	80010f4 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0d8      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	4b4c      	ldr	r3, [pc, #304]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ee      	beq.n	800245e <HAL_RCC_OscConfig+0x386>
 8002480:	e014      	b.n	80024ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7fe fe37 	bl	80010f4 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe fe33 	bl	80010f4 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e0c2      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1ee      	bne.n	800248a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d105      	bne.n	80024be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b2:	4b3d      	ldr	r3, [pc, #244]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	4a3c      	ldr	r2, [pc, #240]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80ae 	beq.w	8002624 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c8:	4b37      	ldr	r3, [pc, #220]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d06d      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d14b      	bne.n	8002574 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024dc:	4b32      	ldr	r3, [pc, #200]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a31      	ldr	r2, [pc, #196]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 80024e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fe04 	bl	80010f4 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fe00 	bl	80010f4 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e091      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	4b29      	ldr	r3, [pc, #164]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	019b      	lsls	r3, r3, #6
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	3b01      	subs	r3, #1
 8002528:	041b      	lsls	r3, r3, #16
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002538:	071b      	lsls	r3, r3, #28
 800253a:	491b      	ldr	r1, [pc, #108]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a18      	ldr	r2, [pc, #96]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800254a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe fdd2 	bl	80010f4 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7fe fdce 	bl	80010f4 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e05f      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x47c>
 8002572:	e057      	b.n	8002624 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002574:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0b      	ldr	r2, [pc, #44]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800257a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800257e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe fdb8 	bl	80010f4 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7fe fdb4 	bl	80010f4 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e045      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259a:	4b03      	ldr	r3, [pc, #12]	@ (80025a8 <HAL_RCC_OscConfig+0x4d0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x4b0>
 80025a6:	e03d      	b.n	8002624 <HAL_RCC_OscConfig+0x54c>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <HAL_RCC_OscConfig+0x558>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d030      	beq.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d129      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d122      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025e0:	4013      	ands	r3, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d119      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	3b01      	subs	r3, #1
 80025fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d10f      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d107      	bne.n	8002620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0d0      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800264c:	4b6a      	ldr	r3, [pc, #424]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d910      	bls.n	800267c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b67      	ldr	r3, [pc, #412]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 020f 	bic.w	r2, r3, #15
 8002662:	4965      	ldr	r1, [pc, #404]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b63      	ldr	r3, [pc, #396]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0b8      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002694:	4b59      	ldr	r3, [pc, #356]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a58      	ldr	r2, [pc, #352]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 800269a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800269e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ac:	4b53      	ldr	r3, [pc, #332]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a52      	ldr	r2, [pc, #328]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b50      	ldr	r3, [pc, #320]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	494d      	ldr	r1, [pc, #308]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d040      	beq.n	8002758 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b47      	ldr	r3, [pc, #284]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d115      	bne.n	8002716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e07f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f6:	4b41      	ldr	r3, [pc, #260]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e073      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002706:	4b3d      	ldr	r3, [pc, #244]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e06b      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002716:	4b39      	ldr	r3, [pc, #228]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f023 0203 	bic.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4936      	ldr	r1, [pc, #216]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002728:	f7fe fce4 	bl	80010f4 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7fe fce0 	bl	80010f4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e053      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b2d      	ldr	r3, [pc, #180]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 020c 	and.w	r2, r3, #12
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d1eb      	bne.n	8002730 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002758:	4b27      	ldr	r3, [pc, #156]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d210      	bcs.n	8002788 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b24      	ldr	r3, [pc, #144]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 020f 	bic.w	r2, r3, #15
 800276e:	4922      	ldr	r1, [pc, #136]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b20      	ldr	r3, [pc, #128]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e032      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4916      	ldr	r1, [pc, #88]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027b2:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	490e      	ldr	r1, [pc, #56]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c6:	f000 f821 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027ca:	4602      	mov	r2, r0
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	490a      	ldr	r1, [pc, #40]	@ (8002800 <HAL_RCC_ClockConfig+0x1cc>)
 80027d8:	5ccb      	ldrb	r3, [r1, r3]
 80027da:	fa22 f303 	lsr.w	r3, r2, r3
 80027de:	4a09      	ldr	r2, [pc, #36]	@ (8002804 <HAL_RCC_ClockConfig+0x1d0>)
 80027e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027e2:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <HAL_RCC_ClockConfig+0x1d4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fb8a 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023c00 	.word	0x40023c00
 80027fc:	40023800 	.word	0x40023800
 8002800:	08008568 	.word	0x08008568
 8002804:	20000000 	.word	0x20000000
 8002808:	20000004 	.word	0x20000004

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002810:	b094      	sub	sp, #80	@ 0x50
 8002812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	647b      	str	r3, [r7, #68]	@ 0x44
 8002818:	2300      	movs	r3, #0
 800281a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800281c:	2300      	movs	r3, #0
 800281e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002824:	4b79      	ldr	r3, [pc, #484]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d00d      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x40>
 8002830:	2b08      	cmp	r3, #8
 8002832:	f200 80e1 	bhi.w	80029f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x34>
 800283a:	2b04      	cmp	r3, #4
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x3a>
 800283e:	e0db      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b73      	ldr	r3, [pc, #460]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002842:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002844:	e0db      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002846:	4b73      	ldr	r3, [pc, #460]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x208>)
 8002848:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800284a:	e0d8      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800284c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002854:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002856:	4b6d      	ldr	r3, [pc, #436]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d063      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002862:	4b6a      	ldr	r3, [pc, #424]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	2200      	movs	r2, #0
 800286a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800286c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800286e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002874:	633b      	str	r3, [r7, #48]	@ 0x30
 8002876:	2300      	movs	r3, #0
 8002878:	637b      	str	r3, [r7, #52]	@ 0x34
 800287a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800287e:	4622      	mov	r2, r4
 8002880:	462b      	mov	r3, r5
 8002882:	f04f 0000 	mov.w	r0, #0
 8002886:	f04f 0100 	mov.w	r1, #0
 800288a:	0159      	lsls	r1, r3, #5
 800288c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002890:	0150      	lsls	r0, r2, #5
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4621      	mov	r1, r4
 8002898:	1a51      	subs	r1, r2, r1
 800289a:	6139      	str	r1, [r7, #16]
 800289c:	4629      	mov	r1, r5
 800289e:	eb63 0301 	sbc.w	r3, r3, r1
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028b0:	4659      	mov	r1, fp
 80028b2:	018b      	lsls	r3, r1, #6
 80028b4:	4651      	mov	r1, sl
 80028b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ba:	4651      	mov	r1, sl
 80028bc:	018a      	lsls	r2, r1, #6
 80028be:	4651      	mov	r1, sl
 80028c0:	ebb2 0801 	subs.w	r8, r2, r1
 80028c4:	4659      	mov	r1, fp
 80028c6:	eb63 0901 	sbc.w	r9, r3, r1
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028de:	4690      	mov	r8, r2
 80028e0:	4699      	mov	r9, r3
 80028e2:	4623      	mov	r3, r4
 80028e4:	eb18 0303 	adds.w	r3, r8, r3
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	462b      	mov	r3, r5
 80028ec:	eb49 0303 	adc.w	r3, r9, r3
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028fe:	4629      	mov	r1, r5
 8002900:	024b      	lsls	r3, r1, #9
 8002902:	4621      	mov	r1, r4
 8002904:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002908:	4621      	mov	r1, r4
 800290a:	024a      	lsls	r2, r1, #9
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002912:	2200      	movs	r2, #0
 8002914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002918:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800291c:	f7fd fc98 	bl	8000250 <__aeabi_uldivmod>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4613      	mov	r3, r2
 8002926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002928:	e058      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292a:	4b38      	ldr	r3, [pc, #224]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	099b      	lsrs	r3, r3, #6
 8002930:	2200      	movs	r2, #0
 8002932:	4618      	mov	r0, r3
 8002934:	4611      	mov	r1, r2
 8002936:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002940:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002944:	4642      	mov	r2, r8
 8002946:	464b      	mov	r3, r9
 8002948:	f04f 0000 	mov.w	r0, #0
 800294c:	f04f 0100 	mov.w	r1, #0
 8002950:	0159      	lsls	r1, r3, #5
 8002952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002956:	0150      	lsls	r0, r2, #5
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4641      	mov	r1, r8
 800295e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002962:	4649      	mov	r1, r9
 8002964:	eb63 0b01 	sbc.w	fp, r3, r1
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800297c:	ebb2 040a 	subs.w	r4, r2, sl
 8002980:	eb63 050b 	sbc.w	r5, r3, fp
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	00eb      	lsls	r3, r5, #3
 800298e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002992:	00e2      	lsls	r2, r4, #3
 8002994:	4614      	mov	r4, r2
 8002996:	461d      	mov	r5, r3
 8002998:	4643      	mov	r3, r8
 800299a:	18e3      	adds	r3, r4, r3
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	464b      	mov	r3, r9
 80029a0:	eb45 0303 	adc.w	r3, r5, r3
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029b2:	4629      	mov	r1, r5
 80029b4:	028b      	lsls	r3, r1, #10
 80029b6:	4621      	mov	r1, r4
 80029b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029bc:	4621      	mov	r1, r4
 80029be:	028a      	lsls	r2, r1, #10
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029c6:	2200      	movs	r2, #0
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	61fa      	str	r2, [r7, #28]
 80029cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d0:	f7fd fc3e 	bl	8000250 <__aeabi_uldivmod>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4613      	mov	r3, r2
 80029da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x200>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	3301      	adds	r3, #1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80029ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029f6:	e002      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029f8:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x204>)
 80029fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3750      	adds	r7, #80	@ 0x50
 8002a04:	46bd      	mov	sp, r7
 8002a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	00f42400 	.word	0x00f42400
 8002a14:	007a1200 	.word	0x007a1200

08002a18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000000 	.word	0x20000000

08002a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a34:	f7ff fff0 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0a9b      	lsrs	r3, r3, #10
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4903      	ldr	r1, [pc, #12]	@ (8002a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08008578 	.word	0x08008578

08002a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a5c:	f7ff ffdc 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	0b5b      	lsrs	r3, r3, #13
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4903      	ldr	r1, [pc, #12]	@ (8002a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	08008578 	.word	0x08008578

08002a80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a90:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0203 	and.w	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_RCC_GetClockConfig+0x5c>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	08db      	lsrs	r3, r3, #3
 8002aba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ac2:	4b07      	ldr	r3, [pc, #28]	@ (8002ae0 <HAL_RCC_GetClockConfig+0x60>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	601a      	str	r2, [r3, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40023c00 	.word	0x40023c00

08002ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d012      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b0c:	4b69      	ldr	r3, [pc, #420]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a68      	ldr	r2, [pc, #416]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b12:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b16:	6093      	str	r3, [r2, #8]
 8002b18:	4b66      	ldr	r3, [pc, #408]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b20:	4964      	ldr	r1, [pc, #400]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d017      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b44:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4c:	4959      	ldr	r1, [pc, #356]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d017      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	494a      	ldr	r1, [pc, #296]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b98:	d101      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 808b 	beq.w	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	4a39      	ldr	r2, [pc, #228]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd4:	4b37      	ldr	r3, [pc, #220]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002be0:	4b35      	ldr	r3, [pc, #212]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a34      	ldr	r2, [pc, #208]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bec:	f7fe fa82 	bl	80010f4 <HAL_GetTick>
 8002bf0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf4:	f7fe fa7e 	bl	80010f4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	@ 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e38f      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c06:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c12:	4b28      	ldr	r3, [pc, #160]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d035      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d02e      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c30:	4b20      	ldr	r3, [pc, #128]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c44:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c46:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c50:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c52:	4a18      	ldr	r2, [pc, #96]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c58:	4b16      	ldr	r3, [pc, #88]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d114      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe fa46 	bl	80010f4 <HAL_GetTick>
 8002c68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fa42 	bl	80010f4 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e351      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c82:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0ee      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c9a:	d111      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c9c:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ca8:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002caa:	400b      	ands	r3, r1
 8002cac:	4901      	ldr	r1, [pc, #4]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	0ffffcff 	.word	0x0ffffcff
 8002cc0:	4bac      	ldr	r3, [pc, #688]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4aab      	ldr	r2, [pc, #684]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cca:	6093      	str	r3, [r2, #8]
 8002ccc:	4ba9      	ldr	r3, [pc, #676]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd8:	49a6      	ldr	r1, [pc, #664]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d010      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cea:	4ba2      	ldr	r3, [pc, #648]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cf0:	4aa0      	ldr	r2, [pc, #640]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cf6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cfa:	4b9e      	ldr	r3, [pc, #632]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d04:	499b      	ldr	r1, [pc, #620]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d18:	4b96      	ldr	r3, [pc, #600]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d26:	4993      	ldr	r1, [pc, #588]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d3a:	4b8e      	ldr	r3, [pc, #568]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d48:	498a      	ldr	r1, [pc, #552]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d5c:	4b85      	ldr	r3, [pc, #532]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d6a:	4982      	ldr	r1, [pc, #520]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d7e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8c:	4979      	ldr	r1, [pc, #484]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da0:	4b74      	ldr	r3, [pc, #464]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da6:	f023 0203 	bic.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	4971      	ldr	r1, [pc, #452]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc8:	f023 020c 	bic.w	r2, r3, #12
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd0:	4968      	ldr	r1, [pc, #416]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002de4:	4b63      	ldr	r3, [pc, #396]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df2:	4960      	ldr	r1, [pc, #384]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e06:	4b5b      	ldr	r3, [pc, #364]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e14:	4957      	ldr	r1, [pc, #348]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e28:	4b52      	ldr	r3, [pc, #328]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e36:	494f      	ldr	r1, [pc, #316]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e50:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e58:	4946      	ldr	r1, [pc, #280]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e6c:	4b41      	ldr	r3, [pc, #260]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e72:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	493e      	ldr	r1, [pc, #248]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e8e:	4b39      	ldr	r3, [pc, #228]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9c:	4935      	ldr	r1, [pc, #212]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002eb0:	4b30      	ldr	r3, [pc, #192]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ebe:	492d      	ldr	r1, [pc, #180]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d011      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ed2:	4b28      	ldr	r3, [pc, #160]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ee0:	4924      	ldr	r1, [pc, #144]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f02:	2301      	movs	r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f12:	4b18      	ldr	r3, [pc, #96]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f18:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f20:	4914      	ldr	r1, [pc, #80]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00b      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f34:	4b0f      	ldr	r3, [pc, #60]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f44:	490b      	ldr	r1, [pc, #44]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00f      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f58:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f68:	4902      	ldr	r1, [pc, #8]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f70:	e002      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00b      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f84:	4b8a      	ldr	r3, [pc, #552]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f94:	4986      	ldr	r1, [pc, #536]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fa8:	4b81      	ldr	r3, [pc, #516]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fb8:	497d      	ldr	r1, [pc, #500]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d006      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 80d6 	beq.w	8003180 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fd4:	4b76      	ldr	r3, [pc, #472]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a75      	ldr	r2, [pc, #468]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe0:	f7fe f888 	bl	80010f4 <HAL_GetTick>
 8002fe4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fe8:	f7fe f884 	bl	80010f4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	@ 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e195      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d021      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003016:	2b00      	cmp	r3, #0
 8003018:	d11d      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800301a:	4b65      	ldr	r3, [pc, #404]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003028:	4b61      	ldr	r3, [pc, #388]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800302e:	0e1b      	lsrs	r3, r3, #24
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	019a      	lsls	r2, r3, #6
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	041b      	lsls	r3, r3, #16
 8003040:	431a      	orrs	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	071b      	lsls	r3, r3, #28
 800304e:	4958      	ldr	r1, [pc, #352]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003074:	2b00      	cmp	r3, #0
 8003076:	d02e      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003080:	d129      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003082:	4b4b      	ldr	r3, [pc, #300]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003090:	4b47      	ldr	r3, [pc, #284]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003096:	0f1b      	lsrs	r3, r3, #28
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	019a      	lsls	r2, r3, #6
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	061b      	lsls	r3, r3, #24
 80030b0:	431a      	orrs	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	071b      	lsls	r3, r3, #28
 80030b6:	493e      	ldr	r1, [pc, #248]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030be:	4b3c      	ldr	r3, [pc, #240]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c4:	f023 021f 	bic.w	r2, r3, #31
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	3b01      	subs	r3, #1
 80030ce:	4938      	ldr	r1, [pc, #224]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01d      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030e2:	4b33      	ldr	r3, [pc, #204]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030e8:	0e1b      	lsrs	r3, r3, #24
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030f0:	4b2f      	ldr	r3, [pc, #188]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030f6:	0f1b      	lsrs	r3, r3, #28
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	019a      	lsls	r2, r3, #6
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	431a      	orrs	r2, r3
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	061b      	lsls	r3, r3, #24
 8003110:	431a      	orrs	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	071b      	lsls	r3, r3, #28
 8003116:	4926      	ldr	r1, [pc, #152]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d011      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	019a      	lsls	r2, r3, #6
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	071b      	lsls	r3, r3, #28
 8003146:	491a      	ldr	r1, [pc, #104]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800314e:	4b18      	ldr	r3, [pc, #96]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a17      	ldr	r2, [pc, #92]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003154:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800315a:	f7fd ffcb 	bl	80010f4 <HAL_GetTick>
 800315e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003162:	f7fd ffc7 	bl	80010f4 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b64      	cmp	r3, #100	@ 0x64
 800316e:	d901      	bls.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e0d8      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003174:	4b0e      	ldr	r3, [pc, #56]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b01      	cmp	r3, #1
 8003184:	f040 80ce 	bne.w	8003324 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003188:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a08      	ldr	r2, [pc, #32]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003194:	f7fd ffae 	bl	80010f4 <HAL_GetTick>
 8003198:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800319a:	e00b      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800319c:	f7fd ffaa 	bl	80010f4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	@ 0x64
 80031a8:	d904      	bls.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e0bb      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031c0:	d0ec      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d02e      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d12a      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031ea:	4b51      	ldr	r3, [pc, #324]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fe:	0f1b      	lsrs	r3, r3, #28
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	019a      	lsls	r2, r3, #6
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	041b      	lsls	r3, r3, #16
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	061b      	lsls	r3, r3, #24
 8003218:	431a      	orrs	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	071b      	lsls	r3, r3, #28
 800321e:	4944      	ldr	r1, [pc, #272]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003226:	4b42      	ldr	r3, [pc, #264]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800322c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003234:	3b01      	subs	r3, #1
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	493d      	ldr	r1, [pc, #244]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d022      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003254:	d11d      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003256:	4b36      	ldr	r3, [pc, #216]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325c:	0e1b      	lsrs	r3, r3, #24
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003264:	4b32      	ldr	r3, [pc, #200]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326a:	0f1b      	lsrs	r3, r3, #28
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	019a      	lsls	r2, r3, #6
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	431a      	orrs	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	061b      	lsls	r3, r3, #24
 8003284:	431a      	orrs	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	071b      	lsls	r3, r3, #28
 800328a:	4929      	ldr	r1, [pc, #164]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d028      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800329e:	4b24      	ldr	r3, [pc, #144]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a4:	0e1b      	lsrs	r3, r3, #24
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032ac:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b2:	0c1b      	lsrs	r3, r3, #16
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	019a      	lsls	r2, r3, #6
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	041b      	lsls	r3, r3, #16
 80032c4:	431a      	orrs	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	071b      	lsls	r3, r3, #28
 80032d2:	4917      	ldr	r1, [pc, #92]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032da:	4b15      	ldr	r3, [pc, #84]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	4911      	ldr	r1, [pc, #68]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fc:	f7fd fefa 	bl	80010f4 <HAL_GetTick>
 8003300:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003304:	f7fd fef6 	bl	80010f4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	@ 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e007      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003316:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800331e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003322:	d1ef      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3720      	adds	r7, #32
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e049      	b.n	80033da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f841 	bl	80033e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3304      	adds	r3, #4
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f000 f9e8 	bl	8003748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d001      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e054      	b.n	80034ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a26      	ldr	r2, [pc, #152]	@ (80034c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d022      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800343a:	d01d      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a22      	ldr	r2, [pc, #136]	@ (80034cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d018      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a21      	ldr	r2, [pc, #132]	@ (80034d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1f      	ldr	r2, [pc, #124]	@ (80034d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1e      	ldr	r2, [pc, #120]	@ (80034d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1c      	ldr	r2, [pc, #112]	@ (80034dc <HAL_TIM_Base_Start_IT+0xe4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x80>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1b      	ldr	r2, [pc, #108]	@ (80034e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d115      	bne.n	80034a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <HAL_TIM_Base_Start_IT+0xec>)
 8003480:	4013      	ands	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b06      	cmp	r3, #6
 8003488:	d015      	beq.n	80034b6 <HAL_TIM_Base_Start_IT+0xbe>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003490:	d011      	beq.n	80034b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0201 	orr.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a2:	e008      	b.n	80034b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e000      	b.n	80034b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40010000 	.word	0x40010000
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40000c00 	.word	0x40000c00
 80034d8:	40010400 	.word	0x40010400
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40001800 	.word	0x40001800
 80034e4:	00010007 	.word	0x00010007

080034e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d020      	beq.n	800354c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01b      	beq.n	800354c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0202 	mvn.w	r2, #2
 800351c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8e9 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f8db 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f8ec 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d020      	beq.n	8003598 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01b      	beq.n	8003598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0204 	mvn.w	r2, #4
 8003568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f8c3 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 8003584:	e005      	b.n	8003592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8b5 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f8c6 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d020      	beq.n	80035e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01b      	beq.n	80035e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0208 	mvn.w	r2, #8
 80035b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2204      	movs	r2, #4
 80035ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f89d 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f88f 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8a0 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d020      	beq.n	8003630 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01b      	beq.n	8003630 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2208      	movs	r2, #8
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f877 	bl	800370a <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f869 	bl	80036f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f87a 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00c      	beq.n	8003654 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0201 	mvn.w	r2, #1
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fa84 	bl	8000b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00c      	beq.n	8003682 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f913 	bl	80038a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00c      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800369e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f90b 	bl	80038bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00c      	beq.n	80036ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f834 	bl	8003732 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f06f 0220 	mvn.w	r2, #32
 80036e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8d3 	bl	8003894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a43      	ldr	r2, [pc, #268]	@ (8003868 <TIM_Base_SetConfig+0x120>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003766:	d00f      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a40      	ldr	r2, [pc, #256]	@ (800386c <TIM_Base_SetConfig+0x124>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00b      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a3f      	ldr	r2, [pc, #252]	@ (8003870 <TIM_Base_SetConfig+0x128>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d007      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a3e      	ldr	r2, [pc, #248]	@ (8003874 <TIM_Base_SetConfig+0x12c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <TIM_Base_SetConfig+0x40>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a3d      	ldr	r2, [pc, #244]	@ (8003878 <TIM_Base_SetConfig+0x130>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800378e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a32      	ldr	r2, [pc, #200]	@ (8003868 <TIM_Base_SetConfig+0x120>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d02b      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a8:	d027      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2f      	ldr	r2, [pc, #188]	@ (800386c <TIM_Base_SetConfig+0x124>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d023      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003870 <TIM_Base_SetConfig+0x128>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01f      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003874 <TIM_Base_SetConfig+0x12c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01b      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003878 <TIM_Base_SetConfig+0x130>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d017      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a2b      	ldr	r2, [pc, #172]	@ (800387c <TIM_Base_SetConfig+0x134>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003880 <TIM_Base_SetConfig+0x138>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00f      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a29      	ldr	r2, [pc, #164]	@ (8003884 <TIM_Base_SetConfig+0x13c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00b      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a28      	ldr	r2, [pc, #160]	@ (8003888 <TIM_Base_SetConfig+0x140>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a27      	ldr	r2, [pc, #156]	@ (800388c <TIM_Base_SetConfig+0x144>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d003      	beq.n	80037fa <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a26      	ldr	r2, [pc, #152]	@ (8003890 <TIM_Base_SetConfig+0x148>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d108      	bne.n	800380c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a0e      	ldr	r2, [pc, #56]	@ (8003868 <TIM_Base_SetConfig+0x120>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d003      	beq.n	800383a <TIM_Base_SetConfig+0xf2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a10      	ldr	r2, [pc, #64]	@ (8003878 <TIM_Base_SetConfig+0x130>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d103      	bne.n	8003842 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f043 0204 	orr.w	r2, r3, #4
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	601a      	str	r2, [r3, #0]
}
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40010000 	.word	0x40010000
 800386c:	40000400 	.word	0x40000400
 8003870:	40000800 	.word	0x40000800
 8003874:	40000c00 	.word	0x40000c00
 8003878:	40010400 	.word	0x40010400
 800387c:	40014000 	.word	0x40014000
 8003880:	40014400 	.word	0x40014400
 8003884:	40014800 	.word	0x40014800
 8003888:	40001800 	.word	0x40001800
 800388c:	40001c00 	.word	0x40001c00
 8003890:	40002000 	.word	0x40002000

08003894 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e040      	b.n	8003964 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd fa2a 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2224      	movs	r2, #36	@ 0x24
 80038fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fb16 	bl	8003f48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f8af 	bl	8003a80 <UART_SetConfig>
 8003922:	4603      	mov	r3, r0
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e01b      	b.n	8003964 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800393a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800394a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fb95 	bl	800408c <UART_CheckIdleState>
 8003962:	4603      	mov	r3, r0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	@ 0x28
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003980:	2b20      	cmp	r3, #32
 8003982:	d177      	bne.n	8003a74 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_UART_Transmit+0x24>
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e070      	b.n	8003a76 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2221      	movs	r2, #33	@ 0x21
 80039a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039a2:	f7fd fba7 	bl	80010f4 <HAL_GetTick>
 80039a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	88fa      	ldrh	r2, [r7, #6]
 80039ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	88fa      	ldrh	r2, [r7, #6]
 80039b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c0:	d108      	bne.n	80039d4 <HAL_UART_Transmit+0x68>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d104      	bne.n	80039d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	e003      	b.n	80039dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039dc:	e02f      	b.n	8003a3e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	2180      	movs	r1, #128	@ 0x80
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fbf7 	bl	80041dc <UART_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e03b      	b.n	8003a76 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a12:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	3302      	adds	r3, #2
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	e007      	b.n	8003a2c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1c9      	bne.n	80039de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2200      	movs	r2, #0
 8003a52:	2140      	movs	r1, #64	@ 0x40
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 fbc1 	bl	80041dc <UART_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d004      	beq.n	8003a6a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e005      	b.n	8003a76 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e000      	b.n	8003a76 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003a74:	2302      	movs	r3, #2
  }
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4ba6      	ldr	r3, [pc, #664]	@ (8003d44 <UART_SetConfig+0x2c4>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	6979      	ldr	r1, [r7, #20]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a94      	ldr	r2, [pc, #592]	@ (8003d48 <UART_SetConfig+0x2c8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d120      	bne.n	8003b3e <UART_SetConfig+0xbe>
 8003afc:	4b93      	ldr	r3, [pc, #588]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d816      	bhi.n	8003b38 <UART_SetConfig+0xb8>
 8003b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b10 <UART_SetConfig+0x90>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b2d 	.word	0x08003b2d
 8003b18:	08003b27 	.word	0x08003b27
 8003b1c:	08003b33 	.word	0x08003b33
 8003b20:	2301      	movs	r3, #1
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e150      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b26:	2302      	movs	r3, #2
 8003b28:	77fb      	strb	r3, [r7, #31]
 8003b2a:	e14d      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e14a      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b32:	2308      	movs	r3, #8
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	e147      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b38:	2310      	movs	r3, #16
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e144      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a83      	ldr	r2, [pc, #524]	@ (8003d50 <UART_SetConfig+0x2d0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d132      	bne.n	8003bae <UART_SetConfig+0x12e>
 8003b48:	4b80      	ldr	r3, [pc, #512]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d828      	bhi.n	8003ba8 <UART_SetConfig+0x128>
 8003b56:	a201      	add	r2, pc, #4	@ (adr r2, 8003b5c <UART_SetConfig+0xdc>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003ba9 	.word	0x08003ba9
 8003b64:	08003ba9 	.word	0x08003ba9
 8003b68:	08003ba9 	.word	0x08003ba9
 8003b6c:	08003b9d 	.word	0x08003b9d
 8003b70:	08003ba9 	.word	0x08003ba9
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003ba9 	.word	0x08003ba9
 8003b7c:	08003b97 	.word	0x08003b97
 8003b80:	08003ba9 	.word	0x08003ba9
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003ba9 	.word	0x08003ba9
 8003b8c:	08003ba3 	.word	0x08003ba3
 8003b90:	2300      	movs	r3, #0
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e118      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b96:	2302      	movs	r3, #2
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e115      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e112      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	77fb      	strb	r3, [r7, #31]
 8003ba6:	e10f      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003ba8:	2310      	movs	r3, #16
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e10c      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a68      	ldr	r2, [pc, #416]	@ (8003d54 <UART_SetConfig+0x2d4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d120      	bne.n	8003bfa <UART_SetConfig+0x17a>
 8003bb8:	4b64      	ldr	r3, [pc, #400]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003bc2:	2b30      	cmp	r3, #48	@ 0x30
 8003bc4:	d013      	beq.n	8003bee <UART_SetConfig+0x16e>
 8003bc6:	2b30      	cmp	r3, #48	@ 0x30
 8003bc8:	d814      	bhi.n	8003bf4 <UART_SetConfig+0x174>
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d009      	beq.n	8003be2 <UART_SetConfig+0x162>
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d810      	bhi.n	8003bf4 <UART_SetConfig+0x174>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <UART_SetConfig+0x15c>
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d006      	beq.n	8003be8 <UART_SetConfig+0x168>
 8003bda:	e00b      	b.n	8003bf4 <UART_SetConfig+0x174>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e0f2      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003be2:	2302      	movs	r3, #2
 8003be4:	77fb      	strb	r3, [r7, #31]
 8003be6:	e0ef      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003be8:	2304      	movs	r3, #4
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e0ec      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003bee:	2308      	movs	r3, #8
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e0e9      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e0e6      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a56      	ldr	r2, [pc, #344]	@ (8003d58 <UART_SetConfig+0x2d8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d120      	bne.n	8003c46 <UART_SetConfig+0x1c6>
 8003c04:	4b51      	ldr	r3, [pc, #324]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c10:	d013      	beq.n	8003c3a <UART_SetConfig+0x1ba>
 8003c12:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c14:	d814      	bhi.n	8003c40 <UART_SetConfig+0x1c0>
 8003c16:	2b80      	cmp	r3, #128	@ 0x80
 8003c18:	d009      	beq.n	8003c2e <UART_SetConfig+0x1ae>
 8003c1a:	2b80      	cmp	r3, #128	@ 0x80
 8003c1c:	d810      	bhi.n	8003c40 <UART_SetConfig+0x1c0>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <UART_SetConfig+0x1a8>
 8003c22:	2b40      	cmp	r3, #64	@ 0x40
 8003c24:	d006      	beq.n	8003c34 <UART_SetConfig+0x1b4>
 8003c26:	e00b      	b.n	8003c40 <UART_SetConfig+0x1c0>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e0cc      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e0c9      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c34:	2304      	movs	r3, #4
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e0c6      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e0c3      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c40:	2310      	movs	r3, #16
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e0c0      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a44      	ldr	r2, [pc, #272]	@ (8003d5c <UART_SetConfig+0x2dc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d125      	bne.n	8003c9c <UART_SetConfig+0x21c>
 8003c50:	4b3e      	ldr	r3, [pc, #248]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c5e:	d017      	beq.n	8003c90 <UART_SetConfig+0x210>
 8003c60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c64:	d817      	bhi.n	8003c96 <UART_SetConfig+0x216>
 8003c66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c6a:	d00b      	beq.n	8003c84 <UART_SetConfig+0x204>
 8003c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c70:	d811      	bhi.n	8003c96 <UART_SetConfig+0x216>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <UART_SetConfig+0x1fe>
 8003c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c7a:	d006      	beq.n	8003c8a <UART_SetConfig+0x20a>
 8003c7c:	e00b      	b.n	8003c96 <UART_SetConfig+0x216>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e0a1      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c84:	2302      	movs	r3, #2
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e09e      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c8a:	2304      	movs	r3, #4
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e09b      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c90:	2308      	movs	r3, #8
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e098      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c96:	2310      	movs	r3, #16
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e095      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8003d60 <UART_SetConfig+0x2e0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d125      	bne.n	8003cf2 <UART_SetConfig+0x272>
 8003ca6:	4b29      	ldr	r3, [pc, #164]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003cb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cb4:	d017      	beq.n	8003ce6 <UART_SetConfig+0x266>
 8003cb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cba:	d817      	bhi.n	8003cec <UART_SetConfig+0x26c>
 8003cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc0:	d00b      	beq.n	8003cda <UART_SetConfig+0x25a>
 8003cc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc6:	d811      	bhi.n	8003cec <UART_SetConfig+0x26c>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <UART_SetConfig+0x254>
 8003ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd0:	d006      	beq.n	8003ce0 <UART_SetConfig+0x260>
 8003cd2:	e00b      	b.n	8003cec <UART_SetConfig+0x26c>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e076      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	77fb      	strb	r3, [r7, #31]
 8003cde:	e073      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e070      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	77fb      	strb	r3, [r7, #31]
 8003cea:	e06d      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003cec:	2310      	movs	r3, #16
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e06a      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d64 <UART_SetConfig+0x2e4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d138      	bne.n	8003d6e <UART_SetConfig+0x2ee>
 8003cfc:	4b13      	ldr	r3, [pc, #76]	@ (8003d4c <UART_SetConfig+0x2cc>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d02:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d0a:	d017      	beq.n	8003d3c <UART_SetConfig+0x2bc>
 8003d0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d10:	d82a      	bhi.n	8003d68 <UART_SetConfig+0x2e8>
 8003d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d16:	d00b      	beq.n	8003d30 <UART_SetConfig+0x2b0>
 8003d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d1c:	d824      	bhi.n	8003d68 <UART_SetConfig+0x2e8>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <UART_SetConfig+0x2aa>
 8003d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d26:	d006      	beq.n	8003d36 <UART_SetConfig+0x2b6>
 8003d28:	e01e      	b.n	8003d68 <UART_SetConfig+0x2e8>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e04b      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d30:	2302      	movs	r3, #2
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e048      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d36:	2304      	movs	r3, #4
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e045      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e042      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d42:	bf00      	nop
 8003d44:	efff69f3 	.word	0xefff69f3
 8003d48:	40011000 	.word	0x40011000
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40004400 	.word	0x40004400
 8003d54:	40004800 	.word	0x40004800
 8003d58:	40004c00 	.word	0x40004c00
 8003d5c:	40005000 	.word	0x40005000
 8003d60:	40011400 	.word	0x40011400
 8003d64:	40007800 	.word	0x40007800
 8003d68:	2310      	movs	r3, #16
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e02c      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a72      	ldr	r2, [pc, #456]	@ (8003f3c <UART_SetConfig+0x4bc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d125      	bne.n	8003dc4 <UART_SetConfig+0x344>
 8003d78:	4b71      	ldr	r3, [pc, #452]	@ (8003f40 <UART_SetConfig+0x4c0>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003d82:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d86:	d017      	beq.n	8003db8 <UART_SetConfig+0x338>
 8003d88:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d8c:	d817      	bhi.n	8003dbe <UART_SetConfig+0x33e>
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d92:	d00b      	beq.n	8003dac <UART_SetConfig+0x32c>
 8003d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d98:	d811      	bhi.n	8003dbe <UART_SetConfig+0x33e>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <UART_SetConfig+0x326>
 8003d9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003da2:	d006      	beq.n	8003db2 <UART_SetConfig+0x332>
 8003da4:	e00b      	b.n	8003dbe <UART_SetConfig+0x33e>
 8003da6:	2300      	movs	r3, #0
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e00d      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003dac:	2302      	movs	r3, #2
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e00a      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003db2:	2304      	movs	r3, #4
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e007      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003db8:	2308      	movs	r3, #8
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e004      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003dbe:	2310      	movs	r3, #16
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e001      	b.n	8003dc8 <UART_SetConfig+0x348>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd0:	d15b      	bne.n	8003e8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003dd2:	7ffb      	ldrb	r3, [r7, #31]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d828      	bhi.n	8003e2a <UART_SetConfig+0x3aa>
 8003dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <UART_SetConfig+0x360>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e0d 	.word	0x08003e0d
 8003de8:	08003e15 	.word	0x08003e15
 8003dec:	08003e2b 	.word	0x08003e2b
 8003df0:	08003e1b 	.word	0x08003e1b
 8003df4:	08003e2b 	.word	0x08003e2b
 8003df8:	08003e2b 	.word	0x08003e2b
 8003dfc:	08003e2b 	.word	0x08003e2b
 8003e00:	08003e23 	.word	0x08003e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e04:	f7fe fe14 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8003e08:	61b8      	str	r0, [r7, #24]
        break;
 8003e0a:	e013      	b.n	8003e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f7fe fe24 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 8003e10:	61b8      	str	r0, [r7, #24]
        break;
 8003e12:	e00f      	b.n	8003e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e14:	4b4b      	ldr	r3, [pc, #300]	@ (8003f44 <UART_SetConfig+0x4c4>)
 8003e16:	61bb      	str	r3, [r7, #24]
        break;
 8003e18:	e00c      	b.n	8003e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1a:	f7fe fcf7 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8003e1e:	61b8      	str	r0, [r7, #24]
        break;
 8003e20:	e008      	b.n	8003e34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e26:	61bb      	str	r3, [r7, #24]
        break;
 8003e28:	e004      	b.n	8003e34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	77bb      	strb	r3, [r7, #30]
        break;
 8003e32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d074      	beq.n	8003f24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	005a      	lsls	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	441a      	add	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b0f      	cmp	r3, #15
 8003e54:	d916      	bls.n	8003e84 <UART_SetConfig+0x404>
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e5c:	d212      	bcs.n	8003e84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f023 030f 	bic.w	r3, r3, #15
 8003e66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	89fb      	ldrh	r3, [r7, #14]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	89fa      	ldrh	r2, [r7, #14]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	e04f      	b.n	8003f24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	77bb      	strb	r3, [r7, #30]
 8003e88:	e04c      	b.n	8003f24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e8a:	7ffb      	ldrb	r3, [r7, #31]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d828      	bhi.n	8003ee2 <UART_SetConfig+0x462>
 8003e90:	a201      	add	r2, pc, #4	@ (adr r2, 8003e98 <UART_SetConfig+0x418>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ec5 	.word	0x08003ec5
 8003ea0:	08003ecd 	.word	0x08003ecd
 8003ea4:	08003ee3 	.word	0x08003ee3
 8003ea8:	08003ed3 	.word	0x08003ed3
 8003eac:	08003ee3 	.word	0x08003ee3
 8003eb0:	08003ee3 	.word	0x08003ee3
 8003eb4:	08003ee3 	.word	0x08003ee3
 8003eb8:	08003edb 	.word	0x08003edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7fe fdb8 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8003ec0:	61b8      	str	r0, [r7, #24]
        break;
 8003ec2:	e013      	b.n	8003eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7fe fdc8 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 8003ec8:	61b8      	str	r0, [r7, #24]
        break;
 8003eca:	e00f      	b.n	8003eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8003f44 <UART_SetConfig+0x4c4>)
 8003ece:	61bb      	str	r3, [r7, #24]
        break;
 8003ed0:	e00c      	b.n	8003eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed2:	f7fe fc9b 	bl	800280c <HAL_RCC_GetSysClockFreq>
 8003ed6:	61b8      	str	r0, [r7, #24]
        break;
 8003ed8:	e008      	b.n	8003eec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ede:	61bb      	str	r3, [r7, #24]
        break;
 8003ee0:	e004      	b.n	8003eec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eea:	bf00      	nop
    }

    if (pclk != 0U)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d018      	beq.n	8003f24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	085a      	lsrs	r2, r3, #1
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	441a      	add	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b0f      	cmp	r3, #15
 8003f0a:	d909      	bls.n	8003f20 <UART_SetConfig+0x4a0>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f12:	d205      	bcs.n	8003f20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	e001      	b.n	8003f24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f30:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40007c00 	.word	0x40007c00
 8003f40:	40023800 	.word	0x40023800
 8003f44:	00f42400 	.word	0x00f42400

08003f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01a      	beq.n	800405e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004046:	d10a      	bne.n	800405e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	605a      	str	r2, [r3, #4]
  }
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b098      	sub	sp, #96	@ 0x60
 8004090:	af02      	add	r7, sp, #8
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800409c:	f7fd f82a 	bl	80010f4 <HAL_GetTick>
 80040a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d12e      	bne.n	800410e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f88c 	bl	80041dc <UART_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d021      	beq.n	800410e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040de:	653b      	str	r3, [r7, #80]	@ 0x50
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e062      	b.n	80041d4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b04      	cmp	r3, #4
 800411a:	d149      	bne.n	80041b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800411c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004124:	2200      	movs	r2, #0
 8004126:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f856 	bl	80041dc <UART_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d03c      	beq.n	80041b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	623b      	str	r3, [r7, #32]
   return(result);
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800414a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004154:	633b      	str	r3, [r7, #48]	@ 0x30
 8004156:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800415a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e6      	bne.n	8004136 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3308      	adds	r3, #8
 800416e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	60fb      	str	r3, [r7, #12]
   return(result);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3308      	adds	r3, #8
 8004186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004188:	61fa      	str	r2, [r7, #28]
 800418a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	69b9      	ldr	r1, [r7, #24]
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	617b      	str	r3, [r7, #20]
   return(result);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e5      	bne.n	8004168 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e011      	b.n	80041d4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3758      	adds	r7, #88	@ 0x58
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ec:	e04f      	b.n	800428e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d04b      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f6:	f7fc ff7d 	bl	80010f4 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <UART_WaitOnFlagUntilTimeout+0x30>
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e04e      	b.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	d037      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0xb2>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b80      	cmp	r3, #128	@ 0x80
 8004222:	d034      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b40      	cmp	r3, #64	@ 0x40
 8004228:	d031      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b08      	cmp	r3, #8
 8004236:	d110      	bne.n	800425a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2208      	movs	r2, #8
 800423e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f838 	bl	80042b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2208      	movs	r2, #8
 800424a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e029      	b.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004268:	d111      	bne.n	800428e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f81e 	bl	80042b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e00f      	b.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4013      	ands	r3, r2
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	429a      	cmp	r2, r3
 800429c:	bf0c      	ite	eq
 800429e:	2301      	moveq	r3, #1
 80042a0:	2300      	movne	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	461a      	mov	r2, r3
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d0a0      	beq.n	80041ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b095      	sub	sp, #84	@ 0x54
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80042de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e6      	bne.n	80042be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3308      	adds	r3, #8
 80042f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3308      	adds	r3, #8
 800430e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004310:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004312:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e5      	bne.n	80042f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004328:	2b01      	cmp	r3, #1
 800432a:	d118      	bne.n	800435e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	60bb      	str	r3, [r7, #8]
   return(result);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f023 0310 	bic.w	r3, r3, #16
 8004340:	647b      	str	r3, [r7, #68]	@ 0x44
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6979      	ldr	r1, [r7, #20]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	613b      	str	r3, [r7, #16]
   return(result);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e6      	bne.n	800432c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004372:	bf00      	nop
 8004374:	3754      	adds	r7, #84	@ 0x54
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004380:	b084      	sub	sp, #16
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	f107 001c 	add.w	r0, r7, #28
 800438e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004392:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004396:	2b01      	cmp	r3, #1
 8004398:	d121      	bne.n	80043de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	4b21      	ldr	r3, [pc, #132]	@ (8004430 <USB_CoreInit+0xb0>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d105      	bne.n	80043d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fa92 	bl	80048fc <USB_CoreReset>
 80043d8:	4603      	mov	r3, r0
 80043da:	73fb      	strb	r3, [r7, #15]
 80043dc:	e010      	b.n	8004400 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa86 	bl	80048fc <USB_CoreReset>
 80043f0:	4603      	mov	r3, r0
 80043f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004400:	7fbb      	ldrb	r3, [r7, #30]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d10b      	bne.n	800441e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f043 0206 	orr.w	r2, r3, #6
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f043 0220 	orr.w	r2, r3, #32
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800441e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800442a:	b004      	add	sp, #16
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	ffbdffbf 	.word	0xffbdffbf

08004434 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f023 0201 	bic.w	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d115      	bne.n	80044a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004484:	200a      	movs	r0, #10
 8004486:	f7fc fe41 	bl	800110c <HAL_Delay>
      ms += 10U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	330a      	adds	r3, #10
 800448e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fa25 	bl	80048e0 <USB_GetMode>
 8004496:	4603      	mov	r3, r0
 8004498:	2b01      	cmp	r3, #1
 800449a:	d01e      	beq.n	80044da <USB_SetCurrentMode+0x84>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2bc7      	cmp	r3, #199	@ 0xc7
 80044a0:	d9f0      	bls.n	8004484 <USB_SetCurrentMode+0x2e>
 80044a2:	e01a      	b.n	80044da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d115      	bne.n	80044d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80044b6:	200a      	movs	r0, #10
 80044b8:	f7fc fe28 	bl	800110c <HAL_Delay>
      ms += 10U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	330a      	adds	r3, #10
 80044c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa0c 	bl	80048e0 <USB_GetMode>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <USB_SetCurrentMode+0x84>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80044d2:	d9f0      	bls.n	80044b6 <USB_SetCurrentMode+0x60>
 80044d4:	e001      	b.n	80044da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e005      	b.n	80044e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2bc8      	cmp	r3, #200	@ 0xc8
 80044de:	d101      	bne.n	80044e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044f0:	b084      	sub	sp, #16
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b086      	sub	sp, #24
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80044fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	e009      	b.n	8004524 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	3340      	adds	r3, #64	@ 0x40
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	2200      	movs	r2, #0
 800451c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	3301      	adds	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b0e      	cmp	r3, #14
 8004528:	d9f2      	bls.n	8004510 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800452a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800452e:	2b00      	cmp	r3, #0
 8004530:	d11c      	bne.n	800456c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004540:	f043 0302 	orr.w	r3, r3, #2
 8004544:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e005      	b.n	8004578 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004570:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800457e:	461a      	mov	r2, r3
 8004580:	2300      	movs	r3, #0
 8004582:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004584:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10d      	bne.n	80045a8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800458c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004594:	2100      	movs	r1, #0
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f968 	bl	800486c <USB_SetDevSpeed>
 800459c:	e008      	b.n	80045b0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800459e:	2101      	movs	r1, #1
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f963 	bl	800486c <USB_SetDevSpeed>
 80045a6:	e003      	b.n	80045b0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045a8:	2103      	movs	r1, #3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f95e 	bl	800486c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045b0:	2110      	movs	r1, #16
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f8fa 	bl	80047ac <USB_FlushTxFifo>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f924 	bl	8004810 <USB_FlushRxFifo>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d8:	461a      	mov	r2, r3
 80045da:	2300      	movs	r3, #0
 80045dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045e4:	461a      	mov	r2, r3
 80045e6:	2300      	movs	r3, #0
 80045e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f0:	461a      	mov	r2, r3
 80045f2:	2300      	movs	r3, #0
 80045f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	e043      	b.n	8004684 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800460e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004612:	d118      	bne.n	8004646 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004626:	461a      	mov	r2, r3
 8004628:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e013      	b.n	8004658 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463c:	461a      	mov	r2, r3
 800463e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	e008      	b.n	8004658 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004664:	461a      	mov	r2, r3
 8004666:	2300      	movs	r3, #0
 8004668:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004676:	461a      	mov	r2, r3
 8004678:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800467c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	3301      	adds	r3, #1
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004688:	461a      	mov	r2, r3
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4293      	cmp	r3, r2
 800468e:	d3b5      	bcc.n	80045fc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004690:	2300      	movs	r3, #0
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	e043      	b.n	800471e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046ac:	d118      	bne.n	80046e0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c0:	461a      	mov	r2, r3
 80046c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e013      	b.n	80046f2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d6:	461a      	mov	r2, r3
 80046d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e008      	b.n	80046f2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ec:	461a      	mov	r2, r3
 80046ee:	2300      	movs	r3, #0
 80046f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046fe:	461a      	mov	r2, r3
 8004700:	2300      	movs	r3, #0
 8004702:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004710:	461a      	mov	r2, r3
 8004712:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004716:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	3301      	adds	r3, #1
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004722:	461a      	mov	r2, r3
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4293      	cmp	r3, r2
 8004728:	d3b5      	bcc.n	8004696 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800473c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800474a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800474c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004750:	2b00      	cmp	r3, #0
 8004752:	d105      	bne.n	8004760 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f043 0210 	orr.w	r2, r3, #16
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	4b0f      	ldr	r3, [pc, #60]	@ (80047a4 <USB_DevInit+0x2b4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800476c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f043 0208 	orr.w	r2, r3, #8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004780:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004784:	2b01      	cmp	r3, #1
 8004786:	d105      	bne.n	8004794 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <USB_DevInit+0x2b8>)
 800478e:	4313      	orrs	r3, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004794:	7dfb      	ldrb	r3, [r7, #23]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a0:	b004      	add	sp, #16
 80047a2:	4770      	bx	lr
 80047a4:	803c3800 	.word	0x803c3800
 80047a8:	40000004 	.word	0x40000004

080047ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3301      	adds	r3, #1
 80047be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047c6:	d901      	bls.n	80047cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e01b      	b.n	8004804 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	daf2      	bge.n	80047ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	019b      	lsls	r3, r3, #6
 80047dc:	f043 0220 	orr.w	r2, r3, #32
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047f0:	d901      	bls.n	80047f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e006      	b.n	8004804 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d0f0      	beq.n	80047e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004828:	d901      	bls.n	800482e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e018      	b.n	8004860 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	daf2      	bge.n	800481c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2210      	movs	r2, #16
 800483e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3301      	adds	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800484c:	d901      	bls.n	8004852 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e006      	b.n	8004860 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0310 	and.w	r3, r3, #16
 800485a:	2b10      	cmp	r3, #16
 800485c:	d0f0      	beq.n	8004840 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	68f9      	ldr	r1, [r7, #12]
 8004888:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80048b8:	f023 0303 	bic.w	r3, r3, #3
 80048bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f003 0301 	and.w	r3, r3, #1
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3301      	adds	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004914:	d901      	bls.n	800491a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e022      	b.n	8004960 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	daf2      	bge.n	8004908 <USB_CoreReset+0xc>

  count = 10U;
 8004922:	230a      	movs	r3, #10
 8004924:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004926:	e002      	b.n	800492e <USB_CoreReset+0x32>
  {
    count--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3b01      	subs	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f9      	bne.n	8004928 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f043 0201 	orr.w	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800494c:	d901      	bls.n	8004952 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e006      	b.n	8004960 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b01      	cmp	r3, #1
 800495c:	d0f0      	beq.n	8004940 <USB_CoreReset+0x44>

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004970:	bf00      	nop
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
	...

0800497c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004982:	f3ef 8305 	mrs	r3, IPSR
 8004986:	60bb      	str	r3, [r7, #8]
  return(result);
 8004988:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	607b      	str	r3, [r7, #4]
  return(result);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800499a:	f3ef 8311 	mrs	r3, BASEPRI
 800499e:	603b      	str	r3, [r7, #0]
  return(result);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <osKernelInitialize+0x3a>
 80049a6:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <osKernelInitialize+0x64>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d103      	bne.n	80049b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80049ae:	f06f 0305 	mvn.w	r3, #5
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e00c      	b.n	80049d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80049b6:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <osKernelInitialize+0x64>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d105      	bne.n	80049ca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80049be:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <osKernelInitialize+0x64>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e002      	b.n	80049d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80049ca:	f04f 33ff 	mov.w	r3, #4294967295
 80049ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80049d0:	68fb      	ldr	r3, [r7, #12]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20000878 	.word	0x20000878

080049e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049ea:	f3ef 8305 	mrs	r3, IPSR
 80049ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80049f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10f      	bne.n	8004a16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f6:	f3ef 8310 	mrs	r3, PRIMASK
 80049fa:	607b      	str	r3, [r7, #4]
  return(result);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d105      	bne.n	8004a0e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a02:	f3ef 8311 	mrs	r3, BASEPRI
 8004a06:	603b      	str	r3, [r7, #0]
  return(result);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <osKernelStart+0x3a>
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a4c <osKernelStart+0x68>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d103      	bne.n	8004a1e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004a16:	f06f 0305 	mvn.w	r3, #5
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e010      	b.n	8004a40 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <osKernelStart+0x68>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d109      	bne.n	8004a3a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004a26:	f7ff ffa1 	bl	800496c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004a2a:	4b08      	ldr	r3, [pc, #32]	@ (8004a4c <osKernelStart+0x68>)
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004a30:	f001 fe0a 	bl	8006648 <vTaskStartScheduler>
      stat = osOK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e002      	b.n	8004a40 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a40:	68fb      	ldr	r3, [r7, #12]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000878 	.word	0x20000878

08004a50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b090      	sub	sp, #64	@ 0x40
 8004a54:	af04      	add	r7, sp, #16
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a60:	f3ef 8305 	mrs	r3, IPSR
 8004a64:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a66:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f040 808f 	bne.w	8004b8c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a72:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d105      	bne.n	8004a86 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a7a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a7e:	617b      	str	r3, [r7, #20]
  return(result);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <osThreadNew+0x3e>
 8004a86:	4b44      	ldr	r3, [pc, #272]	@ (8004b98 <osThreadNew+0x148>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d07e      	beq.n	8004b8c <osThreadNew+0x13c>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d07b      	beq.n	8004b8c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004a98:	2318      	movs	r3, #24
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d045      	beq.n	8004b38 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <osThreadNew+0x6a>
        name = attr->name;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <osThreadNew+0x90>
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	2b38      	cmp	r3, #56	@ 0x38
 8004ad2:	d805      	bhi.n	8004ae0 <osThreadNew+0x90>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <osThreadNew+0x94>
        return (NULL);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e054      	b.n	8004b8e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00e      	beq.n	8004b1a <osThreadNew+0xca>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2ba7      	cmp	r3, #167	@ 0xa7
 8004b02:	d90a      	bls.n	8004b1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d006      	beq.n	8004b1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <osThreadNew+0xca>
        mem = 1;
 8004b14:	2301      	movs	r3, #1
 8004b16:	623b      	str	r3, [r7, #32]
 8004b18:	e010      	b.n	8004b3c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10c      	bne.n	8004b3c <osThreadNew+0xec>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d108      	bne.n	8004b3c <osThreadNew+0xec>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <osThreadNew+0xec>
          mem = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	623b      	str	r3, [r7, #32]
 8004b36:	e001      	b.n	8004b3c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d110      	bne.n	8004b64 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b4a:	9202      	str	r2, [sp, #8]
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f001 fb77 	bl	800624c <xTaskCreateStatic>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	e013      	b.n	8004b8c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d110      	bne.n	8004b8c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	f107 0310 	add.w	r3, r7, #16
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f001 fbcb 	bl	8006318 <xTaskCreate>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d001      	beq.n	8004b8c <osThreadNew+0x13c>
          hTask = NULL;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b8c:	693b      	ldr	r3, [r7, #16]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3730      	adds	r7, #48	@ 0x30
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000878 	.word	0x20000878

08004b9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ba4:	f3ef 8305 	mrs	r3, IPSR
 8004ba8:	613b      	str	r3, [r7, #16]
  return(result);
 8004baa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10f      	bne.n	8004bd0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d105      	bne.n	8004bc8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bbc:	f3ef 8311 	mrs	r3, BASEPRI
 8004bc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <osDelay+0x3c>
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf4 <osDelay+0x58>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d103      	bne.n	8004bd8 <osDelay+0x3c>
    stat = osErrorISR;
 8004bd0:	f06f 0305 	mvn.w	r3, #5
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e007      	b.n	8004be8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f001 fcf8 	bl	80065d8 <vTaskDelay>
    }
  }

  return (stat);
 8004be8:	697b      	ldr	r3, [r7, #20]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000878 	.word	0x20000878

08004bf8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08c      	sub	sp, #48	@ 0x30
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c08:	f3ef 8305 	mrs	r3, IPSR
 8004c0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c0e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f040 8086 	bne.w	8004d22 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c16:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1a:	617b      	str	r3, [r7, #20]
  return(result);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d105      	bne.n	8004c2e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c22:	f3ef 8311 	mrs	r3, BASEPRI
 8004c26:	613b      	str	r3, [r7, #16]
  return(result);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <osSemaphoreNew+0x3e>
 8004c2e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d2c <osSemaphoreNew+0x134>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d075      	beq.n	8004d22 <osSemaphoreNew+0x12a>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d072      	beq.n	8004d22 <osSemaphoreNew+0x12a>
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d86e      	bhi.n	8004d22 <osSemaphoreNew+0x12a>
    mem = -1;
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295
 8004c48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d015      	beq.n	8004c7c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d006      	beq.n	8004c66 <osSemaphoreNew+0x6e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	2b4f      	cmp	r3, #79	@ 0x4f
 8004c5e:	d902      	bls.n	8004c66 <osSemaphoreNew+0x6e>
        mem = 1;
 8004c60:	2301      	movs	r3, #1
 8004c62:	623b      	str	r3, [r7, #32]
 8004c64:	e00c      	b.n	8004c80 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d108      	bne.n	8004c80 <osSemaphoreNew+0x88>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d104      	bne.n	8004c80 <osSemaphoreNew+0x88>
          mem = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	623b      	str	r3, [r7, #32]
 8004c7a:	e001      	b.n	8004c80 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c86:	d04c      	beq.n	8004d22 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d128      	bne.n	8004ce0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d10a      	bne.n	8004caa <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2203      	movs	r2, #3
 8004c9a:	9200      	str	r2, [sp, #0]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	f000 fa89 	bl	80051b8 <xQueueGenericCreateStatic>
 8004ca6:	6278      	str	r0, [r7, #36]	@ 0x24
 8004ca8:	e005      	b.n	8004cb6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004caa:	2203      	movs	r2, #3
 8004cac:	2100      	movs	r1, #0
 8004cae:	2001      	movs	r0, #1
 8004cb0:	f000 fb09 	bl	80052c6 <xQueueGenericCreate>
 8004cb4:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d022      	beq.n	8004d02 <osSemaphoreNew+0x10a>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01f      	beq.n	8004d02 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cca:	f000 fbd9 	bl	8005480 <xQueueGenericSend>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d016      	beq.n	8004d02 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004cd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cd6:	f001 f8e3 	bl	8005ea0 <vQueueDelete>
            hSemaphore = NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cde:	e010      	b.n	8004d02 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d108      	bne.n	8004cf8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	461a      	mov	r2, r3
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 fb4f 	bl	8005392 <xQueueCreateCountingSemaphoreStatic>
 8004cf4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004cf6:	e004      	b.n	8004d02 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 fb86 	bl	800540c <xQueueCreateCountingSemaphore>
 8004d00:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00c      	beq.n	8004d22 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <osSemaphoreNew+0x11e>
          name = attr->name;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	61fb      	str	r3, [r7, #28]
 8004d14:	e001      	b.n	8004d1a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004d1a:	69f9      	ldr	r1, [r7, #28]
 8004d1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d1e:	f001 fa0d 	bl	800613c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3728      	adds	r7, #40	@ 0x28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20000878 	.word	0x20000878

08004d30 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004d48:	f06f 0303 	mvn.w	r3, #3
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	e04b      	b.n	8004de8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d50:	f3ef 8305 	mrs	r3, IPSR
 8004d54:	617b      	str	r3, [r7, #20]
  return(result);
 8004d56:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10f      	bne.n	8004d7c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d60:	613b      	str	r3, [r7, #16]
  return(result);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d105      	bne.n	8004d74 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d68:	f3ef 8311 	mrs	r3, BASEPRI
 8004d6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d026      	beq.n	8004dc2 <osSemaphoreAcquire+0x92>
 8004d74:	4b1f      	ldr	r3, [pc, #124]	@ (8004df4 <osSemaphoreAcquire+0xc4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d122      	bne.n	8004dc2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004d82:	f06f 0303 	mvn.w	r3, #3
 8004d86:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004d88:	e02d      	b.n	8004de6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004d8e:	f107 0308 	add.w	r3, r7, #8
 8004d92:	461a      	mov	r2, r3
 8004d94:	2100      	movs	r1, #0
 8004d96:	69b8      	ldr	r0, [r7, #24]
 8004d98:	f000 ffb8 	bl	8005d0c <xQueueReceiveFromISR>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d003      	beq.n	8004daa <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004da2:	f06f 0302 	mvn.w	r3, #2
 8004da6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004da8:	e01d      	b.n	8004de6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01a      	beq.n	8004de6 <osSemaphoreAcquire+0xb6>
 8004db0:	4b11      	ldr	r3, [pc, #68]	@ (8004df8 <osSemaphoreAcquire+0xc8>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004dc0:	e011      	b.n	8004de6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004dc2:	6839      	ldr	r1, [r7, #0]
 8004dc4:	69b8      	ldr	r0, [r7, #24]
 8004dc6:	f000 fe89 	bl	8005adc <xQueueSemaphoreTake>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d00b      	beq.n	8004de8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004dd6:	f06f 0301 	mvn.w	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	e004      	b.n	8004de8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004dde:	f06f 0302 	mvn.w	r3, #2
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	e000      	b.n	8004de8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004de6:	bf00      	nop
      }
    }
  }

  return (stat);
 8004de8:	69fb      	ldr	r3, [r7, #28]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000878 	.word	0x20000878
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004e12:	f06f 0303 	mvn.w	r3, #3
 8004e16:	61fb      	str	r3, [r7, #28]
 8004e18:	e03e      	b.n	8004e98 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e1a:	f3ef 8305 	mrs	r3, IPSR
 8004e1e:	617b      	str	r3, [r7, #20]
  return(result);
 8004e20:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10f      	bne.n	8004e46 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e26:	f3ef 8310 	mrs	r3, PRIMASK
 8004e2a:	613b      	str	r3, [r7, #16]
  return(result);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d105      	bne.n	8004e3e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e32:	f3ef 8311 	mrs	r3, BASEPRI
 8004e36:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01e      	beq.n	8004e7c <osSemaphoreRelease+0x80>
 8004e3e:	4b19      	ldr	r3, [pc, #100]	@ (8004ea4 <osSemaphoreRelease+0xa8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d11a      	bne.n	8004e7c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e4a:	f107 0308 	add.w	r3, r7, #8
 8004e4e:	4619      	mov	r1, r3
 8004e50:	69b8      	ldr	r0, [r7, #24]
 8004e52:	f000 fcc2 	bl	80057da <xQueueGiveFromISR>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d003      	beq.n	8004e64 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004e5c:	f06f 0302 	mvn.w	r3, #2
 8004e60:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e62:	e018      	b.n	8004e96 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d015      	beq.n	8004e96 <osSemaphoreRelease+0x9a>
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea8 <osSemaphoreRelease+0xac>)
 8004e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e7a:	e00c      	b.n	8004e96 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2100      	movs	r1, #0
 8004e82:	69b8      	ldr	r0, [r7, #24]
 8004e84:	f000 fafc 	bl	8005480 <xQueueGenericSend>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d004      	beq.n	8004e98 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004e8e:	f06f 0302 	mvn.w	r3, #2
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	e000      	b.n	8004e98 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e96:	bf00      	nop
    }
  }

  return (stat);
 8004e98:	69fb      	ldr	r3, [r7, #28]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000878 	.word	0x20000878
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	61bb      	str	r3, [r7, #24]
  uint32_t count;

  if (hSemaphore == NULL) {
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <osSemaphoreGetCount+0x18>
    count = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	e01e      	b.n	8004f02 <osSemaphoreGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ec4:	f3ef 8305 	mrs	r3, IPSR
 8004ec8:	617b      	str	r3, [r7, #20]
  return(result);
 8004eca:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10f      	bne.n	8004ef0 <osSemaphoreGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed4:	613b      	str	r3, [r7, #16]
  return(result);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d105      	bne.n	8004ee8 <osSemaphoreGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004edc:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <osSemaphoreGetCount+0x4e>
 8004ee8:	4b08      	ldr	r3, [pc, #32]	@ (8004f0c <osSemaphoreGetCount+0x60>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d104      	bne.n	8004efa <osSemaphoreGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8004ef0:	69b8      	ldr	r0, [r7, #24]
 8004ef2:	f000 ffb4 	bl	8005e5e <uxQueueMessagesWaitingFromISR>
 8004ef6:	61f8      	str	r0, [r7, #28]
 8004ef8:	e003      	b.n	8004f02 <osSemaphoreGetCount+0x56>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8004efa:	69b8      	ldr	r0, [r7, #24]
 8004efc:	f000 ff8e 	bl	8005e1c <uxQueueMessagesWaiting>
 8004f00:	61f8      	str	r0, [r7, #28]
  }

  return (count);
 8004f02:	69fb      	ldr	r3, [r7, #28]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3720      	adds	r7, #32
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20000878 	.word	0x20000878

08004f10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a07      	ldr	r2, [pc, #28]	@ (8004f3c <vApplicationGetIdleTaskMemory+0x2c>)
 8004f20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4a06      	ldr	r2, [pc, #24]	@ (8004f40 <vApplicationGetIdleTaskMemory+0x30>)
 8004f26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2280      	movs	r2, #128	@ 0x80
 8004f2c:	601a      	str	r2, [r3, #0]
}
 8004f2e:	bf00      	nop
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	2000087c 	.word	0x2000087c
 8004f40:	20000924 	.word	0x20000924

08004f44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4a07      	ldr	r2, [pc, #28]	@ (8004f70 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	4a06      	ldr	r2, [pc, #24]	@ (8004f74 <vApplicationGetTimerTaskMemory+0x30>)
 8004f5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f62:	601a      	str	r2, [r3, #0]
}
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	20000b24 	.word	0x20000b24
 8004f74:	20000bcc 	.word	0x20000bcc

08004f78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f103 0208 	add.w	r2, r3, #8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f103 0208 	add.w	r2, r3, #8
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f103 0208 	add.w	r2, r3, #8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b085      	sub	sp, #20
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	601a      	str	r2, [r3, #0]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d103      	bne.n	800503a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e00c      	b.n	8005054 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3308      	adds	r3, #8
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	e002      	b.n	8005048 <vListInsert+0x2e>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	d2f6      	bcs.n	8005042 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	601a      	str	r2, [r3, #0]
}
 8005080:	bf00      	nop
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6892      	ldr	r2, [r2, #8]
 80050a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6852      	ldr	r2, [r2, #4]
 80050ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d103      	bne.n	80050c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	1e5a      	subs	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10d      	bne.n	8005110 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f8:	b672      	cpsid	i
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	b662      	cpsie	i
 8005108:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800510a:	bf00      	nop
 800510c:	bf00      	nop
 800510e:	e7fd      	b.n	800510c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005110:	f002 fd74 	bl	8007bfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511c:	68f9      	ldr	r1, [r7, #12]
 800511e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	441a      	add	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005140:	3b01      	subs	r3, #1
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005146:	fb01 f303 	mul.w	r3, r1, r3
 800514a:	441a      	add	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	22ff      	movs	r2, #255	@ 0xff
 8005154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	22ff      	movs	r2, #255	@ 0xff
 800515c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d114      	bne.n	8005190 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01a      	beq.n	80051a4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3310      	adds	r3, #16
 8005172:	4618      	mov	r0, r3
 8005174:	f001 fd14 	bl	8006ba0 <xTaskRemoveFromEventList>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d012      	beq.n	80051a4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800517e:	4b0d      	ldr	r3, [pc, #52]	@ (80051b4 <xQueueGenericReset+0xd4>)
 8005180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	e009      	b.n	80051a4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3310      	adds	r3, #16
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff feef 	bl	8004f78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3324      	adds	r3, #36	@ 0x24
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff feea 	bl	8004f78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051a4:	f002 fd60 	bl	8007c68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051a8:	2301      	movs	r3, #1
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	e000ed04 	.word	0xe000ed04

080051b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08e      	sub	sp, #56	@ 0x38
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10d      	bne.n	80051e8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d0:	b672      	cpsid	i
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	b662      	cpsie	i
 80051e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
 80051e6:	e7fd      	b.n	80051e4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10d      	bne.n	800520a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	b672      	cpsid	i
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	b662      	cpsie	i
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	e7fd      	b.n	8005206 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <xQueueGenericCreateStatic+0x5e>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <xQueueGenericCreateStatic+0x62>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueGenericCreateStatic+0x64>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10d      	bne.n	800523c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	b672      	cpsid	i
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	b662      	cpsie	i
 8005234:	623b      	str	r3, [r7, #32]
}
 8005236:	bf00      	nop
 8005238:	bf00      	nop
 800523a:	e7fd      	b.n	8005238 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <xQueueGenericCreateStatic+0x90>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <xQueueGenericCreateStatic+0x94>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <xQueueGenericCreateStatic+0x96>
 800524c:	2300      	movs	r3, #0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10d      	bne.n	800526e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005256:	b672      	cpsid	i
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	b662      	cpsie	i
 8005266:	61fb      	str	r3, [r7, #28]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800526e:	2350      	movs	r3, #80	@ 0x50
 8005270:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b50      	cmp	r3, #80	@ 0x50
 8005276:	d00d      	beq.n	8005294 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527c:	b672      	cpsid	i
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	b662      	cpsie	i
 800528c:	61bb      	str	r3, [r7, #24]
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	e7fd      	b.n	8005290 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005294:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800529a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00d      	beq.n	80052bc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80052ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f848 	bl	800534c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80052be:	4618      	mov	r0, r3
 80052c0:	3730      	adds	r7, #48	@ 0x30
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b08a      	sub	sp, #40	@ 0x28
 80052ca:	af02      	add	r7, sp, #8
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	4613      	mov	r3, r2
 80052d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10d      	bne.n	80052f6 <xQueueGenericCreate+0x30>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052de:	b672      	cpsid	i
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	b662      	cpsie	i
 80052ee:	613b      	str	r3, [r7, #16]
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	e7fd      	b.n	80052f2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	e004      	b.n	800530c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	3350      	adds	r3, #80	@ 0x50
 8005310:	4618      	mov	r0, r3
 8005312:	f002 fda1 	bl	8007e58 <pvPortMalloc>
 8005316:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d011      	beq.n	8005342 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	3350      	adds	r3, #80	@ 0x50
 8005326:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005330:	79fa      	ldrb	r2, [r7, #7]
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	4613      	mov	r3, r2
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f805 	bl	800534c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005342:	69bb      	ldr	r3, [r7, #24]
	}
 8005344:	4618      	mov	r0, r3
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e002      	b.n	800536e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800537a:	2101      	movs	r1, #1
 800537c:	69b8      	ldr	r0, [r7, #24]
 800537e:	f7ff feaf 	bl	80050e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	78fa      	ldrb	r2, [r7, #3]
 8005386:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005392:	b580      	push	{r7, lr}
 8005394:	b08a      	sub	sp, #40	@ 0x28
 8005396:	af02      	add	r7, sp, #8
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10d      	bne.n	80053c0 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a8:	b672      	cpsid	i
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	b662      	cpsie	i
 80053b8:	61bb      	str	r3, [r7, #24]
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	e7fd      	b.n	80053bc <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d90d      	bls.n	80053e4 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053cc:	b672      	cpsid	i
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	b662      	cpsie	i
 80053dc:	617b      	str	r3, [r7, #20]
}
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	e7fd      	b.n	80053e0 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80053e4:	2302      	movs	r3, #2
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	2100      	movs	r1, #0
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff fee2 	bl	80051b8 <xQueueGenericCreateStatic>
 80053f4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005402:	69fb      	ldr	r3, [r7, #28]
	}
 8005404:	4618      	mov	r0, r3
 8005406:	3720      	adds	r7, #32
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10d      	bne.n	8005438 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	b672      	cpsid	i
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	b662      	cpsie	i
 8005430:	613b      	str	r3, [r7, #16]
}
 8005432:	bf00      	nop
 8005434:	bf00      	nop
 8005436:	e7fd      	b.n	8005434 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	429a      	cmp	r2, r3
 800543e:	d90d      	bls.n	800545c <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005444:	b672      	cpsid	i
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	b662      	cpsie	i
 8005454:	60fb      	str	r3, [r7, #12]
}
 8005456:	bf00      	nop
 8005458:	bf00      	nop
 800545a:	e7fd      	b.n	8005458 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800545c:	2202      	movs	r2, #2
 800545e:	2100      	movs	r1, #0
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff ff30 	bl	80052c6 <xQueueGenericCreate>
 8005466:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005474:	697b      	ldr	r3, [r7, #20]
	}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08e      	sub	sp, #56	@ 0x38
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800548e:	2300      	movs	r3, #0
 8005490:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10d      	bne.n	80054b8 <xQueueGenericSend+0x38>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a0:	b672      	cpsid	i
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	b662      	cpsie	i
 80054b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	e7fd      	b.n	80054b4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d103      	bne.n	80054c6 <xQueueGenericSend+0x46>
 80054be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <xQueueGenericSend+0x4a>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <xQueueGenericSend+0x4c>
 80054ca:	2300      	movs	r3, #0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10d      	bne.n	80054ec <xQueueGenericSend+0x6c>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	b672      	cpsid	i
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	b662      	cpsie	i
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054e6:	bf00      	nop
 80054e8:	bf00      	nop
 80054ea:	e7fd      	b.n	80054e8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d103      	bne.n	80054fa <xQueueGenericSend+0x7a>
 80054f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <xQueueGenericSend+0x7e>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <xQueueGenericSend+0x80>
 80054fe:	2300      	movs	r3, #0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10d      	bne.n	8005520 <xQueueGenericSend+0xa0>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005508:	b672      	cpsid	i
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	b662      	cpsie	i
 8005518:	623b      	str	r3, [r7, #32]
}
 800551a:	bf00      	nop
 800551c:	bf00      	nop
 800551e:	e7fd      	b.n	800551c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005520:	f001 fd0c 	bl	8006f3c <xTaskGetSchedulerState>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d102      	bne.n	8005530 <xQueueGenericSend+0xb0>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <xQueueGenericSend+0xb4>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <xQueueGenericSend+0xb6>
 8005534:	2300      	movs	r3, #0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10d      	bne.n	8005556 <xQueueGenericSend+0xd6>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553e:	b672      	cpsid	i
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	b662      	cpsie	i
 800554e:	61fb      	str	r3, [r7, #28]
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005556:	f002 fb51 	bl	8007bfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005562:	429a      	cmp	r2, r3
 8005564:	d302      	bcc.n	800556c <xQueueGenericSend+0xec>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d129      	bne.n	80055c0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	68b9      	ldr	r1, [r7, #8]
 8005570:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005572:	f000 fcd3 	bl	8005f1c <prvCopyDataToQueue>
 8005576:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557c:	2b00      	cmp	r3, #0
 800557e:	d010      	beq.n	80055a2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005582:	3324      	adds	r3, #36	@ 0x24
 8005584:	4618      	mov	r0, r3
 8005586:	f001 fb0b 	bl	8006ba0 <xTaskRemoveFromEventList>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d013      	beq.n	80055b8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005590:	4b3f      	ldr	r3, [pc, #252]	@ (8005690 <xQueueGenericSend+0x210>)
 8005592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	e00a      	b.n	80055b8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055a8:	4b39      	ldr	r3, [pc, #228]	@ (8005690 <xQueueGenericSend+0x210>)
 80055aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055b8:	f002 fb56 	bl	8007c68 <vPortExitCritical>
				return pdPASS;
 80055bc:	2301      	movs	r3, #1
 80055be:	e063      	b.n	8005688 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d103      	bne.n	80055ce <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055c6:	f002 fb4f 	bl	8007c68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e05c      	b.n	8005688 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d106      	bne.n	80055e2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055d4:	f107 0314 	add.w	r3, r7, #20
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 fb47 	bl	8006c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055de:	2301      	movs	r3, #1
 80055e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055e2:	f002 fb41 	bl	8007c68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055e6:	f001 f8a3 	bl	8006730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055ea:	f002 fb07 	bl	8007bfc <vPortEnterCritical>
 80055ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055f4:	b25b      	sxtb	r3, r3
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	d103      	bne.n	8005604 <xQueueGenericSend+0x184>
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005606:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800560a:	b25b      	sxtb	r3, r3
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005610:	d103      	bne.n	800561a <xQueueGenericSend+0x19a>
 8005612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800561a:	f002 fb25 	bl	8007c68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800561e:	1d3a      	adds	r2, r7, #4
 8005620:	f107 0314 	add.w	r3, r7, #20
 8005624:	4611      	mov	r1, r2
 8005626:	4618      	mov	r0, r3
 8005628:	f001 fb36 	bl	8006c98 <xTaskCheckForTimeOut>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d124      	bne.n	800567c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005632:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005634:	f000 fd6a 	bl	800610c <prvIsQueueFull>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d018      	beq.n	8005670 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800563e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005640:	3310      	adds	r3, #16
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	4611      	mov	r1, r2
 8005646:	4618      	mov	r0, r3
 8005648:	f001 fa54 	bl	8006af4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800564c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800564e:	f000 fcf5 	bl	800603c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005652:	f001 f87b 	bl	800674c <xTaskResumeAll>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	f47f af7c 	bne.w	8005556 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800565e:	4b0c      	ldr	r3, [pc, #48]	@ (8005690 <xQueueGenericSend+0x210>)
 8005660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	e772      	b.n	8005556 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005672:	f000 fce3 	bl	800603c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005676:	f001 f869 	bl	800674c <xTaskResumeAll>
 800567a:	e76c      	b.n	8005556 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800567c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800567e:	f000 fcdd 	bl	800603c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005682:	f001 f863 	bl	800674c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005688:	4618      	mov	r0, r3
 800568a:	3738      	adds	r7, #56	@ 0x38
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08e      	sub	sp, #56	@ 0x38
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10d      	bne.n	80056c8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b0:	b672      	cpsid	i
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	b662      	cpsie	i
 80056c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d103      	bne.n	80056d6 <xQueueGenericSendFromISR+0x42>
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <xQueueGenericSendFromISR+0x46>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <xQueueGenericSendFromISR+0x48>
 80056da:	2300      	movs	r3, #0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10d      	bne.n	80056fc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e4:	b672      	cpsid	i
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	b662      	cpsie	i
 80056f4:	623b      	str	r3, [r7, #32]
}
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
 80056fa:	e7fd      	b.n	80056f8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d103      	bne.n	800570a <xQueueGenericSendFromISR+0x76>
 8005702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <xQueueGenericSendFromISR+0x7a>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <xQueueGenericSendFromISR+0x7c>
 800570e:	2300      	movs	r3, #0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10d      	bne.n	8005730 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005718:	b672      	cpsid	i
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	b662      	cpsie	i
 8005728:	61fb      	str	r3, [r7, #28]
}
 800572a:	bf00      	nop
 800572c:	bf00      	nop
 800572e:	e7fd      	b.n	800572c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005730:	f002 fb4c 	bl	8007dcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005734:	f3ef 8211 	mrs	r2, BASEPRI
 8005738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573c:	b672      	cpsid	i
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	b662      	cpsie	i
 800574c:	61ba      	str	r2, [r7, #24]
 800574e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005750:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005752:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575c:	429a      	cmp	r2, r3
 800575e:	d302      	bcc.n	8005766 <xQueueGenericSendFromISR+0xd2>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d12c      	bne.n	80057c0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005768:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800576c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005776:	f000 fbd1 	bl	8005f1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800577a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d112      	bne.n	80057aa <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	d016      	beq.n	80057ba <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	3324      	adds	r3, #36	@ 0x24
 8005790:	4618      	mov	r0, r3
 8005792:	f001 fa05 	bl	8006ba0 <xTaskRemoveFromEventList>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00e      	beq.n	80057ba <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e007      	b.n	80057ba <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057ae:	3301      	adds	r3, #1
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	b25a      	sxtb	r2, r3
 80057b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80057ba:	2301      	movs	r3, #1
 80057bc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80057be:	e001      	b.n	80057c4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3738      	adds	r7, #56	@ 0x38
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b08e      	sub	sp, #56	@ 0x38
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80057e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10d      	bne.n	800580a <xQueueGiveFromISR+0x30>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	b672      	cpsid	i
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	b662      	cpsie	i
 8005802:	623b      	str	r3, [r7, #32]
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	e7fd      	b.n	8005806 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00d      	beq.n	800582e <xQueueGiveFromISR+0x54>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005816:	b672      	cpsid	i
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	b662      	cpsie	i
 8005826:	61fb      	str	r3, [r7, #28]
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	e7fd      	b.n	800582a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d103      	bne.n	800583e <xQueueGiveFromISR+0x64>
 8005836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <xQueueGiveFromISR+0x68>
 800583e:	2301      	movs	r3, #1
 8005840:	e000      	b.n	8005844 <xQueueGiveFromISR+0x6a>
 8005842:	2300      	movs	r3, #0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10d      	bne.n	8005864 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584c:	b672      	cpsid	i
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	b662      	cpsie	i
 800585c:	61bb      	str	r3, [r7, #24]
}
 800585e:	bf00      	nop
 8005860:	bf00      	nop
 8005862:	e7fd      	b.n	8005860 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005864:	f002 fab2 	bl	8007dcc <vPortValidateInterruptPriority>
	__asm volatile
 8005868:	f3ef 8211 	mrs	r2, BASEPRI
 800586c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005870:	b672      	cpsid	i
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	b662      	cpsie	i
 8005880:	617a      	str	r2, [r7, #20]
 8005882:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005884:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005886:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005894:	429a      	cmp	r2, r3
 8005896:	d22b      	bcs.n	80058f0 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800589e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	d112      	bne.n	80058da <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d016      	beq.n	80058ea <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058be:	3324      	adds	r3, #36	@ 0x24
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 f96d 	bl	8006ba0 <xTaskRemoveFromEventList>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00e      	beq.n	80058ea <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e007      	b.n	80058ea <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058de:	3301      	adds	r3, #1
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	b25a      	sxtb	r2, r3
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80058ea:	2301      	movs	r3, #1
 80058ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ee:	e001      	b.n	80058f4 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80058f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f383 8811 	msr	BASEPRI, r3
}
 80058fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005902:	4618      	mov	r0, r3
 8005904:	3738      	adds	r7, #56	@ 0x38
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08c      	sub	sp, #48	@ 0x30
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005918:	2300      	movs	r3, #0
 800591a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10d      	bne.n	8005942 <xQueueReceive+0x36>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592a:	b672      	cpsid	i
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	b662      	cpsie	i
 800593a:	623b      	str	r3, [r7, #32]
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	e7fd      	b.n	800593e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <xQueueReceive+0x44>
 8005948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <xQueueReceive+0x48>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <xQueueReceive+0x4a>
 8005954:	2300      	movs	r3, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <xQueueReceive+0x6a>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595e:	b672      	cpsid	i
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	b662      	cpsie	i
 800596e:	61fb      	str	r3, [r7, #28]
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	e7fd      	b.n	8005972 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005976:	f001 fae1 	bl	8006f3c <xTaskGetSchedulerState>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <xQueueReceive+0x7a>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <xQueueReceive+0x7e>
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <xQueueReceive+0x80>
 800598a:	2300      	movs	r3, #0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10d      	bne.n	80059ac <xQueueReceive+0xa0>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005994:	b672      	cpsid	i
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	b662      	cpsie	i
 80059a4:	61bb      	str	r3, [r7, #24]
}
 80059a6:	bf00      	nop
 80059a8:	bf00      	nop
 80059aa:	e7fd      	b.n	80059a8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059ac:	f002 f926 	bl	8007bfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01f      	beq.n	80059fc <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059c0:	f000 fb16 	bl	8005ff0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	1e5a      	subs	r2, r3, #1
 80059c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00f      	beq.n	80059f4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d6:	3310      	adds	r3, #16
 80059d8:	4618      	mov	r0, r3
 80059da:	f001 f8e1 	bl	8006ba0 <xTaskRemoveFromEventList>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d007      	beq.n	80059f4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059e4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ad8 <xQueueReceive+0x1cc>)
 80059e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059f4:	f002 f938 	bl	8007c68 <vPortExitCritical>
				return pdPASS;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e069      	b.n	8005ad0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d103      	bne.n	8005a0a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a02:	f002 f931 	bl	8007c68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e062      	b.n	8005ad0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d106      	bne.n	8005a1e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a10:	f107 0310 	add.w	r3, r7, #16
 8005a14:	4618      	mov	r0, r3
 8005a16:	f001 f929 	bl	8006c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a1e:	f002 f923 	bl	8007c68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a22:	f000 fe85 	bl	8006730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a26:	f002 f8e9 	bl	8007bfc <vPortEnterCritical>
 8005a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a30:	b25b      	sxtb	r3, r3
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d103      	bne.n	8005a40 <xQueueReceive+0x134>
 8005a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a46:	b25b      	sxtb	r3, r3
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d103      	bne.n	8005a56 <xQueueReceive+0x14a>
 8005a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a56:	f002 f907 	bl	8007c68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a5a:	1d3a      	adds	r2, r7, #4
 8005a5c:	f107 0310 	add.w	r3, r7, #16
 8005a60:	4611      	mov	r1, r2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 f918 	bl	8006c98 <xTaskCheckForTimeOut>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d123      	bne.n	8005ab6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a70:	f000 fb36 	bl	80060e0 <prvIsQueueEmpty>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d017      	beq.n	8005aaa <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7c:	3324      	adds	r3, #36	@ 0x24
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	4611      	mov	r1, r2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 f836 	bl	8006af4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a8a:	f000 fad7 	bl	800603c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a8e:	f000 fe5d 	bl	800674c <xTaskResumeAll>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d189      	bne.n	80059ac <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005a98:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad8 <xQueueReceive+0x1cc>)
 8005a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	e780      	b.n	80059ac <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005aaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005aac:	f000 fac6 	bl	800603c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ab0:	f000 fe4c 	bl	800674c <xTaskResumeAll>
 8005ab4:	e77a      	b.n	80059ac <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ab8:	f000 fac0 	bl	800603c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005abc:	f000 fe46 	bl	800674c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ac0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ac2:	f000 fb0d 	bl	80060e0 <prvIsQueueEmpty>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f43f af6f 	beq.w	80059ac <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ace:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3730      	adds	r7, #48	@ 0x30
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08e      	sub	sp, #56	@ 0x38
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10d      	bne.n	8005b14 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afc:	b672      	cpsid	i
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	b662      	cpsie	i
 8005b0c:	623b      	str	r3, [r7, #32]
}
 8005b0e:	bf00      	nop
 8005b10:	bf00      	nop
 8005b12:	e7fd      	b.n	8005b10 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00d      	beq.n	8005b38 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b20:	b672      	cpsid	i
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	b662      	cpsie	i
 8005b30:	61fb      	str	r3, [r7, #28]
}
 8005b32:	bf00      	nop
 8005b34:	bf00      	nop
 8005b36:	e7fd      	b.n	8005b34 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b38:	f001 fa00 	bl	8006f3c <xTaskGetSchedulerState>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <xQueueSemaphoreTake+0x6c>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <xQueueSemaphoreTake+0x70>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e000      	b.n	8005b4e <xQueueSemaphoreTake+0x72>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10d      	bne.n	8005b6e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b56:	b672      	cpsid	i
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	b662      	cpsie	i
 8005b66:	61bb      	str	r3, [r7, #24]
}
 8005b68:	bf00      	nop
 8005b6a:	bf00      	nop
 8005b6c:	e7fd      	b.n	8005b6a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b6e:	f002 f845 	bl	8007bfc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b76:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d024      	beq.n	8005bc8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b80:	1e5a      	subs	r2, r3, #1
 8005b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b84:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d104      	bne.n	8005b98 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b8e:	f001 fb57 	bl	8007240 <pvTaskIncrementMutexHeldCount>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00f      	beq.n	8005bc0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba2:	3310      	adds	r3, #16
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fffb 	bl	8006ba0 <xTaskRemoveFromEventList>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bb0:	4b55      	ldr	r3, [pc, #340]	@ (8005d08 <xQueueSemaphoreTake+0x22c>)
 8005bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bc0:	f002 f852 	bl	8007c68 <vPortExitCritical>
				return pdPASS;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e09a      	b.n	8005cfe <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d114      	bne.n	8005bf8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00d      	beq.n	8005bf0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd8:	b672      	cpsid	i
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	b662      	cpsie	i
 8005be8:	617b      	str	r3, [r7, #20]
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005bf0:	f002 f83a 	bl	8007c68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e082      	b.n	8005cfe <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d106      	bne.n	8005c0c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bfe:	f107 030c 	add.w	r3, r7, #12
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 f832 	bl	8006c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c0c:	f002 f82c 	bl	8007c68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c10:	f000 fd8e 	bl	8006730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c14:	f001 fff2 	bl	8007bfc <vPortEnterCritical>
 8005c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c1e:	b25b      	sxtb	r3, r3
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d103      	bne.n	8005c2e <xQueueSemaphoreTake+0x152>
 8005c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c34:	b25b      	sxtb	r3, r3
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3a:	d103      	bne.n	8005c44 <xQueueSemaphoreTake+0x168>
 8005c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c44:	f002 f810 	bl	8007c68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c48:	463a      	mov	r2, r7
 8005c4a:	f107 030c 	add.w	r3, r7, #12
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 f821 	bl	8006c98 <xTaskCheckForTimeOut>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d132      	bne.n	8005cc2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c5e:	f000 fa3f 	bl	80060e0 <prvIsQueueEmpty>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d026      	beq.n	8005cb6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d109      	bne.n	8005c84 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005c70:	f001 ffc4 	bl	8007bfc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f001 f97d 	bl	8006f78 <xTaskPriorityInherit>
 8005c7e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005c80:	f001 fff2 	bl	8007c68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c86:	3324      	adds	r3, #36	@ 0x24
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 ff31 	bl	8006af4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c94:	f000 f9d2 	bl	800603c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c98:	f000 fd58 	bl	800674c <xTaskResumeAll>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f47f af65 	bne.w	8005b6e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005ca4:	4b18      	ldr	r3, [pc, #96]	@ (8005d08 <xQueueSemaphoreTake+0x22c>)
 8005ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	e75b      	b.n	8005b6e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005cb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cb8:	f000 f9c0 	bl	800603c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cbc:	f000 fd46 	bl	800674c <xTaskResumeAll>
 8005cc0:	e755      	b.n	8005b6e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005cc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cc4:	f000 f9ba 	bl	800603c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cc8:	f000 fd40 	bl	800674c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ccc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cce:	f000 fa07 	bl	80060e0 <prvIsQueueEmpty>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f43f af4a 	beq.w	8005b6e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00d      	beq.n	8005cfc <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005ce0:	f001 ff8c 	bl	8007bfc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ce4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ce6:	f000 f901 	bl	8005eec <prvGetDisinheritPriorityAfterTimeout>
 8005cea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 fa1c 	bl	8007130 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005cf8:	f001 ffb6 	bl	8007c68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3738      	adds	r7, #56	@ 0x38
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	e000ed04 	.word	0xe000ed04

08005d0c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08e      	sub	sp, #56	@ 0x38
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10d      	bne.n	8005d3e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d26:	b672      	cpsid	i
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	b662      	cpsie	i
 8005d36:	623b      	str	r3, [r7, #32]
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	e7fd      	b.n	8005d3a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d103      	bne.n	8005d4c <xQueueReceiveFromISR+0x40>
 8005d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <xQueueReceiveFromISR+0x44>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <xQueueReceiveFromISR+0x46>
 8005d50:	2300      	movs	r3, #0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10d      	bne.n	8005d72 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5a:	b672      	cpsid	i
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	b662      	cpsie	i
 8005d6a:	61fb      	str	r3, [r7, #28]
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	e7fd      	b.n	8005d6e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d72:	f002 f82b 	bl	8007dcc <vPortValidateInterruptPriority>
	__asm volatile
 8005d76:	f3ef 8211 	mrs	r2, BASEPRI
 8005d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7e:	b672      	cpsid	i
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	b662      	cpsie	i
 8005d8e:	61ba      	str	r2, [r7, #24]
 8005d90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d02f      	beq.n	8005e02 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005db0:	f000 f91e 	bl	8005ff0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db6:	1e5a      	subs	r2, r3, #1
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005dbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d112      	bne.n	8005dec <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d016      	beq.n	8005dfc <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd0:	3310      	adds	r3, #16
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fee4 	bl	8006ba0 <xTaskRemoveFromEventList>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00e      	beq.n	8005dfc <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00b      	beq.n	8005dfc <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e007      	b.n	8005dfc <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005df0:	3301      	adds	r3, #1
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	b25a      	sxtb	r2, r3
 8005df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e00:	e001      	b.n	8005e06 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e08:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f383 8811 	msr	BASEPRI, r3
}
 8005e10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3738      	adds	r7, #56	@ 0x38
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10d      	bne.n	8005e46 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2e:	b672      	cpsid	i
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	b662      	cpsie	i
 8005e3e:	60bb      	str	r3, [r7, #8]
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	e7fd      	b.n	8005e42 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8005e46:	f001 fed9 	bl	8007bfc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005e50:	f001 ff0a 	bl	8007c68 <vPortExitCritical>

	return uxReturn;
 8005e54:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b087      	sub	sp, #28
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10d      	bne.n	8005e8c <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e74:	b672      	cpsid	i
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	b662      	cpsie	i
 8005e84:	60fb      	str	r3, [r7, #12]
}
 8005e86:	bf00      	nop
 8005e88:	bf00      	nop
 8005e8a:	e7fd      	b.n	8005e88 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005e92:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e94:	4618      	mov	r0, r3
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10d      	bne.n	8005ece <vQueueDelete+0x2e>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb6:	b672      	cpsid	i
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	b662      	cpsie	i
 8005ec6:	60bb      	str	r3, [r7, #8]
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	e7fd      	b.n	8005eca <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f95e 	bl	8006190 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f002 f888 	bl	8007ff4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005ee4:	bf00      	nop
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d006      	beq.n	8005f0a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	e001      	b.n	8005f0e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
	}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10d      	bne.n	8005f56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d14d      	bne.n	8005fde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f001 f87e 	bl	8007048 <xTaskPriorityDisinherit>
 8005f4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	609a      	str	r2, [r3, #8]
 8005f54:	e043      	b.n	8005fde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d119      	bne.n	8005f90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6858      	ldr	r0, [r3, #4]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f64:	461a      	mov	r2, r3
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	f002 f9ec 	bl	8008344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f74:	441a      	add	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d32b      	bcc.n	8005fde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	e026      	b.n	8005fde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68d8      	ldr	r0, [r3, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f98:	461a      	mov	r2, r3
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	f002 f9d2 	bl	8008344 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa8:	425b      	negs	r3, r3
 8005faa:	441a      	add	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d207      	bcs.n	8005fcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc4:	425b      	negs	r3, r3
 8005fc6:	441a      	add	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d105      	bne.n	8005fde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005fe6:	697b      	ldr	r3, [r7, #20]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d018      	beq.n	8006034 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600a:	441a      	add	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	429a      	cmp	r2, r3
 800601a:	d303      	bcc.n	8006024 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68d9      	ldr	r1, [r3, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602c:	461a      	mov	r2, r3
 800602e:	6838      	ldr	r0, [r7, #0]
 8006030:	f002 f988 	bl	8008344 <memcpy>
	}
}
 8006034:	bf00      	nop
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006044:	f001 fdda 	bl	8007bfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800604e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006050:	e011      	b.n	8006076 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006056:	2b00      	cmp	r3, #0
 8006058:	d012      	beq.n	8006080 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3324      	adds	r3, #36	@ 0x24
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fd9e 	bl	8006ba0 <xTaskRemoveFromEventList>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800606a:	f000 fe7d 	bl	8006d68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	3b01      	subs	r3, #1
 8006072:	b2db      	uxtb	r3, r3
 8006074:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800607a:	2b00      	cmp	r3, #0
 800607c:	dce9      	bgt.n	8006052 <prvUnlockQueue+0x16>
 800607e:	e000      	b.n	8006082 <prvUnlockQueue+0x46>
					break;
 8006080:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	22ff      	movs	r2, #255	@ 0xff
 8006086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800608a:	f001 fded 	bl	8007c68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800608e:	f001 fdb5 	bl	8007bfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006098:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800609a:	e011      	b.n	80060c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d012      	beq.n	80060ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3310      	adds	r3, #16
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fd79 	bl	8006ba0 <xTaskRemoveFromEventList>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060b4:	f000 fe58 	bl	8006d68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	dce9      	bgt.n	800609c <prvUnlockQueue+0x60>
 80060c8:	e000      	b.n	80060cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	22ff      	movs	r2, #255	@ 0xff
 80060d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80060d4:	f001 fdc8 	bl	8007c68 <vPortExitCritical>
}
 80060d8:	bf00      	nop
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060e8:	f001 fd88 	bl	8007bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d102      	bne.n	80060fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060f4:	2301      	movs	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	e001      	b.n	80060fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060fe:	f001 fdb3 	bl	8007c68 <vPortExitCritical>

	return xReturn;
 8006102:	68fb      	ldr	r3, [r7, #12]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006114:	f001 fd72 	bl	8007bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006120:	429a      	cmp	r2, r3
 8006122:	d102      	bne.n	800612a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006124:	2301      	movs	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	e001      	b.n	800612e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800612e:	f001 fd9b 	bl	8007c68 <vPortExitCritical>

	return xReturn;
 8006132:	68fb      	ldr	r3, [r7, #12]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006146:	2300      	movs	r3, #0
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	e014      	b.n	8006176 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800614c:	4a0f      	ldr	r2, [pc, #60]	@ (800618c <vQueueAddToRegistry+0x50>)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10b      	bne.n	8006170 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006158:	490c      	ldr	r1, [pc, #48]	@ (800618c <vQueueAddToRegistry+0x50>)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006162:	4a0a      	ldr	r2, [pc, #40]	@ (800618c <vQueueAddToRegistry+0x50>)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	4413      	add	r3, r2
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800616e:	e006      	b.n	800617e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3301      	adds	r3, #1
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b07      	cmp	r3, #7
 800617a:	d9e7      	bls.n	800614c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	20000fcc 	.word	0x20000fcc

08006190 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	e016      	b.n	80061cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800619e:	4a10      	ldr	r2, [pc, #64]	@ (80061e0 <vQueueUnregisterQueue+0x50>)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	4413      	add	r3, r2
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d10b      	bne.n	80061c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80061ae:	4a0c      	ldr	r2, [pc, #48]	@ (80061e0 <vQueueUnregisterQueue+0x50>)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2100      	movs	r1, #0
 80061b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80061b8:	4a09      	ldr	r2, [pc, #36]	@ (80061e0 <vQueueUnregisterQueue+0x50>)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4413      	add	r3, r2
 80061c0:	2200      	movs	r2, #0
 80061c2:	605a      	str	r2, [r3, #4]
				break;
 80061c4:	e006      	b.n	80061d4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3301      	adds	r3, #1
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b07      	cmp	r3, #7
 80061d0:	d9e5      	bls.n	800619e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80061d2:	bf00      	nop
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	20000fcc 	.word	0x20000fcc

080061e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061f4:	f001 fd02 	bl	8007bfc <vPortEnterCritical>
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061fe:	b25b      	sxtb	r3, r3
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d103      	bne.n	800620e <vQueueWaitForMessageRestricted+0x2a>
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006214:	b25b      	sxtb	r3, r3
 8006216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621a:	d103      	bne.n	8006224 <vQueueWaitForMessageRestricted+0x40>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006224:	f001 fd20 	bl	8007c68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622c:	2b00      	cmp	r3, #0
 800622e:	d106      	bne.n	800623e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	3324      	adds	r3, #36	@ 0x24
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	4618      	mov	r0, r3
 800623a:	f000 fc83 	bl	8006b44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800623e:	6978      	ldr	r0, [r7, #20]
 8006240:	f7ff fefc 	bl	800603c <prvUnlockQueue>
	}
 8006244:	bf00      	nop
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08e      	sub	sp, #56	@ 0x38
 8006250:	af04      	add	r7, sp, #16
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800625a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10d      	bne.n	800627c <xTaskCreateStatic+0x30>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006264:	b672      	cpsid	i
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	b662      	cpsie	i
 8006274:	623b      	str	r3, [r7, #32]
}
 8006276:	bf00      	nop
 8006278:	bf00      	nop
 800627a:	e7fd      	b.n	8006278 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800627c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10d      	bne.n	800629e <xTaskCreateStatic+0x52>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006286:	b672      	cpsid	i
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	b662      	cpsie	i
 8006296:	61fb      	str	r3, [r7, #28]
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	e7fd      	b.n	800629a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800629e:	23a8      	movs	r3, #168	@ 0xa8
 80062a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2ba8      	cmp	r3, #168	@ 0xa8
 80062a6:	d00d      	beq.n	80062c4 <xTaskCreateStatic+0x78>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ac:	b672      	cpsid	i
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	b662      	cpsie	i
 80062bc:	61bb      	str	r3, [r7, #24]
}
 80062be:	bf00      	nop
 80062c0:	bf00      	nop
 80062c2:	e7fd      	b.n	80062c0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01e      	beq.n	800630a <xTaskCreateStatic+0xbe>
 80062cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d01b      	beq.n	800630a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062e4:	2300      	movs	r3, #0
 80062e6:	9303      	str	r3, [sp, #12]
 80062e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ea:	9302      	str	r3, [sp, #8]
 80062ec:	f107 0314 	add.w	r3, r7, #20
 80062f0:	9301      	str	r3, [sp, #4]
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 f851 	bl	80063a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006302:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006304:	f000 f8f8 	bl	80064f8 <prvAddNewTaskToReadyList>
 8006308:	e001      	b.n	800630e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800630e:	697b      	ldr	r3, [r7, #20]
	}
 8006310:	4618      	mov	r0, r3
 8006312:	3728      	adds	r7, #40	@ 0x28
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08c      	sub	sp, #48	@ 0x30
 800631c:	af04      	add	r7, sp, #16
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	603b      	str	r3, [r7, #0]
 8006324:	4613      	mov	r3, r2
 8006326:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006328:	88fb      	ldrh	r3, [r7, #6]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4618      	mov	r0, r3
 800632e:	f001 fd93 	bl	8007e58 <pvPortMalloc>
 8006332:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00e      	beq.n	8006358 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800633a:	20a8      	movs	r0, #168	@ 0xa8
 800633c:	f001 fd8c 	bl	8007e58 <pvPortMalloc>
 8006340:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	631a      	str	r2, [r3, #48]	@ 0x30
 800634e:	e005      	b.n	800635c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006350:	6978      	ldr	r0, [r7, #20]
 8006352:	f001 fe4f 	bl	8007ff4 <vPortFree>
 8006356:	e001      	b.n	800635c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006358:	2300      	movs	r3, #0
 800635a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d017      	beq.n	8006392 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800636a:	88fa      	ldrh	r2, [r7, #6]
 800636c:	2300      	movs	r3, #0
 800636e:	9303      	str	r3, [sp, #12]
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	9302      	str	r3, [sp, #8]
 8006374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f80f 	bl	80063a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006386:	69f8      	ldr	r0, [r7, #28]
 8006388:	f000 f8b6 	bl	80064f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800638c:	2301      	movs	r3, #1
 800638e:	61bb      	str	r3, [r7, #24]
 8006390:	e002      	b.n	8006398 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006392:	f04f 33ff 	mov.w	r3, #4294967295
 8006396:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006398:	69bb      	ldr	r3, [r7, #24]
	}
 800639a:	4618      	mov	r0, r3
 800639c:	3720      	adds	r7, #32
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	461a      	mov	r2, r3
 80063bc:	21a5      	movs	r1, #165	@ 0xa5
 80063be:	f001 ff35 	bl	800822c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80063cc:	440b      	add	r3, r1
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	f023 0307 	bic.w	r3, r3, #7
 80063da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00d      	beq.n	8006402 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ea:	b672      	cpsid	i
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	b662      	cpsie	i
 80063fa:	617b      	str	r3, [r7, #20]
}
 80063fc:	bf00      	nop
 80063fe:	bf00      	nop
 8006400:	e7fd      	b.n	80063fe <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01f      	beq.n	8006448 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006408:	2300      	movs	r3, #0
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	e012      	b.n	8006434 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	4413      	add	r3, r2
 8006414:	7819      	ldrb	r1, [r3, #0]
 8006416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	4413      	add	r3, r2
 800641c:	3334      	adds	r3, #52	@ 0x34
 800641e:	460a      	mov	r2, r1
 8006420:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	4413      	add	r3, r2
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d006      	beq.n	800643c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	3301      	adds	r3, #1
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	2b0f      	cmp	r3, #15
 8006438:	d9e9      	bls.n	800640e <prvInitialiseNewTask+0x6a>
 800643a:	e000      	b.n	800643e <prvInitialiseNewTask+0x9a>
			{
				break;
 800643c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006446:	e003      	b.n	8006450 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006452:	2b37      	cmp	r3, #55	@ 0x37
 8006454:	d901      	bls.n	800645a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006456:	2337      	movs	r3, #55	@ 0x37
 8006458:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800645e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006464:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	2200      	movs	r2, #0
 800646a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646e:	3304      	adds	r3, #4
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe fda1 	bl	8004fb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	3318      	adds	r3, #24
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe fd9c 	bl	8004fb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006484:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006488:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800648c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006494:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	2200      	movs	r2, #0
 800649a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800649e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	3354      	adds	r3, #84	@ 0x54
 80064aa:	224c      	movs	r2, #76	@ 0x4c
 80064ac:	2100      	movs	r1, #0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 febc 	bl	800822c <memset>
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	4a0d      	ldr	r2, [pc, #52]	@ (80064ec <prvInitialiseNewTask+0x148>)
 80064b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80064ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064bc:	4a0c      	ldr	r2, [pc, #48]	@ (80064f0 <prvInitialiseNewTask+0x14c>)
 80064be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80064c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c2:	4a0c      	ldr	r2, [pc, #48]	@ (80064f4 <prvInitialiseNewTask+0x150>)
 80064c4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	68f9      	ldr	r1, [r7, #12]
 80064ca:	69b8      	ldr	r0, [r7, #24]
 80064cc:	f001 fa88 	bl	80079e0 <pxPortInitialiseStack>
 80064d0:	4602      	mov	r2, r0
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064e2:	bf00      	nop
 80064e4:	3720      	adds	r7, #32
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20005258 	.word	0x20005258
 80064f0:	200052c0 	.word	0x200052c0
 80064f4:	20005328 	.word	0x20005328

080064f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006500:	f001 fb7c 	bl	8007bfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006504:	4b2d      	ldr	r3, [pc, #180]	@ (80065bc <prvAddNewTaskToReadyList+0xc4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3301      	adds	r3, #1
 800650a:	4a2c      	ldr	r2, [pc, #176]	@ (80065bc <prvAddNewTaskToReadyList+0xc4>)
 800650c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800650e:	4b2c      	ldr	r3, [pc, #176]	@ (80065c0 <prvAddNewTaskToReadyList+0xc8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006516:	4a2a      	ldr	r2, [pc, #168]	@ (80065c0 <prvAddNewTaskToReadyList+0xc8>)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800651c:	4b27      	ldr	r3, [pc, #156]	@ (80065bc <prvAddNewTaskToReadyList+0xc4>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d110      	bne.n	8006546 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006524:	f000 fc44 	bl	8006db0 <prvInitialiseTaskLists>
 8006528:	e00d      	b.n	8006546 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800652a:	4b26      	ldr	r3, [pc, #152]	@ (80065c4 <prvAddNewTaskToReadyList+0xcc>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006532:	4b23      	ldr	r3, [pc, #140]	@ (80065c0 <prvAddNewTaskToReadyList+0xc8>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653c:	429a      	cmp	r2, r3
 800653e:	d802      	bhi.n	8006546 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006540:	4a1f      	ldr	r2, [pc, #124]	@ (80065c0 <prvAddNewTaskToReadyList+0xc8>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006546:	4b20      	ldr	r3, [pc, #128]	@ (80065c8 <prvAddNewTaskToReadyList+0xd0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3301      	adds	r3, #1
 800654c:	4a1e      	ldr	r2, [pc, #120]	@ (80065c8 <prvAddNewTaskToReadyList+0xd0>)
 800654e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006550:	4b1d      	ldr	r3, [pc, #116]	@ (80065c8 <prvAddNewTaskToReadyList+0xd0>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800655c:	4b1b      	ldr	r3, [pc, #108]	@ (80065cc <prvAddNewTaskToReadyList+0xd4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d903      	bls.n	800656c <prvAddNewTaskToReadyList+0x74>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006568:	4a18      	ldr	r2, [pc, #96]	@ (80065cc <prvAddNewTaskToReadyList+0xd4>)
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4a15      	ldr	r2, [pc, #84]	@ (80065d0 <prvAddNewTaskToReadyList+0xd8>)
 800657a:	441a      	add	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f7fe fd25 	bl	8004fd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006588:	f001 fb6e 	bl	8007c68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800658c:	4b0d      	ldr	r3, [pc, #52]	@ (80065c4 <prvAddNewTaskToReadyList+0xcc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00e      	beq.n	80065b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006594:	4b0a      	ldr	r3, [pc, #40]	@ (80065c0 <prvAddNewTaskToReadyList+0xc8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659e:	429a      	cmp	r2, r3
 80065a0:	d207      	bcs.n	80065b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065a2:	4b0c      	ldr	r3, [pc, #48]	@ (80065d4 <prvAddNewTaskToReadyList+0xdc>)
 80065a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065b2:	bf00      	nop
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	200014e0 	.word	0x200014e0
 80065c0:	2000100c 	.word	0x2000100c
 80065c4:	200014ec 	.word	0x200014ec
 80065c8:	200014fc 	.word	0x200014fc
 80065cc:	200014e8 	.word	0x200014e8
 80065d0:	20001010 	.word	0x20001010
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d01a      	beq.n	8006620 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065ea:	4b15      	ldr	r3, [pc, #84]	@ (8006640 <vTaskDelay+0x68>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00d      	beq.n	800660e <vTaskDelay+0x36>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f6:	b672      	cpsid	i
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	b662      	cpsie	i
 8006606:	60bb      	str	r3, [r7, #8]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800660e:	f000 f88f 	bl	8006730 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006612:	2100      	movs	r1, #0
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fe27 	bl	8007268 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800661a:	f000 f897 	bl	800674c <xTaskResumeAll>
 800661e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d107      	bne.n	8006636 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006626:	4b07      	ldr	r3, [pc, #28]	@ (8006644 <vTaskDelay+0x6c>)
 8006628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006636:	bf00      	nop
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20001508 	.word	0x20001508
 8006644:	e000ed04 	.word	0xe000ed04

08006648 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	@ 0x28
 800664c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006656:	463a      	mov	r2, r7
 8006658:	1d39      	adds	r1, r7, #4
 800665a:	f107 0308 	add.w	r3, r7, #8
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fc56 	bl	8004f10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	9202      	str	r2, [sp, #8]
 800666c:	9301      	str	r3, [sp, #4]
 800666e:	2300      	movs	r3, #0
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	2300      	movs	r3, #0
 8006674:	460a      	mov	r2, r1
 8006676:	4926      	ldr	r1, [pc, #152]	@ (8006710 <vTaskStartScheduler+0xc8>)
 8006678:	4826      	ldr	r0, [pc, #152]	@ (8006714 <vTaskStartScheduler+0xcc>)
 800667a:	f7ff fde7 	bl	800624c <xTaskCreateStatic>
 800667e:	4603      	mov	r3, r0
 8006680:	4a25      	ldr	r2, [pc, #148]	@ (8006718 <vTaskStartScheduler+0xd0>)
 8006682:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006684:	4b24      	ldr	r3, [pc, #144]	@ (8006718 <vTaskStartScheduler+0xd0>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800668c:	2301      	movs	r3, #1
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	e001      	b.n	8006696 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d102      	bne.n	80066a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800669c:	f000 fe38 	bl	8007310 <xTimerCreateTimerTask>
 80066a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d11d      	bne.n	80066e4 <vTaskStartScheduler+0x9c>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ac:	b672      	cpsid	i
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	b662      	cpsie	i
 80066bc:	613b      	str	r3, [r7, #16]
}
 80066be:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066c0:	4b16      	ldr	r3, [pc, #88]	@ (800671c <vTaskStartScheduler+0xd4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3354      	adds	r3, #84	@ 0x54
 80066c6:	4a16      	ldr	r2, [pc, #88]	@ (8006720 <vTaskStartScheduler+0xd8>)
 80066c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80066ca:	4b16      	ldr	r3, [pc, #88]	@ (8006724 <vTaskStartScheduler+0xdc>)
 80066cc:	f04f 32ff 	mov.w	r2, #4294967295
 80066d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80066d2:	4b15      	ldr	r3, [pc, #84]	@ (8006728 <vTaskStartScheduler+0xe0>)
 80066d4:	2201      	movs	r2, #1
 80066d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80066d8:	4b14      	ldr	r3, [pc, #80]	@ (800672c <vTaskStartScheduler+0xe4>)
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066de:	f001 fa0f 	bl	8007b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066e2:	e011      	b.n	8006708 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ea:	d10d      	bne.n	8006708 <vTaskStartScheduler+0xc0>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f0:	b672      	cpsid	i
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	b662      	cpsie	i
 8006700:	60fb      	str	r3, [r7, #12]
}
 8006702:	bf00      	nop
 8006704:	bf00      	nop
 8006706:	e7fd      	b.n	8006704 <vTaskStartScheduler+0xbc>
}
 8006708:	bf00      	nop
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	080084d4 	.word	0x080084d4
 8006714:	08006d81 	.word	0x08006d81
 8006718:	20001504 	.word	0x20001504
 800671c:	2000100c 	.word	0x2000100c
 8006720:	20000010 	.word	0x20000010
 8006724:	20001500 	.word	0x20001500
 8006728:	200014ec 	.word	0x200014ec
 800672c:	200014e4 	.word	0x200014e4

08006730 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006734:	4b04      	ldr	r3, [pc, #16]	@ (8006748 <vTaskSuspendAll+0x18>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3301      	adds	r3, #1
 800673a:	4a03      	ldr	r2, [pc, #12]	@ (8006748 <vTaskSuspendAll+0x18>)
 800673c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800673e:	bf00      	nop
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	20001508 	.word	0x20001508

0800674c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800675a:	4b43      	ldr	r3, [pc, #268]	@ (8006868 <xTaskResumeAll+0x11c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10d      	bne.n	800677e <xTaskResumeAll+0x32>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006766:	b672      	cpsid	i
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	b662      	cpsie	i
 8006776:	603b      	str	r3, [r7, #0]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800677e:	f001 fa3d 	bl	8007bfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006782:	4b39      	ldr	r3, [pc, #228]	@ (8006868 <xTaskResumeAll+0x11c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3b01      	subs	r3, #1
 8006788:	4a37      	ldr	r2, [pc, #220]	@ (8006868 <xTaskResumeAll+0x11c>)
 800678a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800678c:	4b36      	ldr	r3, [pc, #216]	@ (8006868 <xTaskResumeAll+0x11c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d162      	bne.n	800685a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006794:	4b35      	ldr	r3, [pc, #212]	@ (800686c <xTaskResumeAll+0x120>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d05e      	beq.n	800685a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800679c:	e02f      	b.n	80067fe <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800679e:	4b34      	ldr	r3, [pc, #208]	@ (8006870 <xTaskResumeAll+0x124>)
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3318      	adds	r3, #24
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fc6e 	bl	800508c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3304      	adds	r3, #4
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fe fc69 	bl	800508c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067be:	4b2d      	ldr	r3, [pc, #180]	@ (8006874 <xTaskResumeAll+0x128>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d903      	bls.n	80067ce <xTaskResumeAll+0x82>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ca:	4a2a      	ldr	r2, [pc, #168]	@ (8006874 <xTaskResumeAll+0x128>)
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4a27      	ldr	r2, [pc, #156]	@ (8006878 <xTaskResumeAll+0x12c>)
 80067dc:	441a      	add	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3304      	adds	r3, #4
 80067e2:	4619      	mov	r1, r3
 80067e4:	4610      	mov	r0, r2
 80067e6:	f7fe fbf4 	bl	8004fd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ee:	4b23      	ldr	r3, [pc, #140]	@ (800687c <xTaskResumeAll+0x130>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d302      	bcc.n	80067fe <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80067f8:	4b21      	ldr	r3, [pc, #132]	@ (8006880 <xTaskResumeAll+0x134>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006870 <xTaskResumeAll+0x124>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1cb      	bne.n	800679e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800680c:	f000 fb76 	bl	8006efc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006810:	4b1c      	ldr	r3, [pc, #112]	@ (8006884 <xTaskResumeAll+0x138>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d010      	beq.n	800683e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800681c:	f000 f846 	bl	80068ac <xTaskIncrementTick>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006826:	4b16      	ldr	r3, [pc, #88]	@ (8006880 <xTaskResumeAll+0x134>)
 8006828:	2201      	movs	r2, #1
 800682a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3b01      	subs	r3, #1
 8006830:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f1      	bne.n	800681c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006838:	4b12      	ldr	r3, [pc, #72]	@ (8006884 <xTaskResumeAll+0x138>)
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800683e:	4b10      	ldr	r3, [pc, #64]	@ (8006880 <xTaskResumeAll+0x134>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d009      	beq.n	800685a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006846:	2301      	movs	r3, #1
 8006848:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800684a:	4b0f      	ldr	r3, [pc, #60]	@ (8006888 <xTaskResumeAll+0x13c>)
 800684c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800685a:	f001 fa05 	bl	8007c68 <vPortExitCritical>

	return xAlreadyYielded;
 800685e:	68bb      	ldr	r3, [r7, #8]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	20001508 	.word	0x20001508
 800686c:	200014e0 	.word	0x200014e0
 8006870:	200014a0 	.word	0x200014a0
 8006874:	200014e8 	.word	0x200014e8
 8006878:	20001010 	.word	0x20001010
 800687c:	2000100c 	.word	0x2000100c
 8006880:	200014f4 	.word	0x200014f4
 8006884:	200014f0 	.word	0x200014f0
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006892:	4b05      	ldr	r3, [pc, #20]	@ (80068a8 <xTaskGetTickCount+0x1c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006898:	687b      	ldr	r3, [r7, #4]
}
 800689a:	4618      	mov	r0, r3
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	200014e4 	.word	0x200014e4

080068ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80068b2:	2300      	movs	r3, #0
 80068b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068b6:	4b50      	ldr	r3, [pc, #320]	@ (80069f8 <xTaskIncrementTick+0x14c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f040 808c 	bne.w	80069d8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068c0:	4b4e      	ldr	r3, [pc, #312]	@ (80069fc <xTaskIncrementTick+0x150>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068c8:	4a4c      	ldr	r2, [pc, #304]	@ (80069fc <xTaskIncrementTick+0x150>)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d123      	bne.n	800691c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80068d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006a00 <xTaskIncrementTick+0x154>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00d      	beq.n	80068fa <xTaskIncrementTick+0x4e>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	b672      	cpsid	i
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	b662      	cpsie	i
 80068f2:	603b      	str	r3, [r7, #0]
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
 80068f8:	e7fd      	b.n	80068f6 <xTaskIncrementTick+0x4a>
 80068fa:	4b41      	ldr	r3, [pc, #260]	@ (8006a00 <xTaskIncrementTick+0x154>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	4b40      	ldr	r3, [pc, #256]	@ (8006a04 <xTaskIncrementTick+0x158>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a3e      	ldr	r2, [pc, #248]	@ (8006a00 <xTaskIncrementTick+0x154>)
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	4a3e      	ldr	r2, [pc, #248]	@ (8006a04 <xTaskIncrementTick+0x158>)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	4b3e      	ldr	r3, [pc, #248]	@ (8006a08 <xTaskIncrementTick+0x15c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3301      	adds	r3, #1
 8006914:	4a3c      	ldr	r2, [pc, #240]	@ (8006a08 <xTaskIncrementTick+0x15c>)
 8006916:	6013      	str	r3, [r2, #0]
 8006918:	f000 faf0 	bl	8006efc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800691c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a0c <xTaskIncrementTick+0x160>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	429a      	cmp	r2, r3
 8006924:	d349      	bcc.n	80069ba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006926:	4b36      	ldr	r3, [pc, #216]	@ (8006a00 <xTaskIncrementTick+0x154>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d104      	bne.n	800693a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006930:	4b36      	ldr	r3, [pc, #216]	@ (8006a0c <xTaskIncrementTick+0x160>)
 8006932:	f04f 32ff 	mov.w	r2, #4294967295
 8006936:	601a      	str	r2, [r3, #0]
					break;
 8006938:	e03f      	b.n	80069ba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800693a:	4b31      	ldr	r3, [pc, #196]	@ (8006a00 <xTaskIncrementTick+0x154>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	429a      	cmp	r2, r3
 8006950:	d203      	bcs.n	800695a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006952:	4a2e      	ldr	r2, [pc, #184]	@ (8006a0c <xTaskIncrementTick+0x160>)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006958:	e02f      	b.n	80069ba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	3304      	adds	r3, #4
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe fb94 	bl	800508c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	3318      	adds	r3, #24
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe fb8b 	bl	800508c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800697a:	4b25      	ldr	r3, [pc, #148]	@ (8006a10 <xTaskIncrementTick+0x164>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d903      	bls.n	800698a <xTaskIncrementTick+0xde>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006986:	4a22      	ldr	r2, [pc, #136]	@ (8006a10 <xTaskIncrementTick+0x164>)
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800698e:	4613      	mov	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4a1f      	ldr	r2, [pc, #124]	@ (8006a14 <xTaskIncrementTick+0x168>)
 8006998:	441a      	add	r2, r3
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	3304      	adds	r3, #4
 800699e:	4619      	mov	r1, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	f7fe fb16 	bl	8004fd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006a18 <xTaskIncrementTick+0x16c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d3b8      	bcc.n	8006926 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80069b4:	2301      	movs	r3, #1
 80069b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069b8:	e7b5      	b.n	8006926 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069ba:	4b17      	ldr	r3, [pc, #92]	@ (8006a18 <xTaskIncrementTick+0x16c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c0:	4914      	ldr	r1, [pc, #80]	@ (8006a14 <xTaskIncrementTick+0x168>)
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d907      	bls.n	80069e2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80069d2:	2301      	movs	r3, #1
 80069d4:	617b      	str	r3, [r7, #20]
 80069d6:	e004      	b.n	80069e2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80069d8:	4b10      	ldr	r3, [pc, #64]	@ (8006a1c <xTaskIncrementTick+0x170>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3301      	adds	r3, #1
 80069de:	4a0f      	ldr	r2, [pc, #60]	@ (8006a1c <xTaskIncrementTick+0x170>)
 80069e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80069e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006a20 <xTaskIncrementTick+0x174>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80069ea:	2301      	movs	r3, #1
 80069ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80069ee:	697b      	ldr	r3, [r7, #20]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20001508 	.word	0x20001508
 80069fc:	200014e4 	.word	0x200014e4
 8006a00:	20001498 	.word	0x20001498
 8006a04:	2000149c 	.word	0x2000149c
 8006a08:	200014f8 	.word	0x200014f8
 8006a0c:	20001500 	.word	0x20001500
 8006a10:	200014e8 	.word	0x200014e8
 8006a14:	20001010 	.word	0x20001010
 8006a18:	2000100c 	.word	0x2000100c
 8006a1c:	200014f0 	.word	0x200014f0
 8006a20:	200014f4 	.word	0x200014f4

08006a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8006adc <vTaskSwitchContext+0xb8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a32:	4b2b      	ldr	r3, [pc, #172]	@ (8006ae0 <vTaskSwitchContext+0xbc>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a38:	e049      	b.n	8006ace <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8006a3a:	4b29      	ldr	r3, [pc, #164]	@ (8006ae0 <vTaskSwitchContext+0xbc>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a40:	4b28      	ldr	r3, [pc, #160]	@ (8006ae4 <vTaskSwitchContext+0xc0>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	e013      	b.n	8006a70 <vTaskSwitchContext+0x4c>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10d      	bne.n	8006a6a <vTaskSwitchContext+0x46>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a52:	b672      	cpsid	i
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	b662      	cpsie	i
 8006a62:	607b      	str	r3, [r7, #4]
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	e7fd      	b.n	8006a66 <vTaskSwitchContext+0x42>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	491d      	ldr	r1, [pc, #116]	@ (8006ae8 <vTaskSwitchContext+0xc4>)
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0e1      	beq.n	8006a48 <vTaskSwitchContext+0x24>
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4a16      	ldr	r2, [pc, #88]	@ (8006ae8 <vTaskSwitchContext+0xc4>)
 8006a90:	4413      	add	r3, r2
 8006a92:	60bb      	str	r3, [r7, #8]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	605a      	str	r2, [r3, #4]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d104      	bne.n	8006ab4 <vTaskSwitchContext+0x90>
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	605a      	str	r2, [r3, #4]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	4a0c      	ldr	r2, [pc, #48]	@ (8006aec <vTaskSwitchContext+0xc8>)
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	4a09      	ldr	r2, [pc, #36]	@ (8006ae4 <vTaskSwitchContext+0xc0>)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ac4:	4b09      	ldr	r3, [pc, #36]	@ (8006aec <vTaskSwitchContext+0xc8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3354      	adds	r3, #84	@ 0x54
 8006aca:	4a09      	ldr	r2, [pc, #36]	@ (8006af0 <vTaskSwitchContext+0xcc>)
 8006acc:	6013      	str	r3, [r2, #0]
}
 8006ace:	bf00      	nop
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	20001508 	.word	0x20001508
 8006ae0:	200014f4 	.word	0x200014f4
 8006ae4:	200014e8 	.word	0x200014e8
 8006ae8:	20001010 	.word	0x20001010
 8006aec:	2000100c 	.word	0x2000100c
 8006af0:	20000010 	.word	0x20000010

08006af4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10d      	bne.n	8006b20 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b08:	b672      	cpsid	i
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	b662      	cpsie	i
 8006b18:	60fb      	str	r3, [r7, #12]
}
 8006b1a:	bf00      	nop
 8006b1c:	bf00      	nop
 8006b1e:	e7fd      	b.n	8006b1c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b20:	4b07      	ldr	r3, [pc, #28]	@ (8006b40 <vTaskPlaceOnEventList+0x4c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3318      	adds	r3, #24
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7fe fa76 	bl	800501a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b2e:	2101      	movs	r1, #1
 8006b30:	6838      	ldr	r0, [r7, #0]
 8006b32:	f000 fb99 	bl	8007268 <prvAddCurrentTaskToDelayedList>
}
 8006b36:	bf00      	nop
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	2000100c 	.word	0x2000100c

08006b44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10d      	bne.n	8006b72 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5a:	b672      	cpsid	i
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	b662      	cpsie	i
 8006b6a:	617b      	str	r3, [r7, #20]
}
 8006b6c:	bf00      	nop
 8006b6e:	bf00      	nop
 8006b70:	e7fd      	b.n	8006b6e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b72:	4b0a      	ldr	r3, [pc, #40]	@ (8006b9c <vTaskPlaceOnEventListRestricted+0x58>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3318      	adds	r3, #24
 8006b78:	4619      	mov	r1, r3
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f7fe fa29 	bl	8004fd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006b86:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	68b8      	ldr	r0, [r7, #8]
 8006b90:	f000 fb6a 	bl	8007268 <prvAddCurrentTaskToDelayedList>
	}
 8006b94:	bf00      	nop
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	2000100c 	.word	0x2000100c

08006ba0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10d      	bne.n	8006bd2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bba:	b672      	cpsid	i
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	b662      	cpsie	i
 8006bca:	60fb      	str	r3, [r7, #12]
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	e7fd      	b.n	8006bce <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	3318      	adds	r3, #24
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe fa58 	bl	800508c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8006c54 <xTaskRemoveFromEventList+0xb4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d11d      	bne.n	8006c20 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	3304      	adds	r3, #4
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fe fa4f 	bl	800508c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bf2:	4b19      	ldr	r3, [pc, #100]	@ (8006c58 <xTaskRemoveFromEventList+0xb8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d903      	bls.n	8006c02 <xTaskRemoveFromEventList+0x62>
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfe:	4a16      	ldr	r2, [pc, #88]	@ (8006c58 <xTaskRemoveFromEventList+0xb8>)
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4a13      	ldr	r2, [pc, #76]	@ (8006c5c <xTaskRemoveFromEventList+0xbc>)
 8006c10:	441a      	add	r2, r3
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4619      	mov	r1, r3
 8006c18:	4610      	mov	r0, r2
 8006c1a:	f7fe f9da 	bl	8004fd2 <vListInsertEnd>
 8006c1e:	e005      	b.n	8006c2c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	3318      	adds	r3, #24
 8006c24:	4619      	mov	r1, r3
 8006c26:	480e      	ldr	r0, [pc, #56]	@ (8006c60 <xTaskRemoveFromEventList+0xc0>)
 8006c28:	f7fe f9d3 	bl	8004fd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c30:	4b0c      	ldr	r3, [pc, #48]	@ (8006c64 <xTaskRemoveFromEventList+0xc4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d905      	bls.n	8006c46 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c68 <xTaskRemoveFromEventList+0xc8>)
 8006c40:	2201      	movs	r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	e001      	b.n	8006c4a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c4a:	697b      	ldr	r3, [r7, #20]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	20001508 	.word	0x20001508
 8006c58:	200014e8 	.word	0x200014e8
 8006c5c:	20001010 	.word	0x20001010
 8006c60:	200014a0 	.word	0x200014a0
 8006c64:	2000100c 	.word	0x2000100c
 8006c68:	200014f4 	.word	0x200014f4

08006c6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c74:	4b06      	ldr	r3, [pc, #24]	@ (8006c90 <vTaskInternalSetTimeOutState+0x24>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c7c:	4b05      	ldr	r3, [pc, #20]	@ (8006c94 <vTaskInternalSetTimeOutState+0x28>)
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	605a      	str	r2, [r3, #4]
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	200014f8 	.word	0x200014f8
 8006c94:	200014e4 	.word	0x200014e4

08006c98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10d      	bne.n	8006cc4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cac:	b672      	cpsid	i
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	b662      	cpsie	i
 8006cbc:	613b      	str	r3, [r7, #16]
}
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	e7fd      	b.n	8006cc0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10d      	bne.n	8006ce6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cce:	b672      	cpsid	i
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	b662      	cpsie	i
 8006cde:	60fb      	str	r3, [r7, #12]
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	e7fd      	b.n	8006ce2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006ce6:	f000 ff89 	bl	8007bfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cea:	4b1d      	ldr	r3, [pc, #116]	@ (8006d60 <xTaskCheckForTimeOut+0xc8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d02:	d102      	bne.n	8006d0a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	e023      	b.n	8006d52 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4b15      	ldr	r3, [pc, #84]	@ (8006d64 <xTaskCheckForTimeOut+0xcc>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d007      	beq.n	8006d26 <xTaskCheckForTimeOut+0x8e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d302      	bcc.n	8006d26 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	61fb      	str	r3, [r7, #28]
 8006d24:	e015      	b.n	8006d52 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d20b      	bcs.n	8006d48 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	1ad2      	subs	r2, r2, r3
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff ff95 	bl	8006c6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d42:	2300      	movs	r3, #0
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	e004      	b.n	8006d52 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d52:	f000 ff89 	bl	8007c68 <vPortExitCritical>

	return xReturn;
 8006d56:	69fb      	ldr	r3, [r7, #28]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3720      	adds	r7, #32
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	200014e4 	.word	0x200014e4
 8006d64:	200014f8 	.word	0x200014f8

08006d68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d6c:	4b03      	ldr	r3, [pc, #12]	@ (8006d7c <vTaskMissedYield+0x14>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	601a      	str	r2, [r3, #0]
}
 8006d72:	bf00      	nop
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	200014f4 	.word	0x200014f4

08006d80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d88:	f000 f852 	bl	8006e30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d8c:	4b06      	ldr	r3, [pc, #24]	@ (8006da8 <prvIdleTask+0x28>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d9f9      	bls.n	8006d88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d94:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <prvIdleTask+0x2c>)
 8006d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006da4:	e7f0      	b.n	8006d88 <prvIdleTask+0x8>
 8006da6:	bf00      	nop
 8006da8:	20001010 	.word	0x20001010
 8006dac:	e000ed04 	.word	0xe000ed04

08006db0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006db6:	2300      	movs	r3, #0
 8006db8:	607b      	str	r3, [r7, #4]
 8006dba:	e00c      	b.n	8006dd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4a12      	ldr	r2, [pc, #72]	@ (8006e10 <prvInitialiseTaskLists+0x60>)
 8006dc8:	4413      	add	r3, r2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fe f8d4 	bl	8004f78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	607b      	str	r3, [r7, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b37      	cmp	r3, #55	@ 0x37
 8006dda:	d9ef      	bls.n	8006dbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ddc:	480d      	ldr	r0, [pc, #52]	@ (8006e14 <prvInitialiseTaskLists+0x64>)
 8006dde:	f7fe f8cb 	bl	8004f78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006de2:	480d      	ldr	r0, [pc, #52]	@ (8006e18 <prvInitialiseTaskLists+0x68>)
 8006de4:	f7fe f8c8 	bl	8004f78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006de8:	480c      	ldr	r0, [pc, #48]	@ (8006e1c <prvInitialiseTaskLists+0x6c>)
 8006dea:	f7fe f8c5 	bl	8004f78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dee:	480c      	ldr	r0, [pc, #48]	@ (8006e20 <prvInitialiseTaskLists+0x70>)
 8006df0:	f7fe f8c2 	bl	8004f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006df4:	480b      	ldr	r0, [pc, #44]	@ (8006e24 <prvInitialiseTaskLists+0x74>)
 8006df6:	f7fe f8bf 	bl	8004f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006e28 <prvInitialiseTaskLists+0x78>)
 8006dfc:	4a05      	ldr	r2, [pc, #20]	@ (8006e14 <prvInitialiseTaskLists+0x64>)
 8006dfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e00:	4b0a      	ldr	r3, [pc, #40]	@ (8006e2c <prvInitialiseTaskLists+0x7c>)
 8006e02:	4a05      	ldr	r2, [pc, #20]	@ (8006e18 <prvInitialiseTaskLists+0x68>)
 8006e04:	601a      	str	r2, [r3, #0]
}
 8006e06:	bf00      	nop
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20001010 	.word	0x20001010
 8006e14:	20001470 	.word	0x20001470
 8006e18:	20001484 	.word	0x20001484
 8006e1c:	200014a0 	.word	0x200014a0
 8006e20:	200014b4 	.word	0x200014b4
 8006e24:	200014cc 	.word	0x200014cc
 8006e28:	20001498 	.word	0x20001498
 8006e2c:	2000149c 	.word	0x2000149c

08006e30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e36:	e019      	b.n	8006e6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e38:	f000 fee0 	bl	8007bfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e3c:	4b10      	ldr	r3, [pc, #64]	@ (8006e80 <prvCheckTasksWaitingTermination+0x50>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3304      	adds	r3, #4
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe f91f 	bl	800508c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e84 <prvCheckTasksWaitingTermination+0x54>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	4a0b      	ldr	r2, [pc, #44]	@ (8006e84 <prvCheckTasksWaitingTermination+0x54>)
 8006e56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e58:	4b0b      	ldr	r3, [pc, #44]	@ (8006e88 <prvCheckTasksWaitingTermination+0x58>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e88 <prvCheckTasksWaitingTermination+0x58>)
 8006e60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e62:	f000 ff01 	bl	8007c68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f810 	bl	8006e8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e6c:	4b06      	ldr	r3, [pc, #24]	@ (8006e88 <prvCheckTasksWaitingTermination+0x58>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1e1      	bne.n	8006e38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e74:	bf00      	nop
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	200014b4 	.word	0x200014b4
 8006e84:	200014e0 	.word	0x200014e0
 8006e88:	200014c8 	.word	0x200014c8

08006e8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3354      	adds	r3, #84	@ 0x54
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 f9cf 	bl	800823c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d108      	bne.n	8006eba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 f8a1 	bl	8007ff4 <vPortFree>
				vPortFree( pxTCB );
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 f89e 	bl	8007ff4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006eb8:	e01b      	b.n	8006ef2 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d103      	bne.n	8006ecc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 f895 	bl	8007ff4 <vPortFree>
	}
 8006eca:	e012      	b.n	8006ef2 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d00d      	beq.n	8006ef2 <prvDeleteTCB+0x66>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eda:	b672      	cpsid	i
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	b662      	cpsie	i
 8006eea:	60fb      	str	r3, [r7, #12]
}
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	e7fd      	b.n	8006eee <prvDeleteTCB+0x62>
	}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f02:	4b0c      	ldr	r3, [pc, #48]	@ (8006f34 <prvResetNextTaskUnblockTime+0x38>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d104      	bne.n	8006f16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f38 <prvResetNextTaskUnblockTime+0x3c>)
 8006f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f14:	e008      	b.n	8006f28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f16:	4b07      	ldr	r3, [pc, #28]	@ (8006f34 <prvResetNextTaskUnblockTime+0x38>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	4a04      	ldr	r2, [pc, #16]	@ (8006f38 <prvResetNextTaskUnblockTime+0x3c>)
 8006f26:	6013      	str	r3, [r2, #0]
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	20001498 	.word	0x20001498
 8006f38:	20001500 	.word	0x20001500

08006f3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f42:	4b0b      	ldr	r3, [pc, #44]	@ (8006f70 <xTaskGetSchedulerState+0x34>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d102      	bne.n	8006f50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	607b      	str	r3, [r7, #4]
 8006f4e:	e008      	b.n	8006f62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f50:	4b08      	ldr	r3, [pc, #32]	@ (8006f74 <xTaskGetSchedulerState+0x38>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d102      	bne.n	8006f5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f58:	2302      	movs	r3, #2
 8006f5a:	607b      	str	r3, [r7, #4]
 8006f5c:	e001      	b.n	8006f62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f62:	687b      	ldr	r3, [r7, #4]
	}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	200014ec 	.word	0x200014ec
 8006f74:	20001508 	.word	0x20001508

08006f78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d051      	beq.n	8007032 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f92:	4b2a      	ldr	r3, [pc, #168]	@ (800703c <xTaskPriorityInherit+0xc4>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d241      	bcs.n	8007020 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	db06      	blt.n	8006fb2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa4:	4b25      	ldr	r3, [pc, #148]	@ (800703c <xTaskPriorityInherit+0xc4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006faa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6959      	ldr	r1, [r3, #20]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8007040 <xTaskPriorityInherit+0xc8>)
 8006fc4:	4413      	add	r3, r2
 8006fc6:	4299      	cmp	r1, r3
 8006fc8:	d122      	bne.n	8007010 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fe f85c 	bl	800508c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fd4:	4b19      	ldr	r3, [pc, #100]	@ (800703c <xTaskPriorityInherit+0xc4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fe2:	4b18      	ldr	r3, [pc, #96]	@ (8007044 <xTaskPriorityInherit+0xcc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d903      	bls.n	8006ff2 <xTaskPriorityInherit+0x7a>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	4a15      	ldr	r2, [pc, #84]	@ (8007044 <xTaskPriorityInherit+0xcc>)
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4a10      	ldr	r2, [pc, #64]	@ (8007040 <xTaskPriorityInherit+0xc8>)
 8007000:	441a      	add	r2, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	3304      	adds	r3, #4
 8007006:	4619      	mov	r1, r3
 8007008:	4610      	mov	r0, r2
 800700a:	f7fd ffe2 	bl	8004fd2 <vListInsertEnd>
 800700e:	e004      	b.n	800701a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007010:	4b0a      	ldr	r3, [pc, #40]	@ (800703c <xTaskPriorityInherit+0xc4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800701a:	2301      	movs	r3, #1
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e008      	b.n	8007032 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007024:	4b05      	ldr	r3, [pc, #20]	@ (800703c <xTaskPriorityInherit+0xc4>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702a:	429a      	cmp	r2, r3
 800702c:	d201      	bcs.n	8007032 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800702e:	2301      	movs	r3, #1
 8007030:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007032:	68fb      	ldr	r3, [r7, #12]
	}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	2000100c 	.word	0x2000100c
 8007040:	20001010 	.word	0x20001010
 8007044:	200014e8 	.word	0x200014e8

08007048 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007054:	2300      	movs	r3, #0
 8007056:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d05c      	beq.n	8007118 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800705e:	4b31      	ldr	r3, [pc, #196]	@ (8007124 <xTaskPriorityDisinherit+0xdc>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	429a      	cmp	r2, r3
 8007066:	d00d      	beq.n	8007084 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706c:	b672      	cpsid	i
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	b662      	cpsie	i
 800707c:	60fb      	str	r3, [r7, #12]
}
 800707e:	bf00      	nop
 8007080:	bf00      	nop
 8007082:	e7fd      	b.n	8007080 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10d      	bne.n	80070a8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007090:	b672      	cpsid	i
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	b662      	cpsie	i
 80070a0:	60bb      	str	r3, [r7, #8]
}
 80070a2:	bf00      	nop
 80070a4:	bf00      	nop
 80070a6:	e7fd      	b.n	80070a4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ac:	1e5a      	subs	r2, r3, #1
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d02c      	beq.n	8007118 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d128      	bne.n	8007118 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fd ffde 	bl	800508c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007128 <xTaskPriorityDisinherit+0xe0>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d903      	bls.n	80070f8 <xTaskPriorityDisinherit+0xb0>
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f4:	4a0c      	ldr	r2, [pc, #48]	@ (8007128 <xTaskPriorityDisinherit+0xe0>)
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4a09      	ldr	r2, [pc, #36]	@ (800712c <xTaskPriorityDisinherit+0xe4>)
 8007106:	441a      	add	r2, r3
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	3304      	adds	r3, #4
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f7fd ff5f 	bl	8004fd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007114:	2301      	movs	r3, #1
 8007116:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007118:	697b      	ldr	r3, [r7, #20]
	}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	2000100c 	.word	0x2000100c
 8007128:	200014e8 	.word	0x200014e8
 800712c:	20001010 	.word	0x20001010

08007130 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800713e:	2301      	movs	r3, #1
 8007140:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d070      	beq.n	800722a <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10d      	bne.n	800716c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007154:	b672      	cpsid	i
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	b662      	cpsie	i
 8007164:	60fb      	str	r3, [r7, #12]
}
 8007166:	bf00      	nop
 8007168:	bf00      	nop
 800716a:	e7fd      	b.n	8007168 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d902      	bls.n	800717c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	61fb      	str	r3, [r7, #28]
 800717a:	e002      	b.n	8007182 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007180:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	429a      	cmp	r2, r3
 800718a:	d04e      	beq.n	800722a <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	429a      	cmp	r2, r3
 8007194:	d149      	bne.n	800722a <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007196:	4b27      	ldr	r3, [pc, #156]	@ (8007234 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	429a      	cmp	r2, r3
 800719e:	d10d      	bne.n	80071bc <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a4:	b672      	cpsid	i
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	b662      	cpsie	i
 80071b4:	60bb      	str	r3, [r7, #8]
}
 80071b6:	bf00      	nop
 80071b8:	bf00      	nop
 80071ba:	e7fd      	b.n	80071b8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	db04      	blt.n	80071da <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	6959      	ldr	r1, [r3, #20]
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4a13      	ldr	r2, [pc, #76]	@ (8007238 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80071ea:	4413      	add	r3, r2
 80071ec:	4299      	cmp	r1, r3
 80071ee:	d11c      	bne.n	800722a <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fd ff49 	bl	800508c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fe:	4b0f      	ldr	r3, [pc, #60]	@ (800723c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d903      	bls.n	800720e <vTaskPriorityDisinheritAfterTimeout+0xde>
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720a:	4a0c      	ldr	r2, [pc, #48]	@ (800723c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4a07      	ldr	r2, [pc, #28]	@ (8007238 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800721c:	441a      	add	r2, r3
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	3304      	adds	r3, #4
 8007222:	4619      	mov	r1, r3
 8007224:	4610      	mov	r0, r2
 8007226:	f7fd fed4 	bl	8004fd2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800722a:	bf00      	nop
 800722c:	3720      	adds	r7, #32
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	2000100c 	.word	0x2000100c
 8007238:	20001010 	.word	0x20001010
 800723c:	200014e8 	.word	0x200014e8

08007240 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007244:	4b07      	ldr	r3, [pc, #28]	@ (8007264 <pvTaskIncrementMutexHeldCount+0x24>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d004      	beq.n	8007256 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800724c:	4b05      	ldr	r3, [pc, #20]	@ (8007264 <pvTaskIncrementMutexHeldCount+0x24>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007252:	3201      	adds	r2, #1
 8007254:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007256:	4b03      	ldr	r3, [pc, #12]	@ (8007264 <pvTaskIncrementMutexHeldCount+0x24>)
 8007258:	681b      	ldr	r3, [r3, #0]
	}
 800725a:	4618      	mov	r0, r3
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	2000100c 	.word	0x2000100c

08007268 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007272:	4b21      	ldr	r3, [pc, #132]	@ (80072f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007278:	4b20      	ldr	r3, [pc, #128]	@ (80072fc <prvAddCurrentTaskToDelayedList+0x94>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3304      	adds	r3, #4
 800727e:	4618      	mov	r0, r3
 8007280:	f7fd ff04 	bl	800508c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728a:	d10a      	bne.n	80072a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d007      	beq.n	80072a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007292:	4b1a      	ldr	r3, [pc, #104]	@ (80072fc <prvAddCurrentTaskToDelayedList+0x94>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3304      	adds	r3, #4
 8007298:	4619      	mov	r1, r3
 800729a:	4819      	ldr	r0, [pc, #100]	@ (8007300 <prvAddCurrentTaskToDelayedList+0x98>)
 800729c:	f7fd fe99 	bl	8004fd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072a0:	e026      	b.n	80072f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4413      	add	r3, r2
 80072a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072aa:	4b14      	ldr	r3, [pc, #80]	@ (80072fc <prvAddCurrentTaskToDelayedList+0x94>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d209      	bcs.n	80072ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ba:	4b12      	ldr	r3, [pc, #72]	@ (8007304 <prvAddCurrentTaskToDelayedList+0x9c>)
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	4b0f      	ldr	r3, [pc, #60]	@ (80072fc <prvAddCurrentTaskToDelayedList+0x94>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f7fd fea7 	bl	800501a <vListInsert>
}
 80072cc:	e010      	b.n	80072f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007308 <prvAddCurrentTaskToDelayedList+0xa0>)
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <prvAddCurrentTaskToDelayedList+0x94>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7fd fe9d 	bl	800501a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072e0:	4b0a      	ldr	r3, [pc, #40]	@ (800730c <prvAddCurrentTaskToDelayedList+0xa4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d202      	bcs.n	80072f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072ea:	4a08      	ldr	r2, [pc, #32]	@ (800730c <prvAddCurrentTaskToDelayedList+0xa4>)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6013      	str	r3, [r2, #0]
}
 80072f0:	bf00      	nop
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	200014e4 	.word	0x200014e4
 80072fc:	2000100c 	.word	0x2000100c
 8007300:	200014cc 	.word	0x200014cc
 8007304:	2000149c 	.word	0x2000149c
 8007308:	20001498 	.word	0x20001498
 800730c:	20001500 	.word	0x20001500

08007310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08a      	sub	sp, #40	@ 0x28
 8007314:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800731a:	f000 fb21 	bl	8007960 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800731e:	4b1e      	ldr	r3, [pc, #120]	@ (8007398 <xTimerCreateTimerTask+0x88>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d021      	beq.n	800736a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800732a:	2300      	movs	r3, #0
 800732c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800732e:	1d3a      	adds	r2, r7, #4
 8007330:	f107 0108 	add.w	r1, r7, #8
 8007334:	f107 030c 	add.w	r3, r7, #12
 8007338:	4618      	mov	r0, r3
 800733a:	f7fd fe03 	bl	8004f44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	9202      	str	r2, [sp, #8]
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	2302      	movs	r3, #2
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	2300      	movs	r3, #0
 800734e:	460a      	mov	r2, r1
 8007350:	4912      	ldr	r1, [pc, #72]	@ (800739c <xTimerCreateTimerTask+0x8c>)
 8007352:	4813      	ldr	r0, [pc, #76]	@ (80073a0 <xTimerCreateTimerTask+0x90>)
 8007354:	f7fe ff7a 	bl	800624c <xTaskCreateStatic>
 8007358:	4603      	mov	r3, r0
 800735a:	4a12      	ldr	r2, [pc, #72]	@ (80073a4 <xTimerCreateTimerTask+0x94>)
 800735c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800735e:	4b11      	ldr	r3, [pc, #68]	@ (80073a4 <xTimerCreateTimerTask+0x94>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007366:	2301      	movs	r3, #1
 8007368:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10d      	bne.n	800738c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007374:	b672      	cpsid	i
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	b662      	cpsie	i
 8007384:	613b      	str	r3, [r7, #16]
}
 8007386:	bf00      	nop
 8007388:	bf00      	nop
 800738a:	e7fd      	b.n	8007388 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800738c:	697b      	ldr	r3, [r7, #20]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	2000153c 	.word	0x2000153c
 800739c:	080084dc 	.word	0x080084dc
 80073a0:	080074e9 	.word	0x080074e9
 80073a4:	20001540 	.word	0x20001540

080073a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08a      	sub	sp, #40	@ 0x28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10d      	bne.n	80073dc <xTimerGenericCommand+0x34>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c4:	b672      	cpsid	i
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	b662      	cpsie	i
 80073d4:	623b      	str	r3, [r7, #32]
}
 80073d6:	bf00      	nop
 80073d8:	bf00      	nop
 80073da:	e7fd      	b.n	80073d8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80073dc:	4b19      	ldr	r3, [pc, #100]	@ (8007444 <xTimerGenericCommand+0x9c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d02a      	beq.n	800743a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b05      	cmp	r3, #5
 80073f4:	dc18      	bgt.n	8007428 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073f6:	f7ff fda1 	bl	8006f3c <xTaskGetSchedulerState>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d109      	bne.n	8007414 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007400:	4b10      	ldr	r3, [pc, #64]	@ (8007444 <xTimerGenericCommand+0x9c>)
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	f107 0110 	add.w	r1, r7, #16
 8007408:	2300      	movs	r3, #0
 800740a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800740c:	f7fe f838 	bl	8005480 <xQueueGenericSend>
 8007410:	6278      	str	r0, [r7, #36]	@ 0x24
 8007412:	e012      	b.n	800743a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007414:	4b0b      	ldr	r3, [pc, #44]	@ (8007444 <xTimerGenericCommand+0x9c>)
 8007416:	6818      	ldr	r0, [r3, #0]
 8007418:	f107 0110 	add.w	r1, r7, #16
 800741c:	2300      	movs	r3, #0
 800741e:	2200      	movs	r2, #0
 8007420:	f7fe f82e 	bl	8005480 <xQueueGenericSend>
 8007424:	6278      	str	r0, [r7, #36]	@ 0x24
 8007426:	e008      	b.n	800743a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007428:	4b06      	ldr	r3, [pc, #24]	@ (8007444 <xTimerGenericCommand+0x9c>)
 800742a:	6818      	ldr	r0, [r3, #0]
 800742c:	f107 0110 	add.w	r1, r7, #16
 8007430:	2300      	movs	r3, #0
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	f7fe f92e 	bl	8005694 <xQueueGenericSendFromISR>
 8007438:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800743c:	4618      	mov	r0, r3
 800743e:	3728      	adds	r7, #40	@ 0x28
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	2000153c 	.word	0x2000153c

08007448 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b088      	sub	sp, #32
 800744c:	af02      	add	r7, sp, #8
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007452:	4b24      	ldr	r3, [pc, #144]	@ (80074e4 <prvProcessExpiredTimer+0x9c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	3304      	adds	r3, #4
 8007460:	4618      	mov	r0, r3
 8007462:	f7fd fe13 	bl	800508c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d025      	beq.n	80074c0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	699a      	ldr	r2, [r3, #24]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	18d1      	adds	r1, r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	6978      	ldr	r0, [r7, #20]
 8007482:	f000 f8d7 	bl	8007634 <prvInsertTimerInActiveList>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d022      	beq.n	80074d2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800748c:	2300      	movs	r3, #0
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	2300      	movs	r3, #0
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	2100      	movs	r1, #0
 8007496:	6978      	ldr	r0, [r7, #20]
 8007498:	f7ff ff86 	bl	80073a8 <xTimerGenericCommand>
 800749c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d116      	bne.n	80074d2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a8:	b672      	cpsid	i
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	b662      	cpsie	i
 80074b8:	60fb      	str	r3, [r7, #12]
}
 80074ba:	bf00      	nop
 80074bc:	bf00      	nop
 80074be:	e7fd      	b.n	80074bc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074c6:	f023 0301 	bic.w	r3, r3, #1
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	6978      	ldr	r0, [r7, #20]
 80074d8:	4798      	blx	r3
}
 80074da:	bf00      	nop
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20001534 	.word	0x20001534

080074e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074f0:	f107 0308 	add.w	r3, r7, #8
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 f859 	bl	80075ac <prvGetNextExpireTime>
 80074fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	4619      	mov	r1, r3
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 f805 	bl	8007510 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007506:	f000 f8d7 	bl	80076b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800750a:	bf00      	nop
 800750c:	e7f0      	b.n	80074f0 <prvTimerTask+0x8>
	...

08007510 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800751a:	f7ff f909 	bl	8006730 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800751e:	f107 0308 	add.w	r3, r7, #8
 8007522:	4618      	mov	r0, r3
 8007524:	f000 f866 	bl	80075f4 <prvSampleTimeNow>
 8007528:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d130      	bne.n	8007592 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10a      	bne.n	800754c <prvProcessTimerOrBlockTask+0x3c>
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	429a      	cmp	r2, r3
 800753c:	d806      	bhi.n	800754c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800753e:	f7ff f905 	bl	800674c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007542:	68f9      	ldr	r1, [r7, #12]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff ff7f 	bl	8007448 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800754a:	e024      	b.n	8007596 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d008      	beq.n	8007564 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007552:	4b13      	ldr	r3, [pc, #76]	@ (80075a0 <prvProcessTimerOrBlockTask+0x90>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <prvProcessTimerOrBlockTask+0x50>
 800755c:	2301      	movs	r3, #1
 800755e:	e000      	b.n	8007562 <prvProcessTimerOrBlockTask+0x52>
 8007560:	2300      	movs	r3, #0
 8007562:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007564:	4b0f      	ldr	r3, [pc, #60]	@ (80075a4 <prvProcessTimerOrBlockTask+0x94>)
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4619      	mov	r1, r3
 8007572:	f7fe fe37 	bl	80061e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007576:	f7ff f8e9 	bl	800674c <xTaskResumeAll>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007580:	4b09      	ldr	r3, [pc, #36]	@ (80075a8 <prvProcessTimerOrBlockTask+0x98>)
 8007582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
}
 8007590:	e001      	b.n	8007596 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007592:	f7ff f8db 	bl	800674c <xTaskResumeAll>
}
 8007596:	bf00      	nop
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20001538 	.word	0x20001538
 80075a4:	2000153c 	.word	0x2000153c
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075b4:	4b0e      	ldr	r3, [pc, #56]	@ (80075f0 <prvGetNextExpireTime+0x44>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <prvGetNextExpireTime+0x16>
 80075be:	2201      	movs	r2, #1
 80075c0:	e000      	b.n	80075c4 <prvGetNextExpireTime+0x18>
 80075c2:	2200      	movs	r2, #0
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d105      	bne.n	80075dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075d0:	4b07      	ldr	r3, [pc, #28]	@ (80075f0 <prvGetNextExpireTime+0x44>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	e001      	b.n	80075e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80075e0:	68fb      	ldr	r3, [r7, #12]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	20001534 	.word	0x20001534

080075f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80075fc:	f7ff f946 	bl	800688c <xTaskGetTickCount>
 8007600:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007602:	4b0b      	ldr	r3, [pc, #44]	@ (8007630 <prvSampleTimeNow+0x3c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	429a      	cmp	r2, r3
 800760a:	d205      	bcs.n	8007618 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800760c:	f000 f940 	bl	8007890 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	e002      	b.n	800761e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800761e:	4a04      	ldr	r2, [pc, #16]	@ (8007630 <prvSampleTimeNow+0x3c>)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007624:	68fb      	ldr	r3, [r7, #12]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20001544 	.word	0x20001544

08007634 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007642:	2300      	movs	r3, #0
 8007644:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	429a      	cmp	r2, r3
 8007658:	d812      	bhi.n	8007680 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	1ad2      	subs	r2, r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	429a      	cmp	r2, r3
 8007666:	d302      	bcc.n	800766e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	e01b      	b.n	80076a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800766e:	4b10      	ldr	r3, [pc, #64]	@ (80076b0 <prvInsertTimerInActiveList+0x7c>)
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3304      	adds	r3, #4
 8007676:	4619      	mov	r1, r3
 8007678:	4610      	mov	r0, r2
 800767a:	f7fd fcce 	bl	800501a <vListInsert>
 800767e:	e012      	b.n	80076a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d206      	bcs.n	8007696 <prvInsertTimerInActiveList+0x62>
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	429a      	cmp	r2, r3
 800768e:	d302      	bcc.n	8007696 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007690:	2301      	movs	r3, #1
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	e007      	b.n	80076a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007696:	4b07      	ldr	r3, [pc, #28]	@ (80076b4 <prvInsertTimerInActiveList+0x80>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3304      	adds	r3, #4
 800769e:	4619      	mov	r1, r3
 80076a0:	4610      	mov	r0, r2
 80076a2:	f7fd fcba 	bl	800501a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80076a6:	697b      	ldr	r3, [r7, #20]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20001538 	.word	0x20001538
 80076b4:	20001534 	.word	0x20001534

080076b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08e      	sub	sp, #56	@ 0x38
 80076bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076be:	e0d4      	b.n	800786a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	da1b      	bge.n	80076fe <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80076c6:	1d3b      	adds	r3, r7, #4
 80076c8:	3304      	adds	r3, #4
 80076ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80076cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10d      	bne.n	80076ee <prvProcessReceivedCommands+0x36>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d6:	b672      	cpsid	i
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	b662      	cpsie	i
 80076e6:	61fb      	str	r3, [r7, #28]
}
 80076e8:	bf00      	nop
 80076ea:	bf00      	nop
 80076ec:	e7fd      	b.n	80076ea <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076f4:	6850      	ldr	r0, [r2, #4]
 80076f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076f8:	6892      	ldr	r2, [r2, #8]
 80076fa:	4611      	mov	r1, r2
 80076fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f2c0 80b2 	blt.w	800786a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800770a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d004      	beq.n	800771c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007714:	3304      	adds	r3, #4
 8007716:	4618      	mov	r0, r3
 8007718:	f7fd fcb8 	bl	800508c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800771c:	463b      	mov	r3, r7
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff ff68 	bl	80075f4 <prvSampleTimeNow>
 8007724:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b09      	cmp	r3, #9
 800772a:	f200 809b 	bhi.w	8007864 <prvProcessReceivedCommands+0x1ac>
 800772e:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <prvProcessReceivedCommands+0x7c>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	0800775d 	.word	0x0800775d
 8007738:	0800775d 	.word	0x0800775d
 800773c:	0800775d 	.word	0x0800775d
 8007740:	080077d7 	.word	0x080077d7
 8007744:	080077eb 	.word	0x080077eb
 8007748:	0800783b 	.word	0x0800783b
 800774c:	0800775d 	.word	0x0800775d
 8007750:	0800775d 	.word	0x0800775d
 8007754:	080077d7 	.word	0x080077d7
 8007758:	080077eb 	.word	0x080077eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800775c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007762:	f043 0301 	orr.w	r3, r3, #1
 8007766:	b2da      	uxtb	r2, r3
 8007768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	18d1      	adds	r1, r2, r3
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800777a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800777c:	f7ff ff5a 	bl	8007634 <prvInsertTimerInActiveList>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d070      	beq.n	8007868 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800778c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800778e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007790:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b00      	cmp	r3, #0
 800779a:	d065      	beq.n	8007868 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	441a      	add	r2, r3
 80077a4:	2300      	movs	r3, #0
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	2300      	movs	r3, #0
 80077aa:	2100      	movs	r1, #0
 80077ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077ae:	f7ff fdfb 	bl	80073a8 <xTimerGenericCommand>
 80077b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d156      	bne.n	8007868 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077be:	b672      	cpsid	i
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	b662      	cpsie	i
 80077ce:	61bb      	str	r3, [r7, #24]
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	e7fd      	b.n	80077d2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077dc:	f023 0301 	bic.w	r3, r3, #1
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80077e8:	e03f      	b.n	800786a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077f0:	f043 0301 	orr.w	r3, r3, #1
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007800:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10d      	bne.n	8007826 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780e:	b672      	cpsid	i
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	b662      	cpsie	i
 800781e:	617b      	str	r3, [r7, #20]
}
 8007820:	bf00      	nop
 8007822:	bf00      	nop
 8007824:	e7fd      	b.n	8007822 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782c:	18d1      	adds	r1, r2, r3
 800782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007834:	f7ff fefe 	bl	8007634 <prvInsertTimerInActiveList>
					break;
 8007838:	e017      	b.n	800786a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800783a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d103      	bne.n	8007850 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007848:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800784a:	f000 fbd3 	bl	8007ff4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800784e:	e00c      	b.n	800786a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007852:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	b2da      	uxtb	r2, r3
 800785c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007862:	e002      	b.n	800786a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007864:	bf00      	nop
 8007866:	e000      	b.n	800786a <prvProcessReceivedCommands+0x1b2>
					break;
 8007868:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800786a:	4b08      	ldr	r3, [pc, #32]	@ (800788c <prvProcessReceivedCommands+0x1d4>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	1d39      	adds	r1, r7, #4
 8007870:	2200      	movs	r2, #0
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe f84a 	bl	800590c <xQueueReceive>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	f47f af20 	bne.w	80076c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007880:	bf00      	nop
 8007882:	bf00      	nop
 8007884:	3730      	adds	r7, #48	@ 0x30
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	2000153c 	.word	0x2000153c

08007890 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007896:	e04b      	b.n	8007930 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007898:	4b2f      	ldr	r3, [pc, #188]	@ (8007958 <prvSwitchTimerLists+0xc8>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007958 <prvSwitchTimerLists+0xc8>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3304      	adds	r3, #4
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fd fbeb 	bl	800508c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d031      	beq.n	8007930 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d90e      	bls.n	80078fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007958 <prvSwitchTimerLists+0xc8>)
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3304      	adds	r3, #4
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f7fd fb90 	bl	800501a <vListInsert>
 80078fa:	e019      	b.n	8007930 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078fc:	2300      	movs	r3, #0
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	2300      	movs	r3, #0
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	2100      	movs	r1, #0
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f7ff fd4e 	bl	80073a8 <xTimerGenericCommand>
 800790c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10d      	bne.n	8007930 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007918:	b672      	cpsid	i
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	b662      	cpsie	i
 8007928:	603b      	str	r3, [r7, #0]
}
 800792a:	bf00      	nop
 800792c:	bf00      	nop
 800792e:	e7fd      	b.n	800792c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007930:	4b09      	ldr	r3, [pc, #36]	@ (8007958 <prvSwitchTimerLists+0xc8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1ae      	bne.n	8007898 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800793a:	4b07      	ldr	r3, [pc, #28]	@ (8007958 <prvSwitchTimerLists+0xc8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007940:	4b06      	ldr	r3, [pc, #24]	@ (800795c <prvSwitchTimerLists+0xcc>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a04      	ldr	r2, [pc, #16]	@ (8007958 <prvSwitchTimerLists+0xc8>)
 8007946:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007948:	4a04      	ldr	r2, [pc, #16]	@ (800795c <prvSwitchTimerLists+0xcc>)
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	6013      	str	r3, [r2, #0]
}
 800794e:	bf00      	nop
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20001534 	.word	0x20001534
 800795c:	20001538 	.word	0x20001538

08007960 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007966:	f000 f949 	bl	8007bfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800796a:	4b15      	ldr	r3, [pc, #84]	@ (80079c0 <prvCheckForValidListAndQueue+0x60>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d120      	bne.n	80079b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007972:	4814      	ldr	r0, [pc, #80]	@ (80079c4 <prvCheckForValidListAndQueue+0x64>)
 8007974:	f7fd fb00 	bl	8004f78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007978:	4813      	ldr	r0, [pc, #76]	@ (80079c8 <prvCheckForValidListAndQueue+0x68>)
 800797a:	f7fd fafd 	bl	8004f78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800797e:	4b13      	ldr	r3, [pc, #76]	@ (80079cc <prvCheckForValidListAndQueue+0x6c>)
 8007980:	4a10      	ldr	r2, [pc, #64]	@ (80079c4 <prvCheckForValidListAndQueue+0x64>)
 8007982:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007984:	4b12      	ldr	r3, [pc, #72]	@ (80079d0 <prvCheckForValidListAndQueue+0x70>)
 8007986:	4a10      	ldr	r2, [pc, #64]	@ (80079c8 <prvCheckForValidListAndQueue+0x68>)
 8007988:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800798a:	2300      	movs	r3, #0
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	4b11      	ldr	r3, [pc, #68]	@ (80079d4 <prvCheckForValidListAndQueue+0x74>)
 8007990:	4a11      	ldr	r2, [pc, #68]	@ (80079d8 <prvCheckForValidListAndQueue+0x78>)
 8007992:	2110      	movs	r1, #16
 8007994:	200a      	movs	r0, #10
 8007996:	f7fd fc0f 	bl	80051b8 <xQueueGenericCreateStatic>
 800799a:	4603      	mov	r3, r0
 800799c:	4a08      	ldr	r2, [pc, #32]	@ (80079c0 <prvCheckForValidListAndQueue+0x60>)
 800799e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80079a0:	4b07      	ldr	r3, [pc, #28]	@ (80079c0 <prvCheckForValidListAndQueue+0x60>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079a8:	4b05      	ldr	r3, [pc, #20]	@ (80079c0 <prvCheckForValidListAndQueue+0x60>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	490b      	ldr	r1, [pc, #44]	@ (80079dc <prvCheckForValidListAndQueue+0x7c>)
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe fbc4 	bl	800613c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079b4:	f000 f958 	bl	8007c68 <vPortExitCritical>
}
 80079b8:	bf00      	nop
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	2000153c 	.word	0x2000153c
 80079c4:	2000150c 	.word	0x2000150c
 80079c8:	20001520 	.word	0x20001520
 80079cc:	20001534 	.word	0x20001534
 80079d0:	20001538 	.word	0x20001538
 80079d4:	200015e8 	.word	0x200015e8
 80079d8:	20001548 	.word	0x20001548
 80079dc:	080084e4 	.word	0x080084e4

080079e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3b04      	subs	r3, #4
 80079f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	3b04      	subs	r3, #4
 80079fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	f023 0201 	bic.w	r2, r3, #1
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3b04      	subs	r3, #4
 8007a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a10:	4a0c      	ldr	r2, [pc, #48]	@ (8007a44 <pxPortInitialiseStack+0x64>)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3b14      	subs	r3, #20
 8007a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3b04      	subs	r3, #4
 8007a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f06f 0202 	mvn.w	r2, #2
 8007a2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3b20      	subs	r3, #32
 8007a34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a36:	68fb      	ldr	r3, [r7, #12]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	08007a49 	.word	0x08007a49

08007a48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a52:	4b15      	ldr	r3, [pc, #84]	@ (8007aa8 <prvTaskExitError+0x60>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5a:	d00d      	beq.n	8007a78 <prvTaskExitError+0x30>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a60:	b672      	cpsid	i
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	b662      	cpsie	i
 8007a70:	60fb      	str	r3, [r7, #12]
}
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	e7fd      	b.n	8007a74 <prvTaskExitError+0x2c>
	__asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7c:	b672      	cpsid	i
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	b662      	cpsie	i
 8007a8c:	60bb      	str	r3, [r7, #8]
}
 8007a8e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a90:	bf00      	nop
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0fc      	beq.n	8007a92 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	2000000c 	.word	0x2000000c
 8007aac:	00000000 	.word	0x00000000

08007ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ab0:	4b07      	ldr	r3, [pc, #28]	@ (8007ad0 <pxCurrentTCBConst2>)
 8007ab2:	6819      	ldr	r1, [r3, #0]
 8007ab4:	6808      	ldr	r0, [r1, #0]
 8007ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	f380 8809 	msr	PSP, r0
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f04f 0000 	mov.w	r0, #0
 8007ac6:	f380 8811 	msr	BASEPRI, r0
 8007aca:	4770      	bx	lr
 8007acc:	f3af 8000 	nop.w

08007ad0 <pxCurrentTCBConst2>:
 8007ad0:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop

08007ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ad8:	4808      	ldr	r0, [pc, #32]	@ (8007afc <prvPortStartFirstTask+0x24>)
 8007ada:	6800      	ldr	r0, [r0, #0]
 8007adc:	6800      	ldr	r0, [r0, #0]
 8007ade:	f380 8808 	msr	MSP, r0
 8007ae2:	f04f 0000 	mov.w	r0, #0
 8007ae6:	f380 8814 	msr	CONTROL, r0
 8007aea:	b662      	cpsie	i
 8007aec:	b661      	cpsie	f
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	df00      	svc	0
 8007af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007afa:	bf00      	nop
 8007afc:	e000ed08 	.word	0xe000ed08

08007b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b06:	4b37      	ldr	r3, [pc, #220]	@ (8007be4 <xPortStartScheduler+0xe4>)
 8007b08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	22ff      	movs	r2, #255	@ 0xff
 8007b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8007be8 <xPortStartScheduler+0xe8>)
 8007b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8007bec <xPortStartScheduler+0xec>)
 8007b30:	2207      	movs	r2, #7
 8007b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b34:	e009      	b.n	8007b4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007b36:	4b2d      	ldr	r3, [pc, #180]	@ (8007bec <xPortStartScheduler+0xec>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8007bec <xPortStartScheduler+0xec>)
 8007b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b52:	2b80      	cmp	r3, #128	@ 0x80
 8007b54:	d0ef      	beq.n	8007b36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b56:	4b25      	ldr	r3, [pc, #148]	@ (8007bec <xPortStartScheduler+0xec>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f1c3 0307 	rsb	r3, r3, #7
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d00d      	beq.n	8007b7e <xPortStartScheduler+0x7e>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b66:	b672      	cpsid	i
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	b662      	cpsie	i
 8007b76:	60bb      	str	r3, [r7, #8]
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	e7fd      	b.n	8007b7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8007bec <xPortStartScheduler+0xec>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	021b      	lsls	r3, r3, #8
 8007b84:	4a19      	ldr	r2, [pc, #100]	@ (8007bec <xPortStartScheduler+0xec>)
 8007b86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b88:	4b18      	ldr	r3, [pc, #96]	@ (8007bec <xPortStartScheduler+0xec>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b90:	4a16      	ldr	r2, [pc, #88]	@ (8007bec <xPortStartScheduler+0xec>)
 8007b92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b9c:	4b14      	ldr	r3, [pc, #80]	@ (8007bf0 <xPortStartScheduler+0xf0>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a13      	ldr	r2, [pc, #76]	@ (8007bf0 <xPortStartScheduler+0xf0>)
 8007ba2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ba6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ba8:	4b11      	ldr	r3, [pc, #68]	@ (8007bf0 <xPortStartScheduler+0xf0>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a10      	ldr	r2, [pc, #64]	@ (8007bf0 <xPortStartScheduler+0xf0>)
 8007bae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007bb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bb4:	f000 f8dc 	bl	8007d70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8007bf4 <xPortStartScheduler+0xf4>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bbe:	f000 f8fb 	bl	8007db8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf8 <xPortStartScheduler+0xf8>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8007bf8 <xPortStartScheduler+0xf8>)
 8007bc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007bcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bce:	f7ff ff83 	bl	8007ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bd2:	f7fe ff27 	bl	8006a24 <vTaskSwitchContext>
	prvTaskExitError();
 8007bd6:	f7ff ff37 	bl	8007a48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	e000e400 	.word	0xe000e400
 8007be8:	20001638 	.word	0x20001638
 8007bec:	2000163c 	.word	0x2000163c
 8007bf0:	e000ed20 	.word	0xe000ed20
 8007bf4:	2000000c 	.word	0x2000000c
 8007bf8:	e000ef34 	.word	0xe000ef34

08007bfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c06:	b672      	cpsid	i
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	b662      	cpsie	i
 8007c16:	607b      	str	r3, [r7, #4]
}
 8007c18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c1a:	4b11      	ldr	r3, [pc, #68]	@ (8007c60 <vPortEnterCritical+0x64>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	4a0f      	ldr	r2, [pc, #60]	@ (8007c60 <vPortEnterCritical+0x64>)
 8007c22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c24:	4b0e      	ldr	r3, [pc, #56]	@ (8007c60 <vPortEnterCritical+0x64>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d112      	bne.n	8007c52 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c64 <vPortEnterCritical+0x68>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00d      	beq.n	8007c52 <vPortEnterCritical+0x56>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3a:	b672      	cpsid	i
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	b662      	cpsie	i
 8007c4a:	603b      	str	r3, [r7, #0]
}
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	e7fd      	b.n	8007c4e <vPortEnterCritical+0x52>
	}
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	2000000c 	.word	0x2000000c
 8007c64:	e000ed04 	.word	0xe000ed04

08007c68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c6e:	4b13      	ldr	r3, [pc, #76]	@ (8007cbc <vPortExitCritical+0x54>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10d      	bne.n	8007c92 <vPortExitCritical+0x2a>
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7a:	b672      	cpsid	i
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	b662      	cpsie	i
 8007c8a:	607b      	str	r3, [r7, #4]
}
 8007c8c:	bf00      	nop
 8007c8e:	bf00      	nop
 8007c90:	e7fd      	b.n	8007c8e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007c92:	4b0a      	ldr	r3, [pc, #40]	@ (8007cbc <vPortExitCritical+0x54>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	4a08      	ldr	r2, [pc, #32]	@ (8007cbc <vPortExitCritical+0x54>)
 8007c9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c9c:	4b07      	ldr	r3, [pc, #28]	@ (8007cbc <vPortExitCritical+0x54>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d105      	bne.n	8007cb0 <vPortExitCritical+0x48>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f383 8811 	msr	BASEPRI, r3
}
 8007cae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	2000000c 	.word	0x2000000c

08007cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cc0:	f3ef 8009 	mrs	r0, PSP
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	4b15      	ldr	r3, [pc, #84]	@ (8007d20 <pxCurrentTCBConst>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	f01e 0f10 	tst.w	lr, #16
 8007cd0:	bf08      	it	eq
 8007cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cda:	6010      	str	r0, [r2, #0]
 8007cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ce0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007ce4:	b672      	cpsid	i
 8007ce6:	f380 8811 	msr	BASEPRI, r0
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	b662      	cpsie	i
 8007cf4:	f7fe fe96 	bl	8006a24 <vTaskSwitchContext>
 8007cf8:	f04f 0000 	mov.w	r0, #0
 8007cfc:	f380 8811 	msr	BASEPRI, r0
 8007d00:	bc09      	pop	{r0, r3}
 8007d02:	6819      	ldr	r1, [r3, #0]
 8007d04:	6808      	ldr	r0, [r1, #0]
 8007d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0a:	f01e 0f10 	tst.w	lr, #16
 8007d0e:	bf08      	it	eq
 8007d10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d14:	f380 8809 	msr	PSP, r0
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop

08007d20 <pxCurrentTCBConst>:
 8007d20:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop

08007d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d32:	b672      	cpsid	i
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	b662      	cpsie	i
 8007d42:	607b      	str	r3, [r7, #4]
}
 8007d44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d46:	f7fe fdb1 	bl	80068ac <xTaskIncrementTick>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d50:	4b06      	ldr	r3, [pc, #24]	@ (8007d6c <SysTick_Handler+0x44>)
 8007d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	2300      	movs	r3, #0
 8007d5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	f383 8811 	msr	BASEPRI, r3
}
 8007d62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	e000ed04 	.word	0xe000ed04

08007d70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d74:	4b0b      	ldr	r3, [pc, #44]	@ (8007da4 <vPortSetupTimerInterrupt+0x34>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007da8 <vPortSetupTimerInterrupt+0x38>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d80:	4b0a      	ldr	r3, [pc, #40]	@ (8007dac <vPortSetupTimerInterrupt+0x3c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a0a      	ldr	r2, [pc, #40]	@ (8007db0 <vPortSetupTimerInterrupt+0x40>)
 8007d86:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8a:	099b      	lsrs	r3, r3, #6
 8007d8c:	4a09      	ldr	r2, [pc, #36]	@ (8007db4 <vPortSetupTimerInterrupt+0x44>)
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d92:	4b04      	ldr	r3, [pc, #16]	@ (8007da4 <vPortSetupTimerInterrupt+0x34>)
 8007d94:	2207      	movs	r2, #7
 8007d96:	601a      	str	r2, [r3, #0]
}
 8007d98:	bf00      	nop
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	e000e010 	.word	0xe000e010
 8007da8:	e000e018 	.word	0xe000e018
 8007dac:	20000000 	.word	0x20000000
 8007db0:	10624dd3 	.word	0x10624dd3
 8007db4:	e000e014 	.word	0xe000e014

08007db8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007db8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007dc8 <vPortEnableVFP+0x10>
 8007dbc:	6801      	ldr	r1, [r0, #0]
 8007dbe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007dc2:	6001      	str	r1, [r0, #0]
 8007dc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007dc6:	bf00      	nop
 8007dc8:	e000ed88 	.word	0xe000ed88

08007dcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dd2:	f3ef 8305 	mrs	r3, IPSR
 8007dd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b0f      	cmp	r3, #15
 8007ddc:	d917      	bls.n	8007e0e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dde:	4a1a      	ldr	r2, [pc, #104]	@ (8007e48 <vPortValidateInterruptPriority+0x7c>)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4413      	add	r3, r2
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007de8:	4b18      	ldr	r3, [pc, #96]	@ (8007e4c <vPortValidateInterruptPriority+0x80>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	7afa      	ldrb	r2, [r7, #11]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d20d      	bcs.n	8007e0e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df6:	b672      	cpsid	i
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	b662      	cpsie	i
 8007e06:	607b      	str	r3, [r7, #4]
}
 8007e08:	bf00      	nop
 8007e0a:	bf00      	nop
 8007e0c:	e7fd      	b.n	8007e0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e0e:	4b10      	ldr	r3, [pc, #64]	@ (8007e50 <vPortValidateInterruptPriority+0x84>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e16:	4b0f      	ldr	r3, [pc, #60]	@ (8007e54 <vPortValidateInterruptPriority+0x88>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d90d      	bls.n	8007e3a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e22:	b672      	cpsid	i
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	b662      	cpsie	i
 8007e32:	603b      	str	r3, [r7, #0]
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	e7fd      	b.n	8007e36 <vPortValidateInterruptPriority+0x6a>
	}
 8007e3a:	bf00      	nop
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	e000e3f0 	.word	0xe000e3f0
 8007e4c:	20001638 	.word	0x20001638
 8007e50:	e000ed0c 	.word	0xe000ed0c
 8007e54:	2000163c 	.word	0x2000163c

08007e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	@ 0x28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e60:	2300      	movs	r3, #0
 8007e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e64:	f7fe fc64 	bl	8006730 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e68:	4b5d      	ldr	r3, [pc, #372]	@ (8007fe0 <pvPortMalloc+0x188>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e70:	f000 f920 	bl	80080b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e74:	4b5b      	ldr	r3, [pc, #364]	@ (8007fe4 <pvPortMalloc+0x18c>)
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f040 8094 	bne.w	8007faa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d020      	beq.n	8007eca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007e88:	2208      	movs	r2, #8
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d017      	beq.n	8007eca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f023 0307 	bic.w	r3, r3, #7
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00d      	beq.n	8007eca <pvPortMalloc+0x72>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb2:	b672      	cpsid	i
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	b662      	cpsie	i
 8007ec2:	617b      	str	r3, [r7, #20]
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop
 8007ec8:	e7fd      	b.n	8007ec6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d06c      	beq.n	8007faa <pvPortMalloc+0x152>
 8007ed0:	4b45      	ldr	r3, [pc, #276]	@ (8007fe8 <pvPortMalloc+0x190>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d867      	bhi.n	8007faa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007eda:	4b44      	ldr	r3, [pc, #272]	@ (8007fec <pvPortMalloc+0x194>)
 8007edc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ede:	4b43      	ldr	r3, [pc, #268]	@ (8007fec <pvPortMalloc+0x194>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ee4:	e004      	b.n	8007ef0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d903      	bls.n	8007f02 <pvPortMalloc+0xaa>
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1f1      	bne.n	8007ee6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f02:	4b37      	ldr	r3, [pc, #220]	@ (8007fe0 <pvPortMalloc+0x188>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d04e      	beq.n	8007faa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2208      	movs	r2, #8
 8007f12:	4413      	add	r3, r2
 8007f14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	1ad2      	subs	r2, r2, r3
 8007f26:	2308      	movs	r3, #8
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d922      	bls.n	8007f74 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4413      	add	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	f003 0307 	and.w	r3, r3, #7
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00d      	beq.n	8007f5c <pvPortMalloc+0x104>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f44:	b672      	cpsid	i
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	b662      	cpsie	i
 8007f54:	613b      	str	r3, [r7, #16]
}
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	e7fd      	b.n	8007f58 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	1ad2      	subs	r2, r2, r3
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f6e:	69b8      	ldr	r0, [r7, #24]
 8007f70:	f000 f902 	bl	8008178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f74:	4b1c      	ldr	r3, [pc, #112]	@ (8007fe8 <pvPortMalloc+0x190>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe8 <pvPortMalloc+0x190>)
 8007f80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f82:	4b19      	ldr	r3, [pc, #100]	@ (8007fe8 <pvPortMalloc+0x190>)
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff0 <pvPortMalloc+0x198>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d203      	bcs.n	8007f96 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f8e:	4b16      	ldr	r3, [pc, #88]	@ (8007fe8 <pvPortMalloc+0x190>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a17      	ldr	r2, [pc, #92]	@ (8007ff0 <pvPortMalloc+0x198>)
 8007f94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	4b12      	ldr	r3, [pc, #72]	@ (8007fe4 <pvPortMalloc+0x18c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007faa:	f7fe fbcf 	bl	800674c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f003 0307 	and.w	r3, r3, #7
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00d      	beq.n	8007fd4 <pvPortMalloc+0x17c>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fbc:	b672      	cpsid	i
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	b662      	cpsie	i
 8007fcc:	60fb      	str	r3, [r7, #12]
}
 8007fce:	bf00      	nop
 8007fd0:	bf00      	nop
 8007fd2:	e7fd      	b.n	8007fd0 <pvPortMalloc+0x178>
	return pvReturn;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3728      	adds	r7, #40	@ 0x28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20005248 	.word	0x20005248
 8007fe4:	20005254 	.word	0x20005254
 8007fe8:	2000524c 	.word	0x2000524c
 8007fec:	20005240 	.word	0x20005240
 8007ff0:	20005250 	.word	0x20005250

08007ff4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d04e      	beq.n	80080a4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008006:	2308      	movs	r3, #8
 8008008:	425b      	negs	r3, r3
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	4413      	add	r3, r2
 800800e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	4b24      	ldr	r3, [pc, #144]	@ (80080ac <vPortFree+0xb8>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4013      	ands	r3, r2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10d      	bne.n	800803e <vPortFree+0x4a>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008026:	b672      	cpsid	i
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	b662      	cpsie	i
 8008036:	60fb      	str	r3, [r7, #12]
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	e7fd      	b.n	800803a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00d      	beq.n	8008062 <vPortFree+0x6e>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804a:	b672      	cpsid	i
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	b662      	cpsie	i
 800805a:	60bb      	str	r3, [r7, #8]
}
 800805c:	bf00      	nop
 800805e:	bf00      	nop
 8008060:	e7fd      	b.n	800805e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	4b11      	ldr	r3, [pc, #68]	@ (80080ac <vPortFree+0xb8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4013      	ands	r3, r2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d019      	beq.n	80080a4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d115      	bne.n	80080a4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	4b0b      	ldr	r3, [pc, #44]	@ (80080ac <vPortFree+0xb8>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	43db      	mvns	r3, r3
 8008082:	401a      	ands	r2, r3
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008088:	f7fe fb52 	bl	8006730 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	4b07      	ldr	r3, [pc, #28]	@ (80080b0 <vPortFree+0xbc>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4413      	add	r3, r2
 8008096:	4a06      	ldr	r2, [pc, #24]	@ (80080b0 <vPortFree+0xbc>)
 8008098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800809a:	6938      	ldr	r0, [r7, #16]
 800809c:	f000 f86c 	bl	8008178 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80080a0:	f7fe fb54 	bl	800674c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080a4:	bf00      	nop
 80080a6:	3718      	adds	r7, #24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	20005254 	.word	0x20005254
 80080b0:	2000524c 	.word	0x2000524c

080080b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080ba:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80080be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080c0:	4b27      	ldr	r3, [pc, #156]	@ (8008160 <prvHeapInit+0xac>)
 80080c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00c      	beq.n	80080e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3307      	adds	r3, #7
 80080d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0307 	bic.w	r3, r3, #7
 80080da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008160 <prvHeapInit+0xac>)
 80080e4:	4413      	add	r3, r2
 80080e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008164 <prvHeapInit+0xb0>)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080f2:	4b1c      	ldr	r3, [pc, #112]	@ (8008164 <prvHeapInit+0xb0>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	4413      	add	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008100:	2208      	movs	r2, #8
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0307 	bic.w	r3, r3, #7
 800810e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4a15      	ldr	r2, [pc, #84]	@ (8008168 <prvHeapInit+0xb4>)
 8008114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008116:	4b14      	ldr	r3, [pc, #80]	@ (8008168 <prvHeapInit+0xb4>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2200      	movs	r2, #0
 800811c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800811e:	4b12      	ldr	r3, [pc, #72]	@ (8008168 <prvHeapInit+0xb4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008134:	4b0c      	ldr	r3, [pc, #48]	@ (8008168 <prvHeapInit+0xb4>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	4a0a      	ldr	r2, [pc, #40]	@ (800816c <prvHeapInit+0xb8>)
 8008142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	4a09      	ldr	r2, [pc, #36]	@ (8008170 <prvHeapInit+0xbc>)
 800814a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800814c:	4b09      	ldr	r3, [pc, #36]	@ (8008174 <prvHeapInit+0xc0>)
 800814e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008152:	601a      	str	r2, [r3, #0]
}
 8008154:	bf00      	nop
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	20001640 	.word	0x20001640
 8008164:	20005240 	.word	0x20005240
 8008168:	20005248 	.word	0x20005248
 800816c:	20005250 	.word	0x20005250
 8008170:	2000524c 	.word	0x2000524c
 8008174:	20005254 	.word	0x20005254

08008178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008180:	4b28      	ldr	r3, [pc, #160]	@ (8008224 <prvInsertBlockIntoFreeList+0xac>)
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	e002      	b.n	800818c <prvInsertBlockIntoFreeList+0x14>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	429a      	cmp	r2, r3
 8008194:	d8f7      	bhi.n	8008186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	4413      	add	r3, r2
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d108      	bne.n	80081ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	441a      	add	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	441a      	add	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d118      	bne.n	8008200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	4b15      	ldr	r3, [pc, #84]	@ (8008228 <prvInsertBlockIntoFreeList+0xb0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d00d      	beq.n	80081f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	441a      	add	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	e008      	b.n	8008208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008228 <prvInsertBlockIntoFreeList+0xb0>)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	e003      	b.n	8008208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d002      	beq.n	8008216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20005240 	.word	0x20005240
 8008228:	20005248 	.word	0x20005248

0800822c <memset>:
 800822c:	4402      	add	r2, r0
 800822e:	4603      	mov	r3, r0
 8008230:	4293      	cmp	r3, r2
 8008232:	d100      	bne.n	8008236 <memset+0xa>
 8008234:	4770      	bx	lr
 8008236:	f803 1b01 	strb.w	r1, [r3], #1
 800823a:	e7f9      	b.n	8008230 <memset+0x4>

0800823c <_reclaim_reent>:
 800823c:	4b2d      	ldr	r3, [pc, #180]	@ (80082f4 <_reclaim_reent+0xb8>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4283      	cmp	r3, r0
 8008242:	b570      	push	{r4, r5, r6, lr}
 8008244:	4604      	mov	r4, r0
 8008246:	d053      	beq.n	80082f0 <_reclaim_reent+0xb4>
 8008248:	69c3      	ldr	r3, [r0, #28]
 800824a:	b31b      	cbz	r3, 8008294 <_reclaim_reent+0x58>
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	b163      	cbz	r3, 800826a <_reclaim_reent+0x2e>
 8008250:	2500      	movs	r5, #0
 8008252:	69e3      	ldr	r3, [r4, #28]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	5959      	ldr	r1, [r3, r5]
 8008258:	b9b1      	cbnz	r1, 8008288 <_reclaim_reent+0x4c>
 800825a:	3504      	adds	r5, #4
 800825c:	2d80      	cmp	r5, #128	@ 0x80
 800825e:	d1f8      	bne.n	8008252 <_reclaim_reent+0x16>
 8008260:	69e3      	ldr	r3, [r4, #28]
 8008262:	4620      	mov	r0, r4
 8008264:	68d9      	ldr	r1, [r3, #12]
 8008266:	f000 f87b 	bl	8008360 <_free_r>
 800826a:	69e3      	ldr	r3, [r4, #28]
 800826c:	6819      	ldr	r1, [r3, #0]
 800826e:	b111      	cbz	r1, 8008276 <_reclaim_reent+0x3a>
 8008270:	4620      	mov	r0, r4
 8008272:	f000 f875 	bl	8008360 <_free_r>
 8008276:	69e3      	ldr	r3, [r4, #28]
 8008278:	689d      	ldr	r5, [r3, #8]
 800827a:	b15d      	cbz	r5, 8008294 <_reclaim_reent+0x58>
 800827c:	4629      	mov	r1, r5
 800827e:	4620      	mov	r0, r4
 8008280:	682d      	ldr	r5, [r5, #0]
 8008282:	f000 f86d 	bl	8008360 <_free_r>
 8008286:	e7f8      	b.n	800827a <_reclaim_reent+0x3e>
 8008288:	680e      	ldr	r6, [r1, #0]
 800828a:	4620      	mov	r0, r4
 800828c:	f000 f868 	bl	8008360 <_free_r>
 8008290:	4631      	mov	r1, r6
 8008292:	e7e1      	b.n	8008258 <_reclaim_reent+0x1c>
 8008294:	6961      	ldr	r1, [r4, #20]
 8008296:	b111      	cbz	r1, 800829e <_reclaim_reent+0x62>
 8008298:	4620      	mov	r0, r4
 800829a:	f000 f861 	bl	8008360 <_free_r>
 800829e:	69e1      	ldr	r1, [r4, #28]
 80082a0:	b111      	cbz	r1, 80082a8 <_reclaim_reent+0x6c>
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 f85c 	bl	8008360 <_free_r>
 80082a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80082aa:	b111      	cbz	r1, 80082b2 <_reclaim_reent+0x76>
 80082ac:	4620      	mov	r0, r4
 80082ae:	f000 f857 	bl	8008360 <_free_r>
 80082b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082b4:	b111      	cbz	r1, 80082bc <_reclaim_reent+0x80>
 80082b6:	4620      	mov	r0, r4
 80082b8:	f000 f852 	bl	8008360 <_free_r>
 80082bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80082be:	b111      	cbz	r1, 80082c6 <_reclaim_reent+0x8a>
 80082c0:	4620      	mov	r0, r4
 80082c2:	f000 f84d 	bl	8008360 <_free_r>
 80082c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80082c8:	b111      	cbz	r1, 80082d0 <_reclaim_reent+0x94>
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 f848 	bl	8008360 <_free_r>
 80082d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80082d2:	b111      	cbz	r1, 80082da <_reclaim_reent+0x9e>
 80082d4:	4620      	mov	r0, r4
 80082d6:	f000 f843 	bl	8008360 <_free_r>
 80082da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80082dc:	b111      	cbz	r1, 80082e4 <_reclaim_reent+0xa8>
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 f83e 	bl	8008360 <_free_r>
 80082e4:	6a23      	ldr	r3, [r4, #32]
 80082e6:	b11b      	cbz	r3, 80082f0 <_reclaim_reent+0xb4>
 80082e8:	4620      	mov	r0, r4
 80082ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082ee:	4718      	bx	r3
 80082f0:	bd70      	pop	{r4, r5, r6, pc}
 80082f2:	bf00      	nop
 80082f4:	20000010 	.word	0x20000010

080082f8 <__libc_init_array>:
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	4d0d      	ldr	r5, [pc, #52]	@ (8008330 <__libc_init_array+0x38>)
 80082fc:	4c0d      	ldr	r4, [pc, #52]	@ (8008334 <__libc_init_array+0x3c>)
 80082fe:	1b64      	subs	r4, r4, r5
 8008300:	10a4      	asrs	r4, r4, #2
 8008302:	2600      	movs	r6, #0
 8008304:	42a6      	cmp	r6, r4
 8008306:	d109      	bne.n	800831c <__libc_init_array+0x24>
 8008308:	4d0b      	ldr	r5, [pc, #44]	@ (8008338 <__libc_init_array+0x40>)
 800830a:	4c0c      	ldr	r4, [pc, #48]	@ (800833c <__libc_init_array+0x44>)
 800830c:	f000 f87e 	bl	800840c <_init>
 8008310:	1b64      	subs	r4, r4, r5
 8008312:	10a4      	asrs	r4, r4, #2
 8008314:	2600      	movs	r6, #0
 8008316:	42a6      	cmp	r6, r4
 8008318:	d105      	bne.n	8008326 <__libc_init_array+0x2e>
 800831a:	bd70      	pop	{r4, r5, r6, pc}
 800831c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008320:	4798      	blx	r3
 8008322:	3601      	adds	r6, #1
 8008324:	e7ee      	b.n	8008304 <__libc_init_array+0xc>
 8008326:	f855 3b04 	ldr.w	r3, [r5], #4
 800832a:	4798      	blx	r3
 800832c:	3601      	adds	r6, #1
 800832e:	e7f2      	b.n	8008316 <__libc_init_array+0x1e>
 8008330:	08008588 	.word	0x08008588
 8008334:	08008588 	.word	0x08008588
 8008338:	08008588 	.word	0x08008588
 800833c:	0800858c 	.word	0x0800858c

08008340 <__retarget_lock_acquire_recursive>:
 8008340:	4770      	bx	lr

08008342 <__retarget_lock_release_recursive>:
 8008342:	4770      	bx	lr

08008344 <memcpy>:
 8008344:	440a      	add	r2, r1
 8008346:	4291      	cmp	r1, r2
 8008348:	f100 33ff 	add.w	r3, r0, #4294967295
 800834c:	d100      	bne.n	8008350 <memcpy+0xc>
 800834e:	4770      	bx	lr
 8008350:	b510      	push	{r4, lr}
 8008352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800835a:	4291      	cmp	r1, r2
 800835c:	d1f9      	bne.n	8008352 <memcpy+0xe>
 800835e:	bd10      	pop	{r4, pc}

08008360 <_free_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4605      	mov	r5, r0
 8008364:	2900      	cmp	r1, #0
 8008366:	d041      	beq.n	80083ec <_free_r+0x8c>
 8008368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800836c:	1f0c      	subs	r4, r1, #4
 800836e:	2b00      	cmp	r3, #0
 8008370:	bfb8      	it	lt
 8008372:	18e4      	addlt	r4, r4, r3
 8008374:	f000 f83e 	bl	80083f4 <__malloc_lock>
 8008378:	4a1d      	ldr	r2, [pc, #116]	@ (80083f0 <_free_r+0x90>)
 800837a:	6813      	ldr	r3, [r2, #0]
 800837c:	b933      	cbnz	r3, 800838c <_free_r+0x2c>
 800837e:	6063      	str	r3, [r4, #4]
 8008380:	6014      	str	r4, [r2, #0]
 8008382:	4628      	mov	r0, r5
 8008384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008388:	f000 b83a 	b.w	8008400 <__malloc_unlock>
 800838c:	42a3      	cmp	r3, r4
 800838e:	d908      	bls.n	80083a2 <_free_r+0x42>
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	1821      	adds	r1, r4, r0
 8008394:	428b      	cmp	r3, r1
 8008396:	bf01      	itttt	eq
 8008398:	6819      	ldreq	r1, [r3, #0]
 800839a:	685b      	ldreq	r3, [r3, #4]
 800839c:	1809      	addeq	r1, r1, r0
 800839e:	6021      	streq	r1, [r4, #0]
 80083a0:	e7ed      	b.n	800837e <_free_r+0x1e>
 80083a2:	461a      	mov	r2, r3
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	b10b      	cbz	r3, 80083ac <_free_r+0x4c>
 80083a8:	42a3      	cmp	r3, r4
 80083aa:	d9fa      	bls.n	80083a2 <_free_r+0x42>
 80083ac:	6811      	ldr	r1, [r2, #0]
 80083ae:	1850      	adds	r0, r2, r1
 80083b0:	42a0      	cmp	r0, r4
 80083b2:	d10b      	bne.n	80083cc <_free_r+0x6c>
 80083b4:	6820      	ldr	r0, [r4, #0]
 80083b6:	4401      	add	r1, r0
 80083b8:	1850      	adds	r0, r2, r1
 80083ba:	4283      	cmp	r3, r0
 80083bc:	6011      	str	r1, [r2, #0]
 80083be:	d1e0      	bne.n	8008382 <_free_r+0x22>
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	6053      	str	r3, [r2, #4]
 80083c6:	4408      	add	r0, r1
 80083c8:	6010      	str	r0, [r2, #0]
 80083ca:	e7da      	b.n	8008382 <_free_r+0x22>
 80083cc:	d902      	bls.n	80083d4 <_free_r+0x74>
 80083ce:	230c      	movs	r3, #12
 80083d0:	602b      	str	r3, [r5, #0]
 80083d2:	e7d6      	b.n	8008382 <_free_r+0x22>
 80083d4:	6820      	ldr	r0, [r4, #0]
 80083d6:	1821      	adds	r1, r4, r0
 80083d8:	428b      	cmp	r3, r1
 80083da:	bf04      	itt	eq
 80083dc:	6819      	ldreq	r1, [r3, #0]
 80083de:	685b      	ldreq	r3, [r3, #4]
 80083e0:	6063      	str	r3, [r4, #4]
 80083e2:	bf04      	itt	eq
 80083e4:	1809      	addeq	r1, r1, r0
 80083e6:	6021      	streq	r1, [r4, #0]
 80083e8:	6054      	str	r4, [r2, #4]
 80083ea:	e7ca      	b.n	8008382 <_free_r+0x22>
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
 80083ee:	bf00      	nop
 80083f0:	20005394 	.word	0x20005394

080083f4 <__malloc_lock>:
 80083f4:	4801      	ldr	r0, [pc, #4]	@ (80083fc <__malloc_lock+0x8>)
 80083f6:	f7ff bfa3 	b.w	8008340 <__retarget_lock_acquire_recursive>
 80083fa:	bf00      	nop
 80083fc:	20005390 	.word	0x20005390

08008400 <__malloc_unlock>:
 8008400:	4801      	ldr	r0, [pc, #4]	@ (8008408 <__malloc_unlock+0x8>)
 8008402:	f7ff bf9e 	b.w	8008342 <__retarget_lock_release_recursive>
 8008406:	bf00      	nop
 8008408:	20005390 	.word	0x20005390

0800840c <_init>:
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	bf00      	nop
 8008410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008412:	bc08      	pop	{r3}
 8008414:	469e      	mov	lr, r3
 8008416:	4770      	bx	lr

08008418 <_fini>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	bf00      	nop
 800841c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841e:	bc08      	pop	{r3}
 8008420:	469e      	mov	lr, r3
 8008422:	4770      	bx	lr
