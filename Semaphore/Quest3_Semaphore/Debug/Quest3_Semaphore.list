
Quest3_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081c4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080083c4  080083c4  000093c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f8  080084f8  0000a1a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080084f8  080084f8  000094f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008500  08008500  0000a1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008500  08008500  00009500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008504  08008504  00009504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008508  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08008568  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08008608  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000051f8  200001a0  080086a8  0000a1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005398  080086a8  0000a398  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022545  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041e6  00000000  00000000  0002c713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a40  00000000  00000000  00030900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001479  00000000  00000000  00032340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000407b  00000000  00000000  000337b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001eaad  00000000  00000000  00037834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010db15  00000000  00000000  000562e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00163df6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000072dc  00000000  00000000  00163e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  0016b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	080083ac 	.word	0x080083ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	080083ac 	.word	0x080083ac

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b988 	b.w	8000578 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	468e      	mov	lr, r1
 8000288:	4604      	mov	r4, r0
 800028a:	4688      	mov	r8, r1
 800028c:	2b00      	cmp	r3, #0
 800028e:	d14a      	bne.n	8000326 <__udivmoddi4+0xa6>
 8000290:	428a      	cmp	r2, r1
 8000292:	4617      	mov	r7, r2
 8000294:	d962      	bls.n	800035c <__udivmoddi4+0xdc>
 8000296:	fab2 f682 	clz	r6, r2
 800029a:	b14e      	cbz	r6, 80002b0 <__udivmoddi4+0x30>
 800029c:	f1c6 0320 	rsb	r3, r6, #32
 80002a0:	fa01 f806 	lsl.w	r8, r1, r6
 80002a4:	fa20 f303 	lsr.w	r3, r0, r3
 80002a8:	40b7      	lsls	r7, r6
 80002aa:	ea43 0808 	orr.w	r8, r3, r8
 80002ae:	40b4      	lsls	r4, r6
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f fc87 	uxth.w	ip, r7
 80002b8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002bc:	0c23      	lsrs	r3, r4, #16
 80002be:	fb0e 8811 	mls	r8, lr, r1, r8
 80002c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002c6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x62>
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002d4:	f080 80ea 	bcs.w	80004ac <__udivmoddi4+0x22c>
 80002d8:	429a      	cmp	r2, r3
 80002da:	f240 80e7 	bls.w	80004ac <__udivmoddi4+0x22c>
 80002de:	3902      	subs	r1, #2
 80002e0:	443b      	add	r3, r7
 80002e2:	1a9a      	subs	r2, r3, r2
 80002e4:	b2a3      	uxth	r3, r4
 80002e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002f2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002f6:	459c      	cmp	ip, r3
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0x8e>
 80002fa:	18fb      	adds	r3, r7, r3
 80002fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000300:	f080 80d6 	bcs.w	80004b0 <__udivmoddi4+0x230>
 8000304:	459c      	cmp	ip, r3
 8000306:	f240 80d3 	bls.w	80004b0 <__udivmoddi4+0x230>
 800030a:	443b      	add	r3, r7
 800030c:	3802      	subs	r0, #2
 800030e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000312:	eba3 030c 	sub.w	r3, r3, ip
 8000316:	2100      	movs	r1, #0
 8000318:	b11d      	cbz	r5, 8000322 <__udivmoddi4+0xa2>
 800031a:	40f3      	lsrs	r3, r6
 800031c:	2200      	movs	r2, #0
 800031e:	e9c5 3200 	strd	r3, r2, [r5]
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d905      	bls.n	8000336 <__udivmoddi4+0xb6>
 800032a:	b10d      	cbz	r5, 8000330 <__udivmoddi4+0xb0>
 800032c:	e9c5 0100 	strd	r0, r1, [r5]
 8000330:	2100      	movs	r1, #0
 8000332:	4608      	mov	r0, r1
 8000334:	e7f5      	b.n	8000322 <__udivmoddi4+0xa2>
 8000336:	fab3 f183 	clz	r1, r3
 800033a:	2900      	cmp	r1, #0
 800033c:	d146      	bne.n	80003cc <__udivmoddi4+0x14c>
 800033e:	4573      	cmp	r3, lr
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0xc8>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 8105 	bhi.w	8000552 <__udivmoddi4+0x2d2>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb6e 0203 	sbc.w	r2, lr, r3
 800034e:	2001      	movs	r0, #1
 8000350:	4690      	mov	r8, r2
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0e5      	beq.n	8000322 <__udivmoddi4+0xa2>
 8000356:	e9c5 4800 	strd	r4, r8, [r5]
 800035a:	e7e2      	b.n	8000322 <__udivmoddi4+0xa2>
 800035c:	2a00      	cmp	r2, #0
 800035e:	f000 8090 	beq.w	8000482 <__udivmoddi4+0x202>
 8000362:	fab2 f682 	clz	r6, r2
 8000366:	2e00      	cmp	r6, #0
 8000368:	f040 80a4 	bne.w	80004b4 <__udivmoddi4+0x234>
 800036c:	1a8a      	subs	r2, r1, r2
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	b280      	uxth	r0, r0
 8000376:	b2bc      	uxth	r4, r7
 8000378:	2101      	movs	r1, #1
 800037a:	fbb2 fcfe 	udiv	ip, r2, lr
 800037e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000386:	fb04 f20c 	mul.w	r2, r4, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d907      	bls.n	800039e <__udivmoddi4+0x11e>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x11c>
 8000396:	429a      	cmp	r2, r3
 8000398:	f200 80e0 	bhi.w	800055c <__udivmoddi4+0x2dc>
 800039c:	46c4      	mov	ip, r8
 800039e:	1a9b      	subs	r3, r3, r2
 80003a0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003a4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ac:	fb02 f404 	mul.w	r4, r2, r4
 80003b0:	429c      	cmp	r4, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x144>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x142>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f200 80ca 	bhi.w	8000556 <__udivmoddi4+0x2d6>
 80003c2:	4602      	mov	r2, r0
 80003c4:	1b1b      	subs	r3, r3, r4
 80003c6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0x98>
 80003cc:	f1c1 0620 	rsb	r6, r1, #32
 80003d0:	408b      	lsls	r3, r1
 80003d2:	fa22 f706 	lsr.w	r7, r2, r6
 80003d6:	431f      	orrs	r7, r3
 80003d8:	fa0e f401 	lsl.w	r4, lr, r1
 80003dc:	fa20 f306 	lsr.w	r3, r0, r6
 80003e0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003e8:	4323      	orrs	r3, r4
 80003ea:	fa00 f801 	lsl.w	r8, r0, r1
 80003ee:	fa1f fc87 	uxth.w	ip, r7
 80003f2:	fbbe f0f9 	udiv	r0, lr, r9
 80003f6:	0c1c      	lsrs	r4, r3, #16
 80003f8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000400:	fb00 fe0c 	mul.w	lr, r0, ip
 8000404:	45a6      	cmp	lr, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x1a0>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000412:	f080 809c 	bcs.w	800054e <__udivmoddi4+0x2ce>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f240 8099 	bls.w	800054e <__udivmoddi4+0x2ce>
 800041c:	3802      	subs	r0, #2
 800041e:	443c      	add	r4, r7
 8000420:	eba4 040e 	sub.w	r4, r4, lr
 8000424:	fa1f fe83 	uxth.w	lr, r3
 8000428:	fbb4 f3f9 	udiv	r3, r4, r9
 800042c:	fb09 4413 	mls	r4, r9, r3, r4
 8000430:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000434:	fb03 fc0c 	mul.w	ip, r3, ip
 8000438:	45a4      	cmp	ip, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x1ce>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000442:	f080 8082 	bcs.w	800054a <__udivmoddi4+0x2ca>
 8000446:	45a4      	cmp	ip, r4
 8000448:	d97f      	bls.n	800054a <__udivmoddi4+0x2ca>
 800044a:	3b02      	subs	r3, #2
 800044c:	443c      	add	r4, r7
 800044e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	fba0 ec02 	umull	lr, ip, r0, r2
 800045a:	4564      	cmp	r4, ip
 800045c:	4673      	mov	r3, lr
 800045e:	46e1      	mov	r9, ip
 8000460:	d362      	bcc.n	8000528 <__udivmoddi4+0x2a8>
 8000462:	d05f      	beq.n	8000524 <__udivmoddi4+0x2a4>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x1fe>
 8000466:	ebb8 0203 	subs.w	r2, r8, r3
 800046a:	eb64 0409 	sbc.w	r4, r4, r9
 800046e:	fa04 f606 	lsl.w	r6, r4, r6
 8000472:	fa22 f301 	lsr.w	r3, r2, r1
 8000476:	431e      	orrs	r6, r3
 8000478:	40cc      	lsrs	r4, r1
 800047a:	e9c5 6400 	strd	r6, r4, [r5]
 800047e:	2100      	movs	r1, #0
 8000480:	e74f      	b.n	8000322 <__udivmoddi4+0xa2>
 8000482:	fbb1 fcf2 	udiv	ip, r1, r2
 8000486:	0c01      	lsrs	r1, r0, #16
 8000488:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800048c:	b280      	uxth	r0, r0
 800048e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000492:	463b      	mov	r3, r7
 8000494:	4638      	mov	r0, r7
 8000496:	463c      	mov	r4, r7
 8000498:	46b8      	mov	r8, r7
 800049a:	46be      	mov	lr, r7
 800049c:	2620      	movs	r6, #32
 800049e:	fbb1 f1f7 	udiv	r1, r1, r7
 80004a2:	eba2 0208 	sub.w	r2, r2, r8
 80004a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004aa:	e766      	b.n	800037a <__udivmoddi4+0xfa>
 80004ac:	4601      	mov	r1, r0
 80004ae:	e718      	b.n	80002e2 <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e72c      	b.n	800030e <__udivmoddi4+0x8e>
 80004b4:	f1c6 0220 	rsb	r2, r6, #32
 80004b8:	fa2e f302 	lsr.w	r3, lr, r2
 80004bc:	40b7      	lsls	r7, r6
 80004be:	40b1      	lsls	r1, r6
 80004c0:	fa20 f202 	lsr.w	r2, r0, r2
 80004c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c8:	430a      	orrs	r2, r1
 80004ca:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ce:	b2bc      	uxth	r4, r7
 80004d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb08 f904 	mul.w	r9, r8, r4
 80004de:	40b0      	lsls	r0, r6
 80004e0:	4589      	cmp	r9, r1
 80004e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004e6:	b280      	uxth	r0, r0
 80004e8:	d93e      	bls.n	8000568 <__udivmoddi4+0x2e8>
 80004ea:	1879      	adds	r1, r7, r1
 80004ec:	f108 3cff 	add.w	ip, r8, #4294967295
 80004f0:	d201      	bcs.n	80004f6 <__udivmoddi4+0x276>
 80004f2:	4589      	cmp	r9, r1
 80004f4:	d81f      	bhi.n	8000536 <__udivmoddi4+0x2b6>
 80004f6:	eba1 0109 	sub.w	r1, r1, r9
 80004fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fe:	fb09 f804 	mul.w	r8, r9, r4
 8000502:	fb0e 1119 	mls	r1, lr, r9, r1
 8000506:	b292      	uxth	r2, r2
 8000508:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800050c:	4542      	cmp	r2, r8
 800050e:	d229      	bcs.n	8000564 <__udivmoddi4+0x2e4>
 8000510:	18ba      	adds	r2, r7, r2
 8000512:	f109 31ff 	add.w	r1, r9, #4294967295
 8000516:	d2c4      	bcs.n	80004a2 <__udivmoddi4+0x222>
 8000518:	4542      	cmp	r2, r8
 800051a:	d2c2      	bcs.n	80004a2 <__udivmoddi4+0x222>
 800051c:	f1a9 0102 	sub.w	r1, r9, #2
 8000520:	443a      	add	r2, r7
 8000522:	e7be      	b.n	80004a2 <__udivmoddi4+0x222>
 8000524:	45f0      	cmp	r8, lr
 8000526:	d29d      	bcs.n	8000464 <__udivmoddi4+0x1e4>
 8000528:	ebbe 0302 	subs.w	r3, lr, r2
 800052c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000530:	3801      	subs	r0, #1
 8000532:	46e1      	mov	r9, ip
 8000534:	e796      	b.n	8000464 <__udivmoddi4+0x1e4>
 8000536:	eba7 0909 	sub.w	r9, r7, r9
 800053a:	4449      	add	r1, r9
 800053c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000540:	fbb1 f9fe 	udiv	r9, r1, lr
 8000544:	fb09 f804 	mul.w	r8, r9, r4
 8000548:	e7db      	b.n	8000502 <__udivmoddi4+0x282>
 800054a:	4673      	mov	r3, lr
 800054c:	e77f      	b.n	800044e <__udivmoddi4+0x1ce>
 800054e:	4650      	mov	r0, sl
 8000550:	e766      	b.n	8000420 <__udivmoddi4+0x1a0>
 8000552:	4608      	mov	r0, r1
 8000554:	e6fd      	b.n	8000352 <__udivmoddi4+0xd2>
 8000556:	443b      	add	r3, r7
 8000558:	3a02      	subs	r2, #2
 800055a:	e733      	b.n	80003c4 <__udivmoddi4+0x144>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	443b      	add	r3, r7
 8000562:	e71c      	b.n	800039e <__udivmoddi4+0x11e>
 8000564:	4649      	mov	r1, r9
 8000566:	e79c      	b.n	80004a2 <__udivmoddi4+0x222>
 8000568:	eba1 0109 	sub.w	r1, r1, r9
 800056c:	46c4      	mov	ip, r8
 800056e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000572:	fb09 f804 	mul.w	r8, r9, r4
 8000576:	e7c4      	b.n	8000502 <__udivmoddi4+0x282>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fd63 	bl	800104a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f844 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f960 	bl	800084c <MX_GPIO_Init>
  MX_ETH_Init();
 800058c:	f000 f8b2 	bl	80006f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000590:	f000 f8fe 	bl	8000790 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000594:	f000 f92c 	bl	80007f0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000598:	f004 f9bc 	bl	8004914 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 2, &myCountingSem01_attributes);
 800059c:	4a11      	ldr	r2, [pc, #68]	@ (80005e4 <main+0x68>)
 800059e:	2102      	movs	r1, #2
 80005a0:	2002      	movs	r0, #2
 80005a2:	f004 faf5 	bl	8004b90 <osSemaphoreNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <main+0x6c>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask */
  myTaskHandle = osThreadNew(StartTask01, NULL, &myTask_attributes);
 80005ac:	4a0f      	ldr	r2, [pc, #60]	@ (80005ec <main+0x70>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	480f      	ldr	r0, [pc, #60]	@ (80005f0 <main+0x74>)
 80005b2:	f004 fa19 	bl	80049e8 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0e      	ldr	r2, [pc, #56]	@ (80005f4 <main+0x78>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005bc:	4a0e      	ldr	r2, [pc, #56]	@ (80005f8 <main+0x7c>)
 80005be:	2100      	movs	r1, #0
 80005c0:	480e      	ldr	r0, [pc, #56]	@ (80005fc <main+0x80>)
 80005c2:	f004 fa11 	bl	80049e8 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <main+0x84>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80005cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <main+0x88>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <main+0x8c>)
 80005d2:	f004 fa09 	bl	80049e8 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0c      	ldr	r2, [pc, #48]	@ (800060c <main+0x90>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005dc:	f004 f9ce 	bl	800497c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0x64>
 80005e4:	080084d0 	.word	0x080084d0
 80005e8:	20000818 	.word	0x20000818
 80005ec:	08008464 	.word	0x08008464
 80005f0:	080009dd 	.word	0x080009dd
 80005f4:	2000080c 	.word	0x2000080c
 80005f8:	08008488 	.word	0x08008488
 80005fc:	08000a55 	.word	0x08000a55
 8000600:	20000810 	.word	0x20000810
 8000604:	080084ac 	.word	0x080084ac
 8000608:	08000ae5 	.word	0x08000ae5
 800060c:	20000814 	.word	0x20000814

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	@ 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f007 fdd4 	bl	80081cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000634:	f001 fcbc 	bl	8001fb0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	4b2c      	ldr	r3, [pc, #176]	@ (80006ec <SystemClock_Config+0xdc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a2b      	ldr	r2, [pc, #172]	@ (80006ec <SystemClock_Config+0xdc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <SystemClock_Config+0xdc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <SystemClock_Config+0xe0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000658:	4a25      	ldr	r2, [pc, #148]	@ (80006f0 <SystemClock_Config+0xe0>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <SystemClock_Config+0xe0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000674:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000684:	2360      	movs	r3, #96	@ 0x60
 8000686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000690:	2302      	movs	r3, #2
 8000692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fce9 	bl	8002070 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a4:	f000 fa38 	bl	8000b18 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a8:	f001 fc92 	bl	8001fd0 <HAL_PWREx_EnableOverDrive>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006b2:	f000 fa31 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2103      	movs	r1, #3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 ff7a 	bl	80025cc <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006de:	f000 fa1b 	bl	8000b18 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <MX_ETH_Init+0x84>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <MX_ETH_Init+0x88>)
 80006fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <MX_ETH_Init+0x8c>)
 800070c:	22e1      	movs	r2, #225	@ 0xe1
 800070e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_ETH_Init+0x8c>)
 800071e:	2200      	movs	r2, #0
 8000720:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_ETH_Init+0x84>)
 8000724:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000726:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_ETH_Init+0x84>)
 800072a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800072e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_ETH_Init+0x84>)
 8000732:	4a14      	ldr	r2, [pc, #80]	@ (8000784 <MX_ETH_Init+0x90>)
 8000734:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_ETH_Init+0x84>)
 8000738:	4a13      	ldr	r2, [pc, #76]	@ (8000788 <MX_ETH_Init+0x94>)
 800073a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_ETH_Init+0x84>)
 800073e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000742:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <MX_ETH_Init+0x84>)
 8000746:	f000 fdb3 	bl	80012b0 <HAL_ETH_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000750:	f000 f9e2 	bl	8000b18 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000754:	2238      	movs	r2, #56	@ 0x38
 8000756:	2100      	movs	r1, #0
 8000758:	480c      	ldr	r0, [pc, #48]	@ (800078c <MX_ETH_Init+0x98>)
 800075a:	f007 fd37 	bl	80081cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_ETH_Init+0x98>)
 8000760:	2221      	movs	r2, #33	@ 0x21
 8000762:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_ETH_Init+0x98>)
 8000766:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800076a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <MX_ETH_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200001f4 	.word	0x200001f4
 800077c:	40028000 	.word	0x40028000
 8000780:	20000820 	.word	0x20000820
 8000784:	20000100 	.word	0x20000100
 8000788:	20000060 	.word	0x20000060
 800078c:	200001bc 	.word	0x200001bc

08000790 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <MX_USART3_UART_Init+0x5c>)
 8000798:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007d4:	f003 f848 	bl	8003868 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 f99b 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200002a4 	.word	0x200002a4
 80007ec:	40004800 	.word	0x40004800

080007f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2206      	movs	r2, #6
 8000800:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	2202      	movs	r2, #2
 8000806:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	2202      	movs	r2, #2
 8000812:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2201      	movs	r2, #1
 8000818:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2201      	movs	r2, #1
 800082a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	f001 fa82 	bl	8001d3c <HAL_PCD_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f96b 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000032c 	.word	0x2000032c

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	@ 0x30
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b4b      	ldr	r3, [pc, #300]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a4a      	ldr	r2, [pc, #296]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b48      	ldr	r3, [pc, #288]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	4b45      	ldr	r3, [pc, #276]	@ (8000990 <MX_GPIO_Init+0x144>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a44      	ldr	r2, [pc, #272]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b42      	ldr	r3, [pc, #264]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b3f      	ldr	r3, [pc, #252]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a3e      	ldr	r2, [pc, #248]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b3c      	ldr	r3, [pc, #240]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b39      	ldr	r3, [pc, #228]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a38      	ldr	r2, [pc, #224]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b36      	ldr	r3, [pc, #216]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	4b33      	ldr	r3, [pc, #204]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a32      	ldr	r2, [pc, #200]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b30      	ldr	r3, [pc, #192]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008da:	4b2d      	ldr	r3, [pc, #180]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a2c      	ldr	r2, [pc, #176]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008f8:	4826      	ldr	r0, [pc, #152]	@ (8000994 <MX_GPIO_Init+0x148>)
 80008fa:	f001 f9d3 	bl	8001ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2140      	movs	r1, #64	@ 0x40
 8000902:	4825      	ldr	r0, [pc, #148]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000904:	f001 f9ce 	bl	8001ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000908:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	481f      	ldr	r0, [pc, #124]	@ (800099c <MX_GPIO_Init+0x150>)
 8000920:	f001 f814 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000924:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4815      	ldr	r0, [pc, #84]	@ (8000994 <MX_GPIO_Init+0x148>)
 800093e:	f001 f805 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000942:	2340      	movs	r3, #64	@ 0x40
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	480f      	ldr	r0, [pc, #60]	@ (8000998 <MX_GPIO_Init+0x14c>)
 800095a:	f000 fff7 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800095e:	2380      	movs	r3, #128	@ 0x80
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4809      	ldr	r0, [pc, #36]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000972:	f000 ffeb 	bl	800194c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2105      	movs	r1, #5
 800097a:	2028      	movs	r0, #40	@ 0x28
 800097c:	f000 fc6e 	bl	800125c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000980:	2028      	movs	r0, #40	@ 0x28
 8000982:	f000 fc87 	bl	8001294 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	@ 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40020400 	.word	0x40020400
 8000998:	40021800 	.word	0x40021800
 800099c:	40020800 	.word	0x40020800

080009a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	80fb      	strh	r3, [r7, #6]
	if(pin == USER_Btn_Pin)
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009b0:	d10b      	bne.n	80009ca <HAL_GPIO_EXTI_Callback+0x2a>
	{
		char *str = "Release! /r/n";
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_GPIO_EXTI_Callback+0x34>)
 80009b4:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), 100);
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f7ff fc42 	bl	8000240 <strlen>
 80009bc:	4603      	mov	r3, r0
 80009be:	b29a      	uxth	r2, r3
 80009c0:	2364      	movs	r3, #100	@ 0x64
 80009c2:	68f9      	ldr	r1, [r7, #12]
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <HAL_GPIO_EXTI_Callback+0x38>)
 80009c6:	f002 ff9d 	bl	8003904 <HAL_UART_Transmit>
	}
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	080083f4 	.word	0x080083f4
 80009d8:	200002a4 	.word	0x200002a4

080009dc <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  count = osSemaphoreGetCount(myCountingSem01Handle);
 80009e4:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <StartTask01+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f004 fa2b 	bl	8004e44 <osSemaphoreGetCount>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <StartTask01+0x68>)
 80009f2:	6013      	str	r3, [r2, #0]
	  osSemaphoreAcquire(myCountingSem01Handle, osWaitForever);
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <StartTask01+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 f963 	bl	8004cc8 <osSemaphoreAcquire>
	  count = osSemaphoreGetCount(myCountingSem01Handle);
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <StartTask01+0x64>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f004 fa1c 	bl	8004e44 <osSemaphoreGetCount>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a44 <StartTask01+0x68>)
 8000a10:	6013      	str	r3, [r2, #0]


	  char *str =  "Task 01 adquirindo semaforo!/r/n";
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <StartTask01+0x6c>)
 8000a14:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), 100);
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f7ff fc12 	bl	8000240 <strlen>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	2364      	movs	r3, #100	@ 0x64
 8000a22:	68f9      	ldr	r1, [r7, #12]
 8000a24:	4809      	ldr	r0, [pc, #36]	@ (8000a4c <StartTask01+0x70>)
 8000a26:	f002 ff6d 	bl	8003904 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <StartTask01+0x74>)
 8000a2e:	f001 f952 	bl	8001cd6 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000a32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a36:	f004 f87d 	bl	8004b34 <osDelay>
  {
 8000a3a:	bf00      	nop
 8000a3c:	e7d2      	b.n	80009e4 <StartTask01+0x8>
 8000a3e:	bf00      	nop
 8000a40:	20000818 	.word	0x20000818
 8000a44:	2000081c 	.word	0x2000081c
 8000a48:	08008404 	.word	0x08008404
 8000a4c:	200002a4 	.word	0x200002a4
 8000a50:	40020400 	.word	0x40020400

08000a54 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  count = osSemaphoreGetCount(myCountingSem01Handle);
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <StartTask02+0x7c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 f9ef 	bl	8004e44 <osSemaphoreGetCount>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4a1a      	ldr	r2, [pc, #104]	@ (8000ad4 <StartTask02+0x80>)
 8000a6a:	6013      	str	r3, [r2, #0]
	  osSemaphoreAcquire(myCountingSem01Handle, osWaitForever);
 8000a6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <StartTask02+0x7c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295
 8000a74:	4618      	mov	r0, r3
 8000a76:	f004 f927 	bl	8004cc8 <osSemaphoreAcquire>
	  count = osSemaphoreGetCount(myCountingSem01Handle);
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <StartTask02+0x7c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f004 f9e0 	bl	8004e44 <osSemaphoreGetCount>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4a13      	ldr	r2, [pc, #76]	@ (8000ad4 <StartTask02+0x80>)
 8000a88:	6013      	str	r3, [r2, #0]


	  char *str =  "Task 02 adquirindo semaforo!/r/n";
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <StartTask02+0x84>)
 8000a8c:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), 100);
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f7ff fbd6 	bl	8000240 <strlen>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	2364      	movs	r3, #100	@ 0x64
 8000a9a:	68f9      	ldr	r1, [r7, #12]
 8000a9c:	480f      	ldr	r0, [pc, #60]	@ (8000adc <StartTask02+0x88>)
 8000a9e:	f002 ff31 	bl	8003904 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000aa2:	2180      	movs	r1, #128	@ 0x80
 8000aa4:	480e      	ldr	r0, [pc, #56]	@ (8000ae0 <StartTask02+0x8c>)
 8000aa6:	f001 f916 	bl	8001cd6 <HAL_GPIO_TogglePin>

	  if(osSemaphoreGetCount(myCountingSem01Handle) == 0)
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <StartTask02+0x7c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f004 f9c8 	bl	8004e44 <osSemaphoreGetCount>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d104      	bne.n	8000ac4 <StartTask02+0x70>
	 	  {
	 	  	  osSemaphoreRelease(myCountingSem01Handle);
 8000aba:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <StartTask02+0x7c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f004 f968 	bl	8004d94 <osSemaphoreRelease>
	 	  }

	  osDelay(1000);
 8000ac4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ac8:	f004 f834 	bl	8004b34 <osDelay>
  {
 8000acc:	e7c6      	b.n	8000a5c <StartTask02+0x8>
 8000ace:	bf00      	nop
 8000ad0:	20000818 	.word	0x20000818
 8000ad4:	2000081c 	.word	0x2000081c
 8000ad8:	08008428 	.word	0x08008428
 8000adc:	200002a4 	.word	0x200002a4
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f004 f821 	bl	8004b34 <osDelay>
 8000af2:	e7fb      	b.n	8000aec <StartTask03+0x8>

08000af4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a04      	ldr	r2, [pc, #16]	@ (8000b14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d101      	bne.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000b06:	f000 faad 	bl	8001064 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40010000 	.word	0x40010000

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <Error_Handler+0x8>

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	4a10      	ldr	r2, [pc, #64]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	210f      	movs	r1, #15
 8000b5e:	f06f 0001 	mvn.w	r0, #1
 8000b62:	f000 fb7b 	bl	800125c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	@ 0x38
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a4e      	ldr	r2, [pc, #312]	@ (8000ccc <HAL_ETH_MspInit+0x158>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	f040 8096 	bne.w	8000cc4 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b98:	4b4d      	ldr	r3, [pc, #308]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000b9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ba2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bac:	623b      	str	r3, [r7, #32]
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	4b47      	ldr	r3, [pc, #284]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	4a46      	ldr	r2, [pc, #280]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbc:	4b44      	ldr	r3, [pc, #272]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	4b41      	ldr	r3, [pc, #260]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	4a40      	ldr	r2, [pc, #256]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	4b3b      	ldr	r3, [pc, #236]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be4:	4a3a      	ldr	r2, [pc, #232]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bec:	4b38      	ldr	r3, [pc, #224]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b35      	ldr	r3, [pc, #212]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	4a34      	ldr	r2, [pc, #208]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c04:	4b32      	ldr	r3, [pc, #200]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c14:	4a2e      	ldr	r2, [pc, #184]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c28:	4b29      	ldr	r3, [pc, #164]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2c:	4a28      	ldr	r2, [pc, #160]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c34:	4b26      	ldr	r3, [pc, #152]	@ (8000cd0 <HAL_ETH_MspInit+0x15c>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c40:	2332      	movs	r3, #50	@ 0x32
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c50:	230b      	movs	r3, #11
 8000c52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481e      	ldr	r0, [pc, #120]	@ (8000cd4 <HAL_ETH_MspInit+0x160>)
 8000c5c:	f000 fe76 	bl	800194c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c60:	2386      	movs	r3, #134	@ 0x86
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c70:	230b      	movs	r3, #11
 8000c72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4817      	ldr	r0, [pc, #92]	@ (8000cd8 <HAL_ETH_MspInit+0x164>)
 8000c7c:	f000 fe66 	bl	800194c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c92:	230b      	movs	r3, #11
 8000c94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480f      	ldr	r0, [pc, #60]	@ (8000cdc <HAL_ETH_MspInit+0x168>)
 8000c9e:	f000 fe55 	bl	800194c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ca2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb4:	230b      	movs	r3, #11
 8000cb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4808      	ldr	r0, [pc, #32]	@ (8000ce0 <HAL_ETH_MspInit+0x16c>)
 8000cc0:	f000 fe44 	bl	800194c <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000cc4:	bf00      	nop
 8000cc6:	3738      	adds	r7, #56	@ 0x38
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40028000 	.word	0x40028000
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40021800 	.word	0x40021800

08000ce4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2290      	movs	r2, #144	@ 0x90
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f007 fa61 	bl	80081cc <memset>
  if(huart->Instance==USART3)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a22      	ldr	r2, [pc, #136]	@ (8000d98 <HAL_UART_MspInit+0xb4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d13c      	bne.n	8000d8e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d18:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 feaa 	bl	8002a7c <HAL_RCCEx_PeriphCLKConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d2e:	f7ff fef3 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <HAL_UART_MspInit+0xb8>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a19      	ldr	r2, [pc, #100]	@ (8000d9c <HAL_UART_MspInit+0xb8>)
 8000d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <HAL_UART_MspInit+0xb8>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <HAL_UART_MspInit+0xb8>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a13      	ldr	r2, [pc, #76]	@ (8000d9c <HAL_UART_MspInit+0xb8>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_UART_MspInit+0xb8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d82:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <HAL_UART_MspInit+0xbc>)
 8000d8a:	f000 fddf 	bl	800194c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d8e:	bf00      	nop
 8000d90:	37b8      	adds	r7, #184	@ 0xb8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40004800 	.word	0x40004800
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020c00 	.word	0x40020c00

08000da4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0ae      	sub	sp, #184	@ 0xb8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2290      	movs	r2, #144	@ 0x90
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f007 fa01 	bl	80081cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dd2:	d159      	bne.n	8000e88 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000dd4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000dd8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fe49 	bl	8002a7c <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000df0:	f7ff fe92 	bl	8000b18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df8:	4a25      	ldr	r2, [pc, #148]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e00:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e0c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e26:	230a      	movs	r3, #10
 8000e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e30:	4619      	mov	r1, r3
 8000e32:	4818      	ldr	r0, [pc, #96]	@ (8000e94 <HAL_PCD_MspInit+0xf0>)
 8000e34:	f000 fd8a 	bl	800194c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4810      	ldr	r0, [pc, #64]	@ (8000e94 <HAL_PCD_MspInit+0xf0>)
 8000e54:	f000 fd7a 	bl	800194c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e62:	6353      	str	r3, [r2, #52]	@ 0x34
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e74:	4a06      	ldr	r2, [pc, #24]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7c:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <HAL_PCD_MspInit+0xec>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e88:	bf00      	nop
 8000e8a:	37b8      	adds	r7, #184	@ 0xb8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000

08000e98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	@ 0x30
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f64 <HAL_InitTick+0xcc>)
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eac:	4a2d      	ldr	r2, [pc, #180]	@ (8000f64 <HAL_InitTick+0xcc>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f64 <HAL_InitTick+0xcc>)
 8000eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec0:	f107 020c 	add.w	r2, r7, #12
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f001 fda4 	bl	8002a18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ed0:	f001 fd8e 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 8000ed4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ed8:	4a23      	ldr	r2, [pc, #140]	@ (8000f68 <HAL_InitTick+0xd0>)
 8000eda:	fba2 2303 	umull	r2, r3, r2, r3
 8000ede:	0c9b      	lsrs	r3, r3, #18
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ee4:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <HAL_InitTick+0xd4>)
 8000ee6:	4a22      	ldr	r2, [pc, #136]	@ (8000f70 <HAL_InitTick+0xd8>)
 8000ee8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000eea:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <HAL_InitTick+0xd4>)
 8000eec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ef0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f6c <HAL_InitTick+0xd4>)
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <HAL_InitTick+0xd4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <HAL_InitTick+0xd4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_InitTick+0xd4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f0a:	4818      	ldr	r0, [pc, #96]	@ (8000f6c <HAL_InitTick+0xd4>)
 8000f0c:	f002 f9de 	bl	80032cc <HAL_TIM_Base_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d11b      	bne.n	8000f56 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f1e:	4813      	ldr	r0, [pc, #76]	@ (8000f6c <HAL_InitTick+0xd4>)
 8000f20:	f002 fa36 	bl	8003390 <HAL_TIM_Base_Start_IT>
 8000f24:	4603      	mov	r3, r0
 8000f26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d111      	bne.n	8000f56 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f32:	2019      	movs	r0, #25
 8000f34:	f000 f9ae 	bl	8001294 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b0f      	cmp	r3, #15
 8000f3c:	d808      	bhi.n	8000f50 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	2019      	movs	r0, #25
 8000f44:	f000 f98a 	bl	800125c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f48:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <HAL_InitTick+0xdc>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e002      	b.n	8000f56 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3730      	adds	r7, #48	@ 0x30
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	431bde83 	.word	0x431bde83
 8000f6c:	20000828 	.word	0x20000828
 8000f70:	40010000 	.word	0x40010000
 8000f74:	20000004 	.word	0x20000004

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <NMI_Handler+0x4>

08000f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <MemManage_Handler+0x4>

08000f90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <UsageFault_Handler+0x4>

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fb6:	f002 fa63 	bl	8003480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000828 	.word	0x20000828

08000fc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000fc8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fcc:	f000 fe9e 	bl	8001d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001030 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ffc:	f7ff ffea 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	@ (8001038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	@ (8001044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001026:	f007 f937 	bl	8008298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102a:	f7ff faa7 	bl	800057c <main>
  bx  lr    
 800102e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001030:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800103c:	08008508 	.word	0x08008508
  ldr r2, =_sbss
 8001040:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8001044:	20005398 	.word	0x20005398

08001048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC_IRQHandler>

0800104a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104e:	2003      	movs	r0, #3
 8001050:	f000 f8f9 	bl	8001246 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001054:	200f      	movs	r0, #15
 8001056:	f7ff ff1f 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105a:	f7ff fd63 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008
 8001088:	20000874 	.word	0x20000874

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000874 	.word	0x20000874

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_Delay+0x44>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffde 	bl	800108c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <__NVIC_SetPriorityGrouping+0x40>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	4313      	orrs	r3, r2
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	@ (800112c <__NVIC_SetPriorityGrouping+0x40>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	05fa0000 	.word	0x05fa0000

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	@ (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	@ (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff4c 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126e:	f7ff ff61 	bl	8001134 <__NVIC_GetPriorityGrouping>
 8001272:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	6978      	ldr	r0, [r7, #20]
 800127a:	f7ff ffb1 	bl	80011e0 <NVIC_EncodePriority>
 800127e:	4602      	mov	r2, r0
 8001280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff80 	bl	800118c <__NVIC_SetPriority>
}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff54 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e086      	b.n	80013d0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d106      	bne.n	80012da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2220      	movs	r2, #32
 80012d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff fc4d 	bl	8000b74 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	4b3f      	ldr	r3, [pc, #252]	@ (80013d8 <HAL_ETH_Init+0x128>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	4a3e      	ldr	r2, [pc, #248]	@ (80013d8 <HAL_ETH_Init+0x128>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <HAL_ETH_Init+0x128>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012f2:	4b3a      	ldr	r3, [pc, #232]	@ (80013dc <HAL_ETH_Init+0x12c>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4a39      	ldr	r2, [pc, #228]	@ (80013dc <HAL_ETH_Init+0x12c>)
 80012f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80012fc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012fe:	4b37      	ldr	r3, [pc, #220]	@ (80013dc <HAL_ETH_Init+0x12c>)
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4935      	ldr	r1, [pc, #212]	@ (80013dc <HAL_ETH_Init+0x12c>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800130c:	4b33      	ldr	r3, [pc, #204]	@ (80013dc <HAL_ETH_Init+0x12c>)
 800130e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001326:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001328:	f7ff feb0 	bl	800108c <HAL_GetTick>
 800132c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800132e:	e011      	b.n	8001354 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001330:	f7ff feac 	bl	800108c <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800133e:	d909      	bls.n	8001354 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2204      	movs	r2, #4
 8001344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	22e0      	movs	r2, #224	@ 0xe0
 800134c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e03d      	b.n	80013d0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1e4      	bne.n	8001330 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f97a 	bl	8001660 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 fa25 	bl	80017bc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 fa7b 	bl	800186e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	461a      	mov	r2, r3
 800137e:	2100      	movs	r1, #0
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f9e3 	bl	800174c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001394:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <HAL_ETH_Init+0x130>)
 80013a4:	430b      	orrs	r3, r1
 80013a6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80013ba:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2210      	movs	r2, #16
 80013ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40013800 	.word	0x40013800
 80013e0:	00020060 	.word	0x00020060

080013e4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4b53      	ldr	r3, [pc, #332]	@ (8001548 <ETH_SetMACConfig+0x164>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	7b9b      	ldrb	r3, [r3, #14]
 8001402:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	7c12      	ldrb	r2, [r2, #16]
 8001408:	2a00      	cmp	r2, #0
 800140a:	d102      	bne.n	8001412 <ETH_SetMACConfig+0x2e>
 800140c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001410:	e000      	b.n	8001414 <ETH_SetMACConfig+0x30>
 8001412:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001414:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	7c52      	ldrb	r2, [r2, #17]
 800141a:	2a00      	cmp	r2, #0
 800141c:	d102      	bne.n	8001424 <ETH_SetMACConfig+0x40>
 800141e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001422:	e000      	b.n	8001426 <ETH_SetMACConfig+0x42>
 8001424:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001426:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800142c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	7fdb      	ldrb	r3, [r3, #31]
 8001432:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001434:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800143a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	7f92      	ldrb	r2, [r2, #30]
 8001440:	2a00      	cmp	r2, #0
 8001442:	d102      	bne.n	800144a <ETH_SetMACConfig+0x66>
 8001444:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001448:	e000      	b.n	800144c <ETH_SetMACConfig+0x68>
 800144a:	2200      	movs	r2, #0
                        macconf->Speed |
 800144c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	7f1b      	ldrb	r3, [r3, #28]
 8001452:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001454:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800145a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	791b      	ldrb	r3, [r3, #4]
 8001460:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001462:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	f892 2020 	ldrb.w	r2, [r2, #32]
 800146a:	2a00      	cmp	r2, #0
 800146c:	d102      	bne.n	8001474 <ETH_SetMACConfig+0x90>
 800146e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001472:	e000      	b.n	8001476 <ETH_SetMACConfig+0x92>
 8001474:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001476:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	7bdb      	ldrb	r3, [r3, #15]
 800147c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800147e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001484:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800148c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800148e:	4313      	orrs	r3, r2
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f7ff fdfc 	bl	80010a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80014c2:	4013      	ands	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80014d2:	2a00      	cmp	r2, #0
 80014d4:	d101      	bne.n	80014da <ETH_SetMACConfig+0xf6>
 80014d6:	2280      	movs	r2, #128	@ 0x80
 80014d8:	e000      	b.n	80014dc <ETH_SetMACConfig+0xf8>
 80014da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014dc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80014ea:	2a01      	cmp	r2, #1
 80014ec:	d101      	bne.n	80014f2 <ETH_SetMACConfig+0x10e>
 80014ee:	2208      	movs	r2, #8
 80014f0:	e000      	b.n	80014f4 <ETH_SetMACConfig+0x110>
 80014f2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014f4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80014fc:	2a01      	cmp	r2, #1
 80014fe:	d101      	bne.n	8001504 <ETH_SetMACConfig+0x120>
 8001500:	2204      	movs	r2, #4
 8001502:	e000      	b.n	8001506 <ETH_SetMACConfig+0x122>
 8001504:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001506:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800150e:	2a01      	cmp	r2, #1
 8001510:	d101      	bne.n	8001516 <ETH_SetMACConfig+0x132>
 8001512:	2202      	movs	r2, #2
 8001514:	e000      	b.n	8001518 <ETH_SetMACConfig+0x134>
 8001516:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001518:	4313      	orrs	r3, r2
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff fdb7 	bl	80010a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	fd20810f 	.word	0xfd20810f

0800154c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4b3d      	ldr	r3, [pc, #244]	@ (800165c <ETH_SetDMAConfig+0x110>)
 8001566:	4013      	ands	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	7b1b      	ldrb	r3, [r3, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <ETH_SetDMAConfig+0x2c>
 8001572:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001576:	e000      	b.n	800157a <ETH_SetDMAConfig+0x2e>
 8001578:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	7b5b      	ldrb	r3, [r3, #13]
 800157e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001580:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	7f52      	ldrb	r2, [r2, #29]
 8001586:	2a00      	cmp	r2, #0
 8001588:	d102      	bne.n	8001590 <ETH_SetDMAConfig+0x44>
 800158a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800158e:	e000      	b.n	8001592 <ETH_SetDMAConfig+0x46>
 8001590:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001592:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	7b9b      	ldrb	r3, [r3, #14]
 8001598:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800159a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	7f1b      	ldrb	r3, [r3, #28]
 80015a6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80015a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	7f9b      	ldrb	r3, [r3, #30]
 80015ae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015b0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015be:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015c0:	4313      	orrs	r3, r2
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015d0:	461a      	mov	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f7ff fd5e 	bl	80010a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015f0:	461a      	mov	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	791b      	ldrb	r3, [r3, #4]
 80015fa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001600:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001606:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800160c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001614:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001616:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800161e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001624:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800162e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001632:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001640:	2001      	movs	r0, #1
 8001642:	f7ff fd2f 	bl	80010a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	f8de3f23 	.word	0xf8de3f23

08001660 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0a6      	sub	sp, #152	@ 0x98
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001668:	2301      	movs	r3, #1
 800166a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800166e:	2301      	movs	r3, #1
 8001670:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001674:	2300      	movs	r3, #0
 8001676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800168a:	2301      	movs	r3, #1
 800168c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001690:	2301      	movs	r3, #1
 8001692:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016a2:	2300      	movs	r3, #0
 80016a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016de:	4619      	mov	r1, r3
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fe7f 	bl	80013e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016e6:	2301      	movs	r3, #1
 80016e8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016ea:	2301      	movs	r3, #1
 80016ec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016ee:	2301      	movs	r3, #1
 80016f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016f4:	2301      	movs	r3, #1
 80016f6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800170c:	2301      	movs	r3, #1
 800170e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001712:	2301      	movs	r3, #1
 8001714:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001716:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800171a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800171c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001720:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001722:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001726:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001728:	2301      	movs	r3, #1
 800172a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800172e:	2300      	movs	r3, #0
 8001730:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	4619      	mov	r1, r3
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff05 	bl	800154c <ETH_SetDMAConfig>
}
 8001742:	bf00      	nop
 8001744:	3798      	adds	r7, #152	@ 0x98
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3305      	adds	r3, #5
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	3204      	adds	r2, #4
 8001764:	7812      	ldrb	r2, [r2, #0]
 8001766:	4313      	orrs	r3, r2
 8001768:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <ETH_MACAddressConfig+0x68>)
 800176e:	4413      	add	r3, r2
 8001770:	461a      	mov	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3303      	adds	r3, #3
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	061a      	lsls	r2, r3, #24
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3302      	adds	r3, #2
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3301      	adds	r3, #1
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	4313      	orrs	r3, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	4313      	orrs	r3, r2
 8001798:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <ETH_MACAddressConfig+0x6c>)
 800179e:	4413      	add	r3, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	6013      	str	r3, [r2, #0]
}
 80017a6:	bf00      	nop
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40028040 	.word	0x40028040
 80017b8:	40028044 	.word	0x40028044

080017bc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	e03e      	b.n	8001848 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68d9      	ldr	r1, [r3, #12]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	3206      	adds	r2, #6
 80017fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d80c      	bhi.n	800182c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68d9      	ldr	r1, [r3, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	461a      	mov	r2, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	e004      	b.n	8001836 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	461a      	mov	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d9bd      	bls.n	80017ca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001860:	611a      	str	r2, [r3, #16]
}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	e048      	b.n	800190e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6919      	ldr	r1, [r3, #16]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2200      	movs	r2, #0
 80018b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80018b8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	3212      	adds	r2, #18
 80018da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d80c      	bhi.n	80018fe <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6919      	ldr	r1, [r3, #16]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	e004      	b.n	8001908 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	461a      	mov	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3301      	adds	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d9b3      	bls.n	800187c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800193e:	60da      	str	r2, [r3, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	@ 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e175      	b.n	8001c58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	429a      	cmp	r2, r3
 8001986:	f040 8164 	bne.w	8001c52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d005      	beq.n	80019a2 <HAL_GPIO_Init+0x56>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d130      	bne.n	8001a04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d017      	beq.n	8001a40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d123      	bne.n	8001a94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	69b9      	ldr	r1, [r7, #24]
 8001a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80be 	beq.w	8001c52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	4b66      	ldr	r3, [pc, #408]	@ (8001c70 <HAL_GPIO_Init+0x324>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	4a65      	ldr	r2, [pc, #404]	@ (8001c70 <HAL_GPIO_Init+0x324>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ae2:	4b63      	ldr	r3, [pc, #396]	@ (8001c70 <HAL_GPIO_Init+0x324>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001aee:	4a61      	ldr	r2, [pc, #388]	@ (8001c74 <HAL_GPIO_Init+0x328>)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a58      	ldr	r2, [pc, #352]	@ (8001c78 <HAL_GPIO_Init+0x32c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d037      	beq.n	8001b8a <HAL_GPIO_Init+0x23e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a57      	ldr	r2, [pc, #348]	@ (8001c7c <HAL_GPIO_Init+0x330>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d031      	beq.n	8001b86 <HAL_GPIO_Init+0x23a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a56      	ldr	r2, [pc, #344]	@ (8001c80 <HAL_GPIO_Init+0x334>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d02b      	beq.n	8001b82 <HAL_GPIO_Init+0x236>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a55      	ldr	r2, [pc, #340]	@ (8001c84 <HAL_GPIO_Init+0x338>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d025      	beq.n	8001b7e <HAL_GPIO_Init+0x232>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a54      	ldr	r2, [pc, #336]	@ (8001c88 <HAL_GPIO_Init+0x33c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d01f      	beq.n	8001b7a <HAL_GPIO_Init+0x22e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a53      	ldr	r2, [pc, #332]	@ (8001c8c <HAL_GPIO_Init+0x340>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d019      	beq.n	8001b76 <HAL_GPIO_Init+0x22a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a52      	ldr	r2, [pc, #328]	@ (8001c90 <HAL_GPIO_Init+0x344>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0x226>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a51      	ldr	r2, [pc, #324]	@ (8001c94 <HAL_GPIO_Init+0x348>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00d      	beq.n	8001b6e <HAL_GPIO_Init+0x222>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a50      	ldr	r2, [pc, #320]	@ (8001c98 <HAL_GPIO_Init+0x34c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d007      	beq.n	8001b6a <HAL_GPIO_Init+0x21e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4f      	ldr	r2, [pc, #316]	@ (8001c9c <HAL_GPIO_Init+0x350>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_GPIO_Init+0x21a>
 8001b62:	2309      	movs	r3, #9
 8001b64:	e012      	b.n	8001b8c <HAL_GPIO_Init+0x240>
 8001b66:	230a      	movs	r3, #10
 8001b68:	e010      	b.n	8001b8c <HAL_GPIO_Init+0x240>
 8001b6a:	2308      	movs	r3, #8
 8001b6c:	e00e      	b.n	8001b8c <HAL_GPIO_Init+0x240>
 8001b6e:	2307      	movs	r3, #7
 8001b70:	e00c      	b.n	8001b8c <HAL_GPIO_Init+0x240>
 8001b72:	2306      	movs	r3, #6
 8001b74:	e00a      	b.n	8001b8c <HAL_GPIO_Init+0x240>
 8001b76:	2305      	movs	r3, #5
 8001b78:	e008      	b.n	8001b8c <HAL_GPIO_Init+0x240>
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x240>
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e004      	b.n	8001b8c <HAL_GPIO_Init+0x240>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x240>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x240>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	f002 0203 	and.w	r2, r2, #3
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	4093      	lsls	r3, r2
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b9c:	4935      	ldr	r1, [pc, #212]	@ (8001c74 <HAL_GPIO_Init+0x328>)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001baa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca0 <HAL_GPIO_Init+0x354>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bce:	4a34      	ldr	r2, [pc, #208]	@ (8001ca0 <HAL_GPIO_Init+0x354>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd4:	4b32      	ldr	r3, [pc, #200]	@ (8001ca0 <HAL_GPIO_Init+0x354>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf8:	4a29      	ldr	r2, [pc, #164]	@ (8001ca0 <HAL_GPIO_Init+0x354>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bfe:	4b28      	ldr	r3, [pc, #160]	@ (8001ca0 <HAL_GPIO_Init+0x354>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c22:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca0 <HAL_GPIO_Init+0x354>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <HAL_GPIO_Init+0x354>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ca0 <HAL_GPIO_Init+0x354>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	f67f ae86 	bls.w	800196c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3724      	adds	r7, #36	@ 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40013800 	.word	0x40013800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40020c00 	.word	0x40020c00
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40021400 	.word	0x40021400
 8001c90:	40021800 	.word	0x40021800
 8001c94:	40021c00 	.word	0x40021c00
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	40022400 	.word	0x40022400
 8001ca0:	40013c00 	.word	0x40013c00

08001ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	807b      	strh	r3, [r7, #2]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cb4:	787b      	ldrb	r3, [r7, #1]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cc0:	e003      	b.n	8001cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cc2:	887b      	ldrh	r3, [r7, #2]
 8001cc4:	041a      	lsls	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	619a      	str	r2, [r3, #24]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ce8:	887a      	ldrh	r2, [r7, #2]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	041a      	lsls	r2, r3, #16
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	619a      	str	r2, [r3, #24]
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d16:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d22:	4a05      	ldr	r2, [pc, #20]	@ (8001d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fe38 	bl	80009a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40013c00 	.word	0x40013c00

08001d3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e108      	b.n	8001f60 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d106      	bne.n	8001d6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff f81b 	bl	8000da4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2203      	movs	r2, #3
 8001d72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d7c:	d102      	bne.n	8001d84 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f002 fb1f 	bl	80043cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7c1a      	ldrb	r2, [r3, #16]
 8001d96:	f88d 2000 	strb.w	r2, [sp]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d9e:	f002 fabb 	bl	8004318 <USB_CoreInit>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0d5      	b.n	8001f60 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 fb17 	bl	80043ee <USB_SetCurrentMode>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0c6      	b.n	8001f60 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	e04a      	b.n	8001e6e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	3315      	adds	r3, #21
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3314      	adds	r3, #20
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	b298      	uxth	r0, r3
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	332e      	adds	r3, #46	@ 0x2e
 8001e14:	4602      	mov	r2, r0
 8001e16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	3318      	adds	r3, #24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	331c      	adds	r3, #28
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3320      	adds	r3, #32
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	3324      	adds	r3, #36	@ 0x24
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	791b      	ldrb	r3, [r3, #4]
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d3af      	bcc.n	8001dd8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e044      	b.n	8001f08 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	3301      	adds	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	791b      	ldrb	r3, [r3, #4]
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d3b5      	bcc.n	8001e7e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7c1a      	ldrb	r2, [r3, #16]
 8001f1a:	f88d 2000 	strb.w	r2, [sp]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f22:	f002 fab1 	bl	8004488 <USB_DevInit>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e013      	b.n	8001f60 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	7b1b      	ldrb	r3, [r3, #12]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d102      	bne.n	8001f54 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f80a 	bl	8001f68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 fc6c 	bl	8004836 <USB_DevDisconnect>

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <HAL_PCDEx_ActivateLPM+0x44>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	10000003 	.word	0x10000003

08001fb0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a04      	ldr	r2, [pc, #16]	@ (8001fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40007000 	.word	0x40007000

08001fd0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	4b23      	ldr	r3, [pc, #140]	@ (8002068 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	4a22      	ldr	r2, [pc, #136]	@ (8002068 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe6:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800206c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ffe:	f7ff f845 	bl	800108c <HAL_GetTick>
 8002002:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002004:	e009      	b.n	800201a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002006:	f7ff f841 	bl	800108c <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002014:	d901      	bls.n	800201a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e022      	b.n	8002060 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800201a:	4b14      	ldr	r3, [pc, #80]	@ (800206c <HAL_PWREx_EnableOverDrive+0x9c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002026:	d1ee      	bne.n	8002006 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002028:	4b10      	ldr	r3, [pc, #64]	@ (800206c <HAL_PWREx_EnableOverDrive+0x9c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0f      	ldr	r2, [pc, #60]	@ (800206c <HAL_PWREx_EnableOverDrive+0x9c>)
 800202e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002032:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002034:	f7ff f82a 	bl	800108c <HAL_GetTick>
 8002038:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800203a:	e009      	b.n	8002050 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800203c:	f7ff f826 	bl	800108c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800204a:	d901      	bls.n	8002050 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e007      	b.n	8002060 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800205c:	d1ee      	bne.n	800203c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40023800 	.word	0x40023800
 800206c:	40007000 	.word	0x40007000

08002070 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002078:	2300      	movs	r3, #0
 800207a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e29b      	b.n	80025be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8087 	beq.w	80021a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002094:	4b96      	ldr	r3, [pc, #600]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	2b04      	cmp	r3, #4
 800209e:	d00c      	beq.n	80020ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a0:	4b93      	ldr	r3, [pc, #588]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d112      	bne.n	80020d2 <HAL_RCC_OscConfig+0x62>
 80020ac:	4b90      	ldr	r3, [pc, #576]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020b8:	d10b      	bne.n	80020d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ba:	4b8d      	ldr	r3, [pc, #564]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d06c      	beq.n	80021a0 <HAL_RCC_OscConfig+0x130>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d168      	bne.n	80021a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e275      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020da:	d106      	bne.n	80020ea <HAL_RCC_OscConfig+0x7a>
 80020dc:	4b84      	ldr	r3, [pc, #528]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a83      	ldr	r2, [pc, #524]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80020e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	e02e      	b.n	8002148 <HAL_RCC_OscConfig+0xd8>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0x9c>
 80020f2:	4b7f      	ldr	r3, [pc, #508]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a7e      	ldr	r2, [pc, #504]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80020f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	4b7c      	ldr	r3, [pc, #496]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a7b      	ldr	r2, [pc, #492]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002104:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e01d      	b.n	8002148 <HAL_RCC_OscConfig+0xd8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0xc0>
 8002116:	4b76      	ldr	r3, [pc, #472]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a75      	ldr	r2, [pc, #468]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 800211c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b73      	ldr	r3, [pc, #460]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a72      	ldr	r2, [pc, #456]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0xd8>
 8002130:	4b6f      	ldr	r3, [pc, #444]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a6e      	ldr	r2, [pc, #440]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b6c      	ldr	r3, [pc, #432]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a6b      	ldr	r2, [pc, #428]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe ff9c 	bl	800108c <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7fe ff98 	bl	800108c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	@ 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e229      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	4b61      	ldr	r3, [pc, #388]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0xe8>
 8002176:	e014      	b.n	80021a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7fe ff88 	bl	800108c <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002180:	f7fe ff84 	bl	800108c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	@ 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e215      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002192:	4b57      	ldr	r3, [pc, #348]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x110>
 800219e:	e000      	b.n	80021a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d069      	beq.n	8002282 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ae:	4b50      	ldr	r3, [pc, #320]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ba:	4b4d      	ldr	r3, [pc, #308]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d11c      	bne.n	8002200 <HAL_RCC_OscConfig+0x190>
 80021c6:	4b4a      	ldr	r3, [pc, #296]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d116      	bne.n	8002200 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d2:	4b47      	ldr	r3, [pc, #284]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_RCC_OscConfig+0x17a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d001      	beq.n	80021ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e1e9      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ea:	4b41      	ldr	r3, [pc, #260]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	493d      	ldr	r1, [pc, #244]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	e040      	b.n	8002282 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d023      	beq.n	8002250 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002208:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a38      	ldr	r2, [pc, #224]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7fe ff3a 	bl	800108c <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221c:	f7fe ff36 	bl	800108c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e1c7      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222e:	4b30      	ldr	r3, [pc, #192]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4929      	ldr	r1, [pc, #164]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
 800224e:	e018      	b.n	8002282 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a26      	ldr	r2, [pc, #152]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe ff16 	bl	800108c <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002264:	f7fe ff12 	bl	800108c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1a3      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d038      	beq.n	8002300 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d019      	beq.n	80022ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002296:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 8002298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800229a:	4a15      	ldr	r2, [pc, #84]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a2:	f7fe fef3 	bl	800108c <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022aa:	f7fe feef 	bl	800108c <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e180      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022bc:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80022be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x23a>
 80022c8:	e01a      	b.n	8002300 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ca:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80022cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ce:	4a08      	ldr	r2, [pc, #32]	@ (80022f0 <HAL_RCC_OscConfig+0x280>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7fe fed9 	bl	800108c <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022de:	f7fe fed5 	bl	800108c <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d903      	bls.n	80022f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e166      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
 80022f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	4b92      	ldr	r3, [pc, #584]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80022f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1ee      	bne.n	80022de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a4 	beq.w	8002456 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230e:	4b8c      	ldr	r3, [pc, #560]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10d      	bne.n	8002336 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	4b89      	ldr	r3, [pc, #548]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	4a88      	ldr	r2, [pc, #544]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002324:	6413      	str	r3, [r2, #64]	@ 0x40
 8002326:	4b86      	ldr	r3, [pc, #536]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002332:	2301      	movs	r3, #1
 8002334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002336:	4b83      	ldr	r3, [pc, #524]	@ (8002544 <HAL_RCC_OscConfig+0x4d4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d118      	bne.n	8002374 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002342:	4b80      	ldr	r3, [pc, #512]	@ (8002544 <HAL_RCC_OscConfig+0x4d4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7f      	ldr	r2, [pc, #508]	@ (8002544 <HAL_RCC_OscConfig+0x4d4>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234e:	f7fe fe9d 	bl	800108c <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002356:	f7fe fe99 	bl	800108c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b64      	cmp	r3, #100	@ 0x64
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e12a      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002368:	4b76      	ldr	r3, [pc, #472]	@ (8002544 <HAL_RCC_OscConfig+0x4d4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x31a>
 800237c:	4b70      	ldr	r3, [pc, #448]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002380:	4a6f      	ldr	r2, [pc, #444]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6713      	str	r3, [r2, #112]	@ 0x70
 8002388:	e02d      	b.n	80023e6 <HAL_RCC_OscConfig+0x376>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0x33c>
 8002392:	4b6b      	ldr	r3, [pc, #428]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002396:	4a6a      	ldr	r2, [pc, #424]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6713      	str	r3, [r2, #112]	@ 0x70
 800239e:	4b68      	ldr	r3, [pc, #416]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a2:	4a67      	ldr	r2, [pc, #412]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80023a4:	f023 0304 	bic.w	r3, r3, #4
 80023a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023aa:	e01c      	b.n	80023e6 <HAL_RCC_OscConfig+0x376>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b05      	cmp	r3, #5
 80023b2:	d10c      	bne.n	80023ce <HAL_RCC_OscConfig+0x35e>
 80023b4:	4b62      	ldr	r3, [pc, #392]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b8:	4a61      	ldr	r2, [pc, #388]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80023ba:	f043 0304 	orr.w	r3, r3, #4
 80023be:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c0:	4b5f      	ldr	r3, [pc, #380]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c4:	4a5e      	ldr	r2, [pc, #376]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80023cc:	e00b      	b.n	80023e6 <HAL_RCC_OscConfig+0x376>
 80023ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023da:	4b59      	ldr	r3, [pc, #356]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023de:	4a58      	ldr	r2, [pc, #352]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80023e0:	f023 0304 	bic.w	r3, r3, #4
 80023e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d015      	beq.n	800241a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ee:	f7fe fe4d 	bl	800108c <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7fe fe49 	bl	800108c <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e0d8      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240c:	4b4c      	ldr	r3, [pc, #304]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0ee      	beq.n	80023f6 <HAL_RCC_OscConfig+0x386>
 8002418:	e014      	b.n	8002444 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241a:	f7fe fe37 	bl	800108c <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002420:	e00a      	b.n	8002438 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7fe fe33 	bl	800108c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0c2      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002438:	4b41      	ldr	r3, [pc, #260]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1ee      	bne.n	8002422 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d105      	bne.n	8002456 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244a:	4b3d      	ldr	r3, [pc, #244]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	4a3c      	ldr	r2, [pc, #240]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 8002450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002454:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80ae 	beq.w	80025bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002460:	4b37      	ldr	r3, [pc, #220]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b08      	cmp	r3, #8
 800246a:	d06d      	beq.n	8002548 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d14b      	bne.n	800250c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002474:	4b32      	ldr	r3, [pc, #200]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a31      	ldr	r2, [pc, #196]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 800247a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800247e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe fe04 	bl	800108c <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe fe00 	bl	800108c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e091      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249a:	4b29      	ldr	r3, [pc, #164]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69da      	ldr	r2, [r3, #28]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	019b      	lsls	r3, r3, #6
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	3b01      	subs	r3, #1
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d0:	071b      	lsls	r3, r3, #28
 80024d2:	491b      	ldr	r1, [pc, #108]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a18      	ldr	r2, [pc, #96]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 80024de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7fe fdd2 	bl	800108c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ec:	f7fe fdce 	bl	800108c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e05f      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b10      	ldr	r3, [pc, #64]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x47c>
 800250a:	e057      	b.n	80025bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250c:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0b      	ldr	r2, [pc, #44]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 8002512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe fdb8 	bl	800108c <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fdb4 	bl	800108c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e045      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	4b03      	ldr	r3, [pc, #12]	@ (8002540 <HAL_RCC_OscConfig+0x4d0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x4b0>
 800253e:	e03d      	b.n	80025bc <HAL_RCC_OscConfig+0x54c>
 8002540:	40023800 	.word	0x40023800
 8002544:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002548:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <HAL_RCC_OscConfig+0x558>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d030      	beq.n	80025b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d129      	bne.n	80025b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d122      	bne.n	80025b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002578:	4013      	ands	r3, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800257e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002580:	4293      	cmp	r3, r2
 8002582:	d119      	bne.n	80025b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	3b01      	subs	r3, #1
 8002592:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d10f      	bne.n	80025b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800

080025cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0d0      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d910      	bls.n	8002614 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b67      	ldr	r3, [pc, #412]	@ (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 020f 	bic.w	r2, r3, #15
 80025fa:	4965      	ldr	r1, [pc, #404]	@ (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b63      	ldr	r3, [pc, #396]	@ (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0b8      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800262c:	4b59      	ldr	r3, [pc, #356]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a58      	ldr	r2, [pc, #352]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 8002632:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002636:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002644:	4b53      	ldr	r3, [pc, #332]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a52      	ldr	r2, [pc, #328]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 800264a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800264e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b50      	ldr	r3, [pc, #320]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	494d      	ldr	r1, [pc, #308]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d040      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b47      	ldr	r3, [pc, #284]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d115      	bne.n	80026ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e07f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	4b41      	ldr	r3, [pc, #260]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e073      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e06b      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ae:	4b39      	ldr	r3, [pc, #228]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4936      	ldr	r1, [pc, #216]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c0:	f7fe fce4 	bl	800108c <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	e00a      	b.n	80026de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7fe fce0 	bl	800108c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e053      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 020c 	and.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1eb      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b27      	ldr	r3, [pc, #156]	@ (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d210      	bcs.n	8002720 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 020f 	bic.w	r2, r3, #15
 8002706:	4922      	ldr	r1, [pc, #136]	@ (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b20      	ldr	r3, [pc, #128]	@ (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e032      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4916      	ldr	r1, [pc, #88]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800274a:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	490e      	ldr	r1, [pc, #56]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800275e:	f000 f821 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002762:	4602      	mov	r2, r0
 8002764:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	490a      	ldr	r1, [pc, #40]	@ (8002798 <HAL_RCC_ClockConfig+0x1cc>)
 8002770:	5ccb      	ldrb	r3, [r1, r3]
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	4a09      	ldr	r2, [pc, #36]	@ (800279c <HAL_RCC_ClockConfig+0x1d0>)
 8002778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800277a:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <HAL_RCC_ClockConfig+0x1d4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fb8a 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023c00 	.word	0x40023c00
 8002794:	40023800 	.word	0x40023800
 8002798:	080084e0 	.word	0x080084e0
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000004 	.word	0x20000004

080027a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a8:	b094      	sub	sp, #80	@ 0x50
 80027aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80027b0:	2300      	movs	r3, #0
 80027b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027b4:	2300      	movs	r3, #0
 80027b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027bc:	4b79      	ldr	r3, [pc, #484]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d00d      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x40>
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	f200 80e1 	bhi.w	8002990 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x34>
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d003      	beq.n	80027de <HAL_RCC_GetSysClockFreq+0x3a>
 80027d6:	e0db      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d8:	4b73      	ldr	r3, [pc, #460]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80027da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027dc:	e0db      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027de:	4b73      	ldr	r3, [pc, #460]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x208>)
 80027e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027e2:	e0d8      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e4:	4b6f      	ldr	r3, [pc, #444]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027ee:	4b6d      	ldr	r3, [pc, #436]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d063      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fa:	4b6a      	ldr	r3, [pc, #424]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	2200      	movs	r2, #0
 8002802:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002804:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800280c:	633b      	str	r3, [r7, #48]	@ 0x30
 800280e:	2300      	movs	r3, #0
 8002810:	637b      	str	r3, [r7, #52]	@ 0x34
 8002812:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002816:	4622      	mov	r2, r4
 8002818:	462b      	mov	r3, r5
 800281a:	f04f 0000 	mov.w	r0, #0
 800281e:	f04f 0100 	mov.w	r1, #0
 8002822:	0159      	lsls	r1, r3, #5
 8002824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002828:	0150      	lsls	r0, r2, #5
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4621      	mov	r1, r4
 8002830:	1a51      	subs	r1, r2, r1
 8002832:	6139      	str	r1, [r7, #16]
 8002834:	4629      	mov	r1, r5
 8002836:	eb63 0301 	sbc.w	r3, r3, r1
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002848:	4659      	mov	r1, fp
 800284a:	018b      	lsls	r3, r1, #6
 800284c:	4651      	mov	r1, sl
 800284e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002852:	4651      	mov	r1, sl
 8002854:	018a      	lsls	r2, r1, #6
 8002856:	4651      	mov	r1, sl
 8002858:	ebb2 0801 	subs.w	r8, r2, r1
 800285c:	4659      	mov	r1, fp
 800285e:	eb63 0901 	sbc.w	r9, r3, r1
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800286e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002876:	4690      	mov	r8, r2
 8002878:	4699      	mov	r9, r3
 800287a:	4623      	mov	r3, r4
 800287c:	eb18 0303 	adds.w	r3, r8, r3
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	462b      	mov	r3, r5
 8002884:	eb49 0303 	adc.w	r3, r9, r3
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002896:	4629      	mov	r1, r5
 8002898:	024b      	lsls	r3, r1, #9
 800289a:	4621      	mov	r1, r4
 800289c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028a0:	4621      	mov	r1, r4
 80028a2:	024a      	lsls	r2, r1, #9
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028aa:	2200      	movs	r2, #0
 80028ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028b4:	f7fd fccc 	bl	8000250 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4613      	mov	r3, r2
 80028be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028c0:	e058      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c2:	4b38      	ldr	r3, [pc, #224]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	2200      	movs	r2, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	4611      	mov	r1, r2
 80028ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028d2:	623b      	str	r3, [r7, #32]
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028dc:	4642      	mov	r2, r8
 80028de:	464b      	mov	r3, r9
 80028e0:	f04f 0000 	mov.w	r0, #0
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	0159      	lsls	r1, r3, #5
 80028ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ee:	0150      	lsls	r0, r2, #5
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4641      	mov	r1, r8
 80028f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80028fa:	4649      	mov	r1, r9
 80028fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800290c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002910:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002914:	ebb2 040a 	subs.w	r4, r2, sl
 8002918:	eb63 050b 	sbc.w	r5, r3, fp
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	00eb      	lsls	r3, r5, #3
 8002926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800292a:	00e2      	lsls	r2, r4, #3
 800292c:	4614      	mov	r4, r2
 800292e:	461d      	mov	r5, r3
 8002930:	4643      	mov	r3, r8
 8002932:	18e3      	adds	r3, r4, r3
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	464b      	mov	r3, r9
 8002938:	eb45 0303 	adc.w	r3, r5, r3
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800294a:	4629      	mov	r1, r5
 800294c:	028b      	lsls	r3, r1, #10
 800294e:	4621      	mov	r1, r4
 8002950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002954:	4621      	mov	r1, r4
 8002956:	028a      	lsls	r2, r1, #10
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800295e:	2200      	movs	r2, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	61fa      	str	r2, [r7, #28]
 8002964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002968:	f7fd fc72 	bl	8000250 <__aeabi_uldivmod>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4613      	mov	r3, r2
 8002972:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002974:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	3301      	adds	r3, #1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002984:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800298e:	e002      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002992:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002998:	4618      	mov	r0, r3
 800299a:	3750      	adds	r7, #80	@ 0x50
 800299c:	46bd      	mov	sp, r7
 800299e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	007a1200 	.word	0x007a1200

080029b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000000 	.word	0x20000000

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029cc:	f7ff fff0 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0a9b      	lsrs	r3, r3, #10
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	@ (80029ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	080084f0 	.word	0x080084f0

080029f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029f4:	f7ff ffdc 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0b5b      	lsrs	r3, r3, #13
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4903      	ldr	r1, [pc, #12]	@ (8002a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40023800 	.word	0x40023800
 8002a14:	080084f0 	.word	0x080084f0

08002a18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	220f      	movs	r2, #15
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_RCC_GetClockConfig+0x5c>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0203 	and.w	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a34:	4b0f      	ldr	r3, [pc, #60]	@ (8002a74 <HAL_RCC_GetClockConfig+0x5c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a40:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <HAL_RCC_GetClockConfig+0x5c>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a4c:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	08db      	lsrs	r3, r3, #3
 8002a52:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a5a:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <HAL_RCC_GetClockConfig+0x60>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	601a      	str	r2, [r3, #0]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40023c00 	.word	0x40023c00

08002a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d012      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002aa4:	4b69      	ldr	r3, [pc, #420]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a68      	ldr	r2, [pc, #416]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aaa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002aae:	6093      	str	r3, [r2, #8]
 8002ab0:	4b66      	ldr	r3, [pc, #408]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab8:	4964      	ldr	r1, [pc, #400]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d017      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ad6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002adc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae4:	4959      	ldr	r1, [pc, #356]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002af4:	d101      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d017      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b12:	4b4e      	ldr	r3, [pc, #312]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b18:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	494a      	ldr	r1, [pc, #296]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b30:	d101      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 808b 	beq.w	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b60:	4b3a      	ldr	r3, [pc, #232]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	4a39      	ldr	r2, [pc, #228]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6c:	4b37      	ldr	r3, [pc, #220]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b78:	4b35      	ldr	r3, [pc, #212]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a34      	ldr	r2, [pc, #208]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe fa82 	bl	800108c <HAL_GetTick>
 8002b88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8c:	f7fe fa7e 	bl	800108c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	@ 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e38f      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002baa:	4b28      	ldr	r3, [pc, #160]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d035      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d02e      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bc8:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bdc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bde:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bea:	4a18      	ldr	r2, [pc, #96]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bf0:	4b16      	ldr	r3, [pc, #88]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d114      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fa46 	bl	800108c <HAL_GetTick>
 8002c00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c02:	e00a      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c04:	f7fe fa42 	bl	800108c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e351      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0ee      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c32:	d111      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c34:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c40:	4b04      	ldr	r3, [pc, #16]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c42:	400b      	ands	r3, r1
 8002c44:	4901      	ldr	r1, [pc, #4]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40007000 	.word	0x40007000
 8002c54:	0ffffcff 	.word	0x0ffffcff
 8002c58:	4bac      	ldr	r3, [pc, #688]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4aab      	ldr	r2, [pc, #684]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002c62:	6093      	str	r3, [r2, #8]
 8002c64:	4ba9      	ldr	r3, [pc, #676]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c70:	49a6      	ldr	r1, [pc, #664]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c82:	4ba2      	ldr	r3, [pc, #648]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c88:	4aa0      	ldr	r2, [pc, #640]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c92:	4b9e      	ldr	r3, [pc, #632]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c94:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9c:	499b      	ldr	r1, [pc, #620]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cb0:	4b96      	ldr	r3, [pc, #600]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cbe:	4993      	ldr	r1, [pc, #588]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cd2:	4b8e      	ldr	r3, [pc, #568]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ce0:	498a      	ldr	r1, [pc, #552]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cf4:	4b85      	ldr	r3, [pc, #532]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d02:	4982      	ldr	r1, [pc, #520]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d16:	4b7d      	ldr	r3, [pc, #500]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d24:	4979      	ldr	r1, [pc, #484]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d38:	4b74      	ldr	r3, [pc, #464]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	4971      	ldr	r1, [pc, #452]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d5a:	4b6c      	ldr	r3, [pc, #432]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d60:	f023 020c 	bic.w	r2, r3, #12
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d68:	4968      	ldr	r1, [pc, #416]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d7c:	4b63      	ldr	r3, [pc, #396]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d82:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8a:	4960      	ldr	r1, [pc, #384]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dac:	4957      	ldr	r1, [pc, #348]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dc0:	4b52      	ldr	r3, [pc, #328]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dce:	494f      	ldr	r1, [pc, #316]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002de2:	4b4a      	ldr	r3, [pc, #296]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df0:	4946      	ldr	r1, [pc, #280]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e04:	4b41      	ldr	r3, [pc, #260]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e12:	493e      	ldr	r1, [pc, #248]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e26:	4b39      	ldr	r3, [pc, #228]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e34:	4935      	ldr	r1, [pc, #212]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e48:	4b30      	ldr	r3, [pc, #192]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e56:	492d      	ldr	r1, [pc, #180]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d011      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e6a:	4b28      	ldr	r3, [pc, #160]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e70:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e78:	4924      	ldr	r1, [pc, #144]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e88:	d101      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eaa:	4b18      	ldr	r3, [pc, #96]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb8:	4914      	ldr	r1, [pc, #80]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00b      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002edc:	490b      	ldr	r1, [pc, #44]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00f      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ef0:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f00:	4902      	ldr	r1, [pc, #8]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f08:	e002      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00b      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f1c:	4b8a      	ldr	r3, [pc, #552]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2c:	4986      	ldr	r1, [pc, #536]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f40:	4b81      	ldr	r3, [pc, #516]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f46:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f50:	497d      	ldr	r1, [pc, #500]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d006      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 80d6 	beq.w	8003118 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f6c:	4b76      	ldr	r3, [pc, #472]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a75      	ldr	r2, [pc, #468]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f78:	f7fe f888 	bl	800108c <HAL_GetTick>
 8002f7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f80:	f7fe f884 	bl	800108c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	@ 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e195      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f92:	4b6d      	ldr	r3, [pc, #436]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d021      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d11d      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fb2:	4b65      	ldr	r3, [pc, #404]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fc0:	4b61      	ldr	r3, [pc, #388]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fc6:	0e1b      	lsrs	r3, r3, #24
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	019a      	lsls	r2, r3, #6
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	061b      	lsls	r3, r3, #24
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	071b      	lsls	r3, r3, #28
 8002fe6:	4958      	ldr	r1, [pc, #352]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800300c:	2b00      	cmp	r3, #0
 800300e:	d02e      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003018:	d129      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800301a:	4b4b      	ldr	r3, [pc, #300]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003028:	4b47      	ldr	r3, [pc, #284]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800302e:	0f1b      	lsrs	r3, r3, #28
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	019a      	lsls	r2, r3, #6
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	041b      	lsls	r3, r3, #16
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	061b      	lsls	r3, r3, #24
 8003048:	431a      	orrs	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	071b      	lsls	r3, r3, #28
 800304e:	493e      	ldr	r1, [pc, #248]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003056:	4b3c      	ldr	r3, [pc, #240]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800305c:	f023 021f 	bic.w	r2, r3, #31
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	3b01      	subs	r3, #1
 8003066:	4938      	ldr	r1, [pc, #224]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01d      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800307a:	4b33      	ldr	r3, [pc, #204]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800307c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003080:	0e1b      	lsrs	r3, r3, #24
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003088:	4b2f      	ldr	r3, [pc, #188]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800308a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800308e:	0f1b      	lsrs	r3, r3, #28
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	019a      	lsls	r2, r3, #6
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	431a      	orrs	r2, r3
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	061b      	lsls	r3, r3, #24
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	071b      	lsls	r3, r3, #28
 80030ae:	4926      	ldr	r1, [pc, #152]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d011      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	019a      	lsls	r2, r3, #6
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	071b      	lsls	r3, r3, #28
 80030de:	491a      	ldr	r1, [pc, #104]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030e6:	4b18      	ldr	r3, [pc, #96]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a17      	ldr	r2, [pc, #92]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f2:	f7fd ffcb 	bl	800108c <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030fa:	f7fd ffc7 	bl	800108c <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b64      	cmp	r3, #100	@ 0x64
 8003106:	d901      	bls.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e0d8      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800310c:	4b0e      	ldr	r3, [pc, #56]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2b01      	cmp	r3, #1
 800311c:	f040 80ce 	bne.w	80032bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003120:	4b09      	ldr	r3, [pc, #36]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a08      	ldr	r2, [pc, #32]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003126:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800312a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800312c:	f7fd ffae 	bl	800108c <HAL_GetTick>
 8003130:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003132:	e00b      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003134:	f7fd ffaa 	bl	800108c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b64      	cmp	r3, #100	@ 0x64
 8003140:	d904      	bls.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e0bb      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800314c:	4b5e      	ldr	r3, [pc, #376]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003158:	d0ec      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003176:	2b00      	cmp	r3, #0
 8003178:	d02e      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d12a      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003182:	4b51      	ldr	r3, [pc, #324]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003190:	4b4d      	ldr	r3, [pc, #308]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003196:	0f1b      	lsrs	r3, r3, #28
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	019a      	lsls	r2, r3, #6
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	041b      	lsls	r3, r3, #16
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	071b      	lsls	r3, r3, #28
 80031b6:	4944      	ldr	r1, [pc, #272]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031be:	4b42      	ldr	r3, [pc, #264]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031c4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	3b01      	subs	r3, #1
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	493d      	ldr	r1, [pc, #244]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d022      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031ec:	d11d      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ee:	4b36      	ldr	r3, [pc, #216]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f4:	0e1b      	lsrs	r3, r3, #24
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031fc:	4b32      	ldr	r3, [pc, #200]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003202:	0f1b      	lsrs	r3, r3, #28
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	019a      	lsls	r2, r3, #6
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	431a      	orrs	r2, r3
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	061b      	lsls	r3, r3, #24
 800321c:	431a      	orrs	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	071b      	lsls	r3, r3, #28
 8003222:	4929      	ldr	r1, [pc, #164]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d028      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003236:	4b24      	ldr	r3, [pc, #144]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323c:	0e1b      	lsrs	r3, r3, #24
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003244:	4b20      	ldr	r3, [pc, #128]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324a:	0c1b      	lsrs	r3, r3, #16
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	019a      	lsls	r2, r3, #6
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	041b      	lsls	r3, r3, #16
 800325c:	431a      	orrs	r2, r3
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	061b      	lsls	r3, r3, #24
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	071b      	lsls	r3, r3, #28
 800326a:	4917      	ldr	r1, [pc, #92]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003272:	4b15      	ldr	r3, [pc, #84]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003278:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003280:	4911      	ldr	r1, [pc, #68]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003288:	4b0f      	ldr	r3, [pc, #60]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0e      	ldr	r2, [pc, #56]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003294:	f7fd fefa 	bl	800108c <HAL_GetTick>
 8003298:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800329c:	f7fd fef6 	bl	800108c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	@ 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e007      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ae:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032ba:	d1ef      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800

080032cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e049      	b.n	8003372 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f841 	bl	800337a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f000 f9e8 	bl	80036e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d001      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e054      	b.n	8003452 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a26      	ldr	r2, [pc, #152]	@ (8003460 <HAL_TIM_Base_Start_IT+0xd0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d022      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d2:	d01d      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a22      	ldr	r2, [pc, #136]	@ (8003464 <HAL_TIM_Base_Start_IT+0xd4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d018      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a21      	ldr	r2, [pc, #132]	@ (8003468 <HAL_TIM_Base_Start_IT+0xd8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d013      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1f      	ldr	r2, [pc, #124]	@ (800346c <HAL_TIM_Base_Start_IT+0xdc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00e      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003470 <HAL_TIM_Base_Start_IT+0xe0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d009      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1c      	ldr	r2, [pc, #112]	@ (8003474 <HAL_TIM_Base_Start_IT+0xe4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1b      	ldr	r2, [pc, #108]	@ (8003478 <HAL_TIM_Base_Start_IT+0xe8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d115      	bne.n	800343c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	4b19      	ldr	r3, [pc, #100]	@ (800347c <HAL_TIM_Base_Start_IT+0xec>)
 8003418:	4013      	ands	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b06      	cmp	r3, #6
 8003420:	d015      	beq.n	800344e <HAL_TIM_Base_Start_IT+0xbe>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003428:	d011      	beq.n	800344e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f042 0201 	orr.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343a:	e008      	b.n	800344e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	e000      	b.n	8003450 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40010000 	.word	0x40010000
 8003464:	40000400 	.word	0x40000400
 8003468:	40000800 	.word	0x40000800
 800346c:	40000c00 	.word	0x40000c00
 8003470:	40010400 	.word	0x40010400
 8003474:	40014000 	.word	0x40014000
 8003478:	40001800 	.word	0x40001800
 800347c:	00010007 	.word	0x00010007

08003480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d020      	beq.n	80034e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01b      	beq.n	80034e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0202 	mvn.w	r2, #2
 80034b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8e9 	bl	80036a2 <HAL_TIM_IC_CaptureCallback>
 80034d0:	e005      	b.n	80034de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f8db 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f8ec 	bl	80036b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d020      	beq.n	8003530 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01b      	beq.n	8003530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0204 	mvn.w	r2, #4
 8003500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8c3 	bl	80036a2 <HAL_TIM_IC_CaptureCallback>
 800351c:	e005      	b.n	800352a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f8b5 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f8c6 	bl	80036b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d020      	beq.n	800357c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01b      	beq.n	800357c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0208 	mvn.w	r2, #8
 800354c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2204      	movs	r2, #4
 8003552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f89d 	bl	80036a2 <HAL_TIM_IC_CaptureCallback>
 8003568:	e005      	b.n	8003576 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f88f 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8a0 	bl	80036b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b00      	cmp	r3, #0
 8003584:	d020      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01b      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0210 	mvn.w	r2, #16
 8003598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2208      	movs	r2, #8
 800359e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f877 	bl	80036a2 <HAL_TIM_IC_CaptureCallback>
 80035b4:	e005      	b.n	80035c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f869 	bl	800368e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f87a 	bl	80036b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00c      	beq.n	80035ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0201 	mvn.w	r2, #1
 80035e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd fa84 	bl	8000af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d104      	bne.n	8003600 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00c      	beq.n	800361a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f913 	bl	8003840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00c      	beq.n	800363e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362a:	2b00      	cmp	r3, #0
 800362c:	d007      	beq.n	800363e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f90b 	bl	8003854 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00c      	beq.n	8003662 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800365a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f834 	bl	80036ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00c      	beq.n	8003686 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f06f 0220 	mvn.w	r2, #32
 800367e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f8d3 	bl	800382c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a43      	ldr	r2, [pc, #268]	@ (8003800 <TIM_Base_SetConfig+0x120>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036fe:	d00f      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a40      	ldr	r2, [pc, #256]	@ (8003804 <TIM_Base_SetConfig+0x124>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00b      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a3f      	ldr	r2, [pc, #252]	@ (8003808 <TIM_Base_SetConfig+0x128>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3e      	ldr	r2, [pc, #248]	@ (800380c <TIM_Base_SetConfig+0x12c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3d      	ldr	r2, [pc, #244]	@ (8003810 <TIM_Base_SetConfig+0x130>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d108      	bne.n	8003732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a32      	ldr	r2, [pc, #200]	@ (8003800 <TIM_Base_SetConfig+0x120>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d02b      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003740:	d027      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a2f      	ldr	r2, [pc, #188]	@ (8003804 <TIM_Base_SetConfig+0x124>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d023      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2e      	ldr	r2, [pc, #184]	@ (8003808 <TIM_Base_SetConfig+0x128>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01f      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a2d      	ldr	r2, [pc, #180]	@ (800380c <TIM_Base_SetConfig+0x12c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d01b      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2c      	ldr	r2, [pc, #176]	@ (8003810 <TIM_Base_SetConfig+0x130>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d017      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2b      	ldr	r2, [pc, #172]	@ (8003814 <TIM_Base_SetConfig+0x134>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a2a      	ldr	r2, [pc, #168]	@ (8003818 <TIM_Base_SetConfig+0x138>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00f      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a29      	ldr	r2, [pc, #164]	@ (800381c <TIM_Base_SetConfig+0x13c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00b      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a28      	ldr	r2, [pc, #160]	@ (8003820 <TIM_Base_SetConfig+0x140>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a27      	ldr	r2, [pc, #156]	@ (8003824 <TIM_Base_SetConfig+0x144>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a26      	ldr	r2, [pc, #152]	@ (8003828 <TIM_Base_SetConfig+0x148>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d108      	bne.n	80037a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003800 <TIM_Base_SetConfig+0x120>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d003      	beq.n	80037d2 <TIM_Base_SetConfig+0xf2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a10      	ldr	r2, [pc, #64]	@ (8003810 <TIM_Base_SetConfig+0x130>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d103      	bne.n	80037da <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f043 0204 	orr.w	r2, r3, #4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	601a      	str	r2, [r3, #0]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40010000 	.word	0x40010000
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	40000c00 	.word	0x40000c00
 8003810:	40010400 	.word	0x40010400
 8003814:	40014000 	.word	0x40014000
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800
 8003820:	40001800 	.word	0x40001800
 8003824:	40001c00 	.word	0x40001c00
 8003828:	40002000 	.word	0x40002000

0800382c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e040      	b.n	80038fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd fa2a 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	@ 0x24
 8003894:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fb16 	bl	8003ee0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f8af 	bl	8003a18 <UART_SetConfig>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e01b      	b.n	80038fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fb95 	bl	8004024 <UART_CheckIdleState>
 80038fa:	4603      	mov	r3, r0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	@ 0x28
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003918:	2b20      	cmp	r3, #32
 800391a:	d177      	bne.n	8003a0c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_UART_Transmit+0x24>
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e070      	b.n	8003a0e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2221      	movs	r2, #33	@ 0x21
 8003938:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800393a:	f7fd fba7 	bl	800108c <HAL_GetTick>
 800393e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	88fa      	ldrh	r2, [r7, #6]
 8003944:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	88fa      	ldrh	r2, [r7, #6]
 800394c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003958:	d108      	bne.n	800396c <HAL_UART_Transmit+0x68>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	e003      	b.n	8003974 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003974:	e02f      	b.n	80039d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	2180      	movs	r1, #128	@ 0x80
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fbf7 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e03b      	b.n	8003a0e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	3302      	adds	r3, #2
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	e007      	b.n	80039c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	781a      	ldrb	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3301      	adds	r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1c9      	bne.n	8003976 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2200      	movs	r2, #0
 80039ea:	2140      	movs	r1, #64	@ 0x40
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fbc1 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d004      	beq.n	8003a02 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e005      	b.n	8003a0e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4ba6      	ldr	r3, [pc, #664]	@ (8003cdc <UART_SetConfig+0x2c4>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	6979      	ldr	r1, [r7, #20]
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a94      	ldr	r2, [pc, #592]	@ (8003ce0 <UART_SetConfig+0x2c8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d120      	bne.n	8003ad6 <UART_SetConfig+0xbe>
 8003a94:	4b93      	ldr	r3, [pc, #588]	@ (8003ce4 <UART_SetConfig+0x2cc>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d816      	bhi.n	8003ad0 <UART_SetConfig+0xb8>
 8003aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa8 <UART_SetConfig+0x90>)
 8003aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003ac5 	.word	0x08003ac5
 8003ab0:	08003abf 	.word	0x08003abf
 8003ab4:	08003acb 	.word	0x08003acb
 8003ab8:	2301      	movs	r3, #1
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e150      	b.n	8003d60 <UART_SetConfig+0x348>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	77fb      	strb	r3, [r7, #31]
 8003ac2:	e14d      	b.n	8003d60 <UART_SetConfig+0x348>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e14a      	b.n	8003d60 <UART_SetConfig+0x348>
 8003aca:	2308      	movs	r3, #8
 8003acc:	77fb      	strb	r3, [r7, #31]
 8003ace:	e147      	b.n	8003d60 <UART_SetConfig+0x348>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e144      	b.n	8003d60 <UART_SetConfig+0x348>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a83      	ldr	r2, [pc, #524]	@ (8003ce8 <UART_SetConfig+0x2d0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d132      	bne.n	8003b46 <UART_SetConfig+0x12e>
 8003ae0:	4b80      	ldr	r3, [pc, #512]	@ (8003ce4 <UART_SetConfig+0x2cc>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d828      	bhi.n	8003b40 <UART_SetConfig+0x128>
 8003aee:	a201      	add	r2, pc, #4	@ (adr r2, 8003af4 <UART_SetConfig+0xdc>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003b29 	.word	0x08003b29
 8003af8:	08003b41 	.word	0x08003b41
 8003afc:	08003b41 	.word	0x08003b41
 8003b00:	08003b41 	.word	0x08003b41
 8003b04:	08003b35 	.word	0x08003b35
 8003b08:	08003b41 	.word	0x08003b41
 8003b0c:	08003b41 	.word	0x08003b41
 8003b10:	08003b41 	.word	0x08003b41
 8003b14:	08003b2f 	.word	0x08003b2f
 8003b18:	08003b41 	.word	0x08003b41
 8003b1c:	08003b41 	.word	0x08003b41
 8003b20:	08003b41 	.word	0x08003b41
 8003b24:	08003b3b 	.word	0x08003b3b
 8003b28:	2300      	movs	r3, #0
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e118      	b.n	8003d60 <UART_SetConfig+0x348>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e115      	b.n	8003d60 <UART_SetConfig+0x348>
 8003b34:	2304      	movs	r3, #4
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e112      	b.n	8003d60 <UART_SetConfig+0x348>
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	77fb      	strb	r3, [r7, #31]
 8003b3e:	e10f      	b.n	8003d60 <UART_SetConfig+0x348>
 8003b40:	2310      	movs	r3, #16
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e10c      	b.n	8003d60 <UART_SetConfig+0x348>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a68      	ldr	r2, [pc, #416]	@ (8003cec <UART_SetConfig+0x2d4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d120      	bne.n	8003b92 <UART_SetConfig+0x17a>
 8003b50:	4b64      	ldr	r3, [pc, #400]	@ (8003ce4 <UART_SetConfig+0x2cc>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b56:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b5a:	2b30      	cmp	r3, #48	@ 0x30
 8003b5c:	d013      	beq.n	8003b86 <UART_SetConfig+0x16e>
 8003b5e:	2b30      	cmp	r3, #48	@ 0x30
 8003b60:	d814      	bhi.n	8003b8c <UART_SetConfig+0x174>
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d009      	beq.n	8003b7a <UART_SetConfig+0x162>
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d810      	bhi.n	8003b8c <UART_SetConfig+0x174>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <UART_SetConfig+0x15c>
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d006      	beq.n	8003b80 <UART_SetConfig+0x168>
 8003b72:	e00b      	b.n	8003b8c <UART_SetConfig+0x174>
 8003b74:	2300      	movs	r3, #0
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e0f2      	b.n	8003d60 <UART_SetConfig+0x348>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	77fb      	strb	r3, [r7, #31]
 8003b7e:	e0ef      	b.n	8003d60 <UART_SetConfig+0x348>
 8003b80:	2304      	movs	r3, #4
 8003b82:	77fb      	strb	r3, [r7, #31]
 8003b84:	e0ec      	b.n	8003d60 <UART_SetConfig+0x348>
 8003b86:	2308      	movs	r3, #8
 8003b88:	77fb      	strb	r3, [r7, #31]
 8003b8a:	e0e9      	b.n	8003d60 <UART_SetConfig+0x348>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	e0e6      	b.n	8003d60 <UART_SetConfig+0x348>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a56      	ldr	r2, [pc, #344]	@ (8003cf0 <UART_SetConfig+0x2d8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d120      	bne.n	8003bde <UART_SetConfig+0x1c6>
 8003b9c:	4b51      	ldr	r3, [pc, #324]	@ (8003ce4 <UART_SetConfig+0x2cc>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ba6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ba8:	d013      	beq.n	8003bd2 <UART_SetConfig+0x1ba>
 8003baa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bac:	d814      	bhi.n	8003bd8 <UART_SetConfig+0x1c0>
 8003bae:	2b80      	cmp	r3, #128	@ 0x80
 8003bb0:	d009      	beq.n	8003bc6 <UART_SetConfig+0x1ae>
 8003bb2:	2b80      	cmp	r3, #128	@ 0x80
 8003bb4:	d810      	bhi.n	8003bd8 <UART_SetConfig+0x1c0>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <UART_SetConfig+0x1a8>
 8003bba:	2b40      	cmp	r3, #64	@ 0x40
 8003bbc:	d006      	beq.n	8003bcc <UART_SetConfig+0x1b4>
 8003bbe:	e00b      	b.n	8003bd8 <UART_SetConfig+0x1c0>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	77fb      	strb	r3, [r7, #31]
 8003bc4:	e0cc      	b.n	8003d60 <UART_SetConfig+0x348>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	77fb      	strb	r3, [r7, #31]
 8003bca:	e0c9      	b.n	8003d60 <UART_SetConfig+0x348>
 8003bcc:	2304      	movs	r3, #4
 8003bce:	77fb      	strb	r3, [r7, #31]
 8003bd0:	e0c6      	b.n	8003d60 <UART_SetConfig+0x348>
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	77fb      	strb	r3, [r7, #31]
 8003bd6:	e0c3      	b.n	8003d60 <UART_SetConfig+0x348>
 8003bd8:	2310      	movs	r3, #16
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	e0c0      	b.n	8003d60 <UART_SetConfig+0x348>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a44      	ldr	r2, [pc, #272]	@ (8003cf4 <UART_SetConfig+0x2dc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d125      	bne.n	8003c34 <UART_SetConfig+0x21c>
 8003be8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce4 <UART_SetConfig+0x2cc>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bf6:	d017      	beq.n	8003c28 <UART_SetConfig+0x210>
 8003bf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bfc:	d817      	bhi.n	8003c2e <UART_SetConfig+0x216>
 8003bfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c02:	d00b      	beq.n	8003c1c <UART_SetConfig+0x204>
 8003c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c08:	d811      	bhi.n	8003c2e <UART_SetConfig+0x216>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <UART_SetConfig+0x1fe>
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c12:	d006      	beq.n	8003c22 <UART_SetConfig+0x20a>
 8003c14:	e00b      	b.n	8003c2e <UART_SetConfig+0x216>
 8003c16:	2300      	movs	r3, #0
 8003c18:	77fb      	strb	r3, [r7, #31]
 8003c1a:	e0a1      	b.n	8003d60 <UART_SetConfig+0x348>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e09e      	b.n	8003d60 <UART_SetConfig+0x348>
 8003c22:	2304      	movs	r3, #4
 8003c24:	77fb      	strb	r3, [r7, #31]
 8003c26:	e09b      	b.n	8003d60 <UART_SetConfig+0x348>
 8003c28:	2308      	movs	r3, #8
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e098      	b.n	8003d60 <UART_SetConfig+0x348>
 8003c2e:	2310      	movs	r3, #16
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e095      	b.n	8003d60 <UART_SetConfig+0x348>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf8 <UART_SetConfig+0x2e0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d125      	bne.n	8003c8a <UART_SetConfig+0x272>
 8003c3e:	4b29      	ldr	r3, [pc, #164]	@ (8003ce4 <UART_SetConfig+0x2cc>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c4c:	d017      	beq.n	8003c7e <UART_SetConfig+0x266>
 8003c4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c52:	d817      	bhi.n	8003c84 <UART_SetConfig+0x26c>
 8003c54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c58:	d00b      	beq.n	8003c72 <UART_SetConfig+0x25a>
 8003c5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c5e:	d811      	bhi.n	8003c84 <UART_SetConfig+0x26c>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <UART_SetConfig+0x254>
 8003c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c68:	d006      	beq.n	8003c78 <UART_SetConfig+0x260>
 8003c6a:	e00b      	b.n	8003c84 <UART_SetConfig+0x26c>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e076      	b.n	8003d60 <UART_SetConfig+0x348>
 8003c72:	2302      	movs	r3, #2
 8003c74:	77fb      	strb	r3, [r7, #31]
 8003c76:	e073      	b.n	8003d60 <UART_SetConfig+0x348>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e070      	b.n	8003d60 <UART_SetConfig+0x348>
 8003c7e:	2308      	movs	r3, #8
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e06d      	b.n	8003d60 <UART_SetConfig+0x348>
 8003c84:	2310      	movs	r3, #16
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e06a      	b.n	8003d60 <UART_SetConfig+0x348>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cfc <UART_SetConfig+0x2e4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d138      	bne.n	8003d06 <UART_SetConfig+0x2ee>
 8003c94:	4b13      	ldr	r3, [pc, #76]	@ (8003ce4 <UART_SetConfig+0x2cc>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003c9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ca2:	d017      	beq.n	8003cd4 <UART_SetConfig+0x2bc>
 8003ca4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ca8:	d82a      	bhi.n	8003d00 <UART_SetConfig+0x2e8>
 8003caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cae:	d00b      	beq.n	8003cc8 <UART_SetConfig+0x2b0>
 8003cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb4:	d824      	bhi.n	8003d00 <UART_SetConfig+0x2e8>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <UART_SetConfig+0x2aa>
 8003cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cbe:	d006      	beq.n	8003cce <UART_SetConfig+0x2b6>
 8003cc0:	e01e      	b.n	8003d00 <UART_SetConfig+0x2e8>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	e04b      	b.n	8003d60 <UART_SetConfig+0x348>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e048      	b.n	8003d60 <UART_SetConfig+0x348>
 8003cce:	2304      	movs	r3, #4
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	e045      	b.n	8003d60 <UART_SetConfig+0x348>
 8003cd4:	2308      	movs	r3, #8
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e042      	b.n	8003d60 <UART_SetConfig+0x348>
 8003cda:	bf00      	nop
 8003cdc:	efff69f3 	.word	0xefff69f3
 8003ce0:	40011000 	.word	0x40011000
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40004400 	.word	0x40004400
 8003cec:	40004800 	.word	0x40004800
 8003cf0:	40004c00 	.word	0x40004c00
 8003cf4:	40005000 	.word	0x40005000
 8003cf8:	40011400 	.word	0x40011400
 8003cfc:	40007800 	.word	0x40007800
 8003d00:	2310      	movs	r3, #16
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e02c      	b.n	8003d60 <UART_SetConfig+0x348>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a72      	ldr	r2, [pc, #456]	@ (8003ed4 <UART_SetConfig+0x4bc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d125      	bne.n	8003d5c <UART_SetConfig+0x344>
 8003d10:	4b71      	ldr	r3, [pc, #452]	@ (8003ed8 <UART_SetConfig+0x4c0>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003d1a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d1e:	d017      	beq.n	8003d50 <UART_SetConfig+0x338>
 8003d20:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d24:	d817      	bhi.n	8003d56 <UART_SetConfig+0x33e>
 8003d26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d2a:	d00b      	beq.n	8003d44 <UART_SetConfig+0x32c>
 8003d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d30:	d811      	bhi.n	8003d56 <UART_SetConfig+0x33e>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <UART_SetConfig+0x326>
 8003d36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d3a:	d006      	beq.n	8003d4a <UART_SetConfig+0x332>
 8003d3c:	e00b      	b.n	8003d56 <UART_SetConfig+0x33e>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e00d      	b.n	8003d60 <UART_SetConfig+0x348>
 8003d44:	2302      	movs	r3, #2
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e00a      	b.n	8003d60 <UART_SetConfig+0x348>
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	77fb      	strb	r3, [r7, #31]
 8003d4e:	e007      	b.n	8003d60 <UART_SetConfig+0x348>
 8003d50:	2308      	movs	r3, #8
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e004      	b.n	8003d60 <UART_SetConfig+0x348>
 8003d56:	2310      	movs	r3, #16
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e001      	b.n	8003d60 <UART_SetConfig+0x348>
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d68:	d15b      	bne.n	8003e22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003d6a:	7ffb      	ldrb	r3, [r7, #31]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d828      	bhi.n	8003dc2 <UART_SetConfig+0x3aa>
 8003d70:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <UART_SetConfig+0x360>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003d9d 	.word	0x08003d9d
 8003d7c:	08003da5 	.word	0x08003da5
 8003d80:	08003dad 	.word	0x08003dad
 8003d84:	08003dc3 	.word	0x08003dc3
 8003d88:	08003db3 	.word	0x08003db3
 8003d8c:	08003dc3 	.word	0x08003dc3
 8003d90:	08003dc3 	.word	0x08003dc3
 8003d94:	08003dc3 	.word	0x08003dc3
 8003d98:	08003dbb 	.word	0x08003dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d9c:	f7fe fe14 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8003da0:	61b8      	str	r0, [r7, #24]
        break;
 8003da2:	e013      	b.n	8003dcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003da4:	f7fe fe24 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 8003da8:	61b8      	str	r0, [r7, #24]
        break;
 8003daa:	e00f      	b.n	8003dcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dac:	4b4b      	ldr	r3, [pc, #300]	@ (8003edc <UART_SetConfig+0x4c4>)
 8003dae:	61bb      	str	r3, [r7, #24]
        break;
 8003db0:	e00c      	b.n	8003dcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003db2:	f7fe fcf7 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8003db6:	61b8      	str	r0, [r7, #24]
        break;
 8003db8:	e008      	b.n	8003dcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dbe:	61bb      	str	r3, [r7, #24]
        break;
 8003dc0:	e004      	b.n	8003dcc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	77bb      	strb	r3, [r7, #30]
        break;
 8003dca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d074      	beq.n	8003ebc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	005a      	lsls	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	441a      	add	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	d916      	bls.n	8003e1c <UART_SetConfig+0x404>
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df4:	d212      	bcs.n	8003e1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	f023 030f 	bic.w	r3, r3, #15
 8003dfe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	89fb      	ldrh	r3, [r7, #14]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	89fa      	ldrh	r2, [r7, #14]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	e04f      	b.n	8003ebc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	77bb      	strb	r3, [r7, #30]
 8003e20:	e04c      	b.n	8003ebc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e22:	7ffb      	ldrb	r3, [r7, #31]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d828      	bhi.n	8003e7a <UART_SetConfig+0x462>
 8003e28:	a201      	add	r2, pc, #4	@ (adr r2, 8003e30 <UART_SetConfig+0x418>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e55 	.word	0x08003e55
 8003e34:	08003e5d 	.word	0x08003e5d
 8003e38:	08003e65 	.word	0x08003e65
 8003e3c:	08003e7b 	.word	0x08003e7b
 8003e40:	08003e6b 	.word	0x08003e6b
 8003e44:	08003e7b 	.word	0x08003e7b
 8003e48:	08003e7b 	.word	0x08003e7b
 8003e4c:	08003e7b 	.word	0x08003e7b
 8003e50:	08003e73 	.word	0x08003e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e54:	f7fe fdb8 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8003e58:	61b8      	str	r0, [r7, #24]
        break;
 8003e5a:	e013      	b.n	8003e84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e5c:	f7fe fdc8 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 8003e60:	61b8      	str	r0, [r7, #24]
        break;
 8003e62:	e00f      	b.n	8003e84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e64:	4b1d      	ldr	r3, [pc, #116]	@ (8003edc <UART_SetConfig+0x4c4>)
 8003e66:	61bb      	str	r3, [r7, #24]
        break;
 8003e68:	e00c      	b.n	8003e84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6a:	f7fe fc9b 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8003e6e:	61b8      	str	r0, [r7, #24]
        break;
 8003e70:	e008      	b.n	8003e84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e76:	61bb      	str	r3, [r7, #24]
        break;
 8003e78:	e004      	b.n	8003e84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	77bb      	strb	r3, [r7, #30]
        break;
 8003e82:	bf00      	nop
    }

    if (pclk != 0U)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d018      	beq.n	8003ebc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	085a      	lsrs	r2, r3, #1
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	441a      	add	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b0f      	cmp	r3, #15
 8003ea2:	d909      	bls.n	8003eb8 <UART_SetConfig+0x4a0>
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eaa:	d205      	bcs.n	8003eb8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60da      	str	r2, [r3, #12]
 8003eb6:	e001      	b.n	8003ebc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ec8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3720      	adds	r7, #32
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40007c00 	.word	0x40007c00
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	00f42400 	.word	0x00f42400

08003ee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01a      	beq.n	8003ff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fde:	d10a      	bne.n	8003ff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]
  }
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b098      	sub	sp, #96	@ 0x60
 8004028:	af02      	add	r7, sp, #8
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004034:	f7fd f82a 	bl	800108c <HAL_GetTick>
 8004038:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b08      	cmp	r3, #8
 8004046:	d12e      	bne.n	80040a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004048:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004050:	2200      	movs	r2, #0
 8004052:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f88c 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d021      	beq.n	80040a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004076:	653b      	str	r3, [r7, #80]	@ 0x50
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004080:	647b      	str	r3, [r7, #68]	@ 0x44
 8004082:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800408e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e6      	bne.n	8004062 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e062      	b.n	800416c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d149      	bne.n	8004148 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040bc:	2200      	movs	r2, #0
 80040be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f856 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d03c      	beq.n	8004148 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	623b      	str	r3, [r7, #32]
   return(result);
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e6      	bne.n	80040ce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3308      	adds	r3, #8
 8004106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3308      	adds	r3, #8
 800411e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004120:	61fa      	str	r2, [r7, #28]
 8004122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	69b9      	ldr	r1, [r7, #24]
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	617b      	str	r3, [r7, #20]
   return(result);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e5      	bne.n	8004100 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e011      	b.n	800416c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3758      	adds	r7, #88	@ 0x58
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	4613      	mov	r3, r2
 8004182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004184:	e04f      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d04b      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418e:	f7fc ff7d 	bl	800108c <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	429a      	cmp	r2, r3
 800419c:	d302      	bcc.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e04e      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d037      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b80      	cmp	r3, #128	@ 0x80
 80041ba:	d034      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b40      	cmp	r3, #64	@ 0x40
 80041c0:	d031      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d110      	bne.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2208      	movs	r2, #8
 80041d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f838 	bl	800424e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2208      	movs	r2, #8
 80041e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e029      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004200:	d111      	bne.n	8004226 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800420a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f81e 	bl	800424e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e00f      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4013      	ands	r3, r2
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	429a      	cmp	r2, r3
 8004234:	bf0c      	ite	eq
 8004236:	2301      	moveq	r3, #1
 8004238:	2300      	movne	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	429a      	cmp	r2, r3
 8004242:	d0a0      	beq.n	8004186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800424e:	b480      	push	{r7}
 8004250:	b095      	sub	sp, #84	@ 0x54
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004266:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800426a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004274:	643b      	str	r3, [r7, #64]	@ 0x40
 8004276:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800427a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e6      	bne.n	8004256 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3308      	adds	r3, #8
 800428e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	61fb      	str	r3, [r7, #28]
   return(result);
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3308      	adds	r3, #8
 80042a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042b0:	e841 2300 	strex	r3, r2, [r1]
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e5      	bne.n	8004288 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d118      	bne.n	80042f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f023 0310 	bic.w	r3, r3, #16
 80042d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	6979      	ldr	r1, [r7, #20]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	613b      	str	r3, [r7, #16]
   return(result);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e6      	bne.n	80042c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800430a:	bf00      	nop
 800430c:	3754      	adds	r7, #84	@ 0x54
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004318:	b084      	sub	sp, #16
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	f107 001c 	add.w	r0, r7, #28
 8004326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800432a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800432e:	2b01      	cmp	r3, #1
 8004330:	d121      	bne.n	8004376 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004336:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	4b21      	ldr	r3, [pc, #132]	@ (80043c8 <USB_CoreInit+0xb0>)
 8004344:	4013      	ands	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004356:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa92 	bl	8004894 <USB_CoreReset>
 8004370:	4603      	mov	r3, r0
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e010      	b.n	8004398 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fa86 	bl	8004894 <USB_CoreReset>
 8004388:	4603      	mov	r3, r0
 800438a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004390:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004398:	7fbb      	ldrb	r3, [r7, #30]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10b      	bne.n	80043b6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f043 0206 	orr.w	r2, r3, #6
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f043 0220 	orr.w	r2, r3, #32
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043c2:	b004      	add	sp, #16
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	ffbdffbf 	.word	0xffbdffbf

080043cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f023 0201 	bic.w	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d115      	bne.n	800443c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800441c:	200a      	movs	r0, #10
 800441e:	f7fc fe41 	bl	80010a4 <HAL_Delay>
      ms += 10U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	330a      	adds	r3, #10
 8004426:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fa25 	bl	8004878 <USB_GetMode>
 800442e:	4603      	mov	r3, r0
 8004430:	2b01      	cmp	r3, #1
 8004432:	d01e      	beq.n	8004472 <USB_SetCurrentMode+0x84>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2bc7      	cmp	r3, #199	@ 0xc7
 8004438:	d9f0      	bls.n	800441c <USB_SetCurrentMode+0x2e>
 800443a:	e01a      	b.n	8004472 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d115      	bne.n	800446e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800444e:	200a      	movs	r0, #10
 8004450:	f7fc fe28 	bl	80010a4 <HAL_Delay>
      ms += 10U;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	330a      	adds	r3, #10
 8004458:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fa0c 	bl	8004878 <USB_GetMode>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <USB_SetCurrentMode+0x84>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2bc7      	cmp	r3, #199	@ 0xc7
 800446a:	d9f0      	bls.n	800444e <USB_SetCurrentMode+0x60>
 800446c:	e001      	b.n	8004472 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e005      	b.n	800447e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2bc8      	cmp	r3, #200	@ 0xc8
 8004476:	d101      	bne.n	800447c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004488:	b084      	sub	sp, #16
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	e009      	b.n	80044bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	3340      	adds	r3, #64	@ 0x40
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	2200      	movs	r2, #0
 80044b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	3301      	adds	r3, #1
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b0e      	cmp	r3, #14
 80044c0:	d9f2      	bls.n	80044a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d11c      	bne.n	8004504 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e005      	b.n	8004510 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004508:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004516:	461a      	mov	r2, r3
 8004518:	2300      	movs	r3, #0
 800451a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800451c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004520:	2b01      	cmp	r3, #1
 8004522:	d10d      	bne.n	8004540 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800452c:	2100      	movs	r1, #0
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f968 	bl	8004804 <USB_SetDevSpeed>
 8004534:	e008      	b.n	8004548 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004536:	2101      	movs	r1, #1
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f963 	bl	8004804 <USB_SetDevSpeed>
 800453e:	e003      	b.n	8004548 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004540:	2103      	movs	r1, #3
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f95e 	bl	8004804 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004548:	2110      	movs	r1, #16
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f8fa 	bl	8004744 <USB_FlushTxFifo>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f924 	bl	80047a8 <USB_FlushRxFifo>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004570:	461a      	mov	r2, r3
 8004572:	2300      	movs	r3, #0
 8004574:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800457c:	461a      	mov	r2, r3
 800457e:	2300      	movs	r3, #0
 8004580:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004588:	461a      	mov	r2, r3
 800458a:	2300      	movs	r3, #0
 800458c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800458e:	2300      	movs	r3, #0
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	e043      	b.n	800461c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045aa:	d118      	bne.n	80045de <USB_DevInit+0x156>
    {
      if (i == 0U)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10a      	bne.n	80045c8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045be:	461a      	mov	r2, r3
 80045c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e013      	b.n	80045f0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045d4:	461a      	mov	r2, r3
 80045d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	e008      	b.n	80045f0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ea:	461a      	mov	r2, r3
 80045ec:	2300      	movs	r3, #0
 80045ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045fc:	461a      	mov	r2, r3
 80045fe:	2300      	movs	r3, #0
 8004600:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800460e:	461a      	mov	r2, r3
 8004610:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004614:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	3301      	adds	r3, #1
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004620:	461a      	mov	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4293      	cmp	r3, r2
 8004626:	d3b5      	bcc.n	8004594 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004628:	2300      	movs	r3, #0
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	e043      	b.n	80046b6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004644:	d118      	bne.n	8004678 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004658:	461a      	mov	r2, r3
 800465a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	e013      	b.n	800468a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800466e:	461a      	mov	r2, r3
 8004670:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e008      	b.n	800468a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004684:	461a      	mov	r2, r3
 8004686:	2300      	movs	r3, #0
 8004688:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004696:	461a      	mov	r2, r3
 8004698:	2300      	movs	r3, #0
 800469a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a8:	461a      	mov	r2, r3
 80046aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	3301      	adds	r3, #1
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046ba:	461a      	mov	r2, r3
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4293      	cmp	r3, r2
 80046c0:	d3b5      	bcc.n	800462e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80046e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f043 0210 	orr.w	r2, r3, #16
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699a      	ldr	r2, [r3, #24]
 80046fc:	4b0f      	ldr	r3, [pc, #60]	@ (800473c <USB_DevInit+0x2b4>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004704:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	f043 0208 	orr.w	r2, r3, #8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004718:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699a      	ldr	r2, [r3, #24]
 8004724:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <USB_DevInit+0x2b8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800472c:	7dfb      	ldrb	r3, [r7, #23]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004738:	b004      	add	sp, #16
 800473a:	4770      	bx	lr
 800473c:	803c3800 	.word	0x803c3800
 8004740:	40000004 	.word	0x40000004

08004744 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3301      	adds	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800475e:	d901      	bls.n	8004764 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e01b      	b.n	800479c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	daf2      	bge.n	8004752 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	019b      	lsls	r3, r3, #6
 8004774:	f043 0220 	orr.w	r2, r3, #32
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3301      	adds	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004788:	d901      	bls.n	800478e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e006      	b.n	800479c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b20      	cmp	r3, #32
 8004798:	d0f0      	beq.n	800477c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3301      	adds	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047c0:	d901      	bls.n	80047c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e018      	b.n	80047f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	daf2      	bge.n	80047b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2210      	movs	r2, #16
 80047d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047e4:	d901      	bls.n	80047ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e006      	b.n	80047f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d0f0      	beq.n	80047d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004824:	4313      	orrs	r3, r2
 8004826:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004836:	b480      	push	{r7}
 8004838:	b085      	sub	sp, #20
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004850:	f023 0303 	bic.w	r3, r3, #3
 8004854:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004864:	f043 0302 	orr.w	r3, r3, #2
 8004868:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	f003 0301 	and.w	r3, r3, #1
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048ac:	d901      	bls.n	80048b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e022      	b.n	80048f8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	daf2      	bge.n	80048a0 <USB_CoreReset+0xc>

  count = 10U;
 80048ba:	230a      	movs	r3, #10
 80048bc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80048be:	e002      	b.n	80048c6 <USB_CoreReset+0x32>
  {
    count--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f9      	bne.n	80048c0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f043 0201 	orr.w	r2, r3, #1
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3301      	adds	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048e4:	d901      	bls.n	80048ea <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e006      	b.n	80048f8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d0f0      	beq.n	80048d8 <USB_CoreReset+0x44>

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004908:	bf00      	nop
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800491a:	f3ef 8305 	mrs	r3, IPSR
 800491e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004920:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10f      	bne.n	8004946 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004926:	f3ef 8310 	mrs	r3, PRIMASK
 800492a:	607b      	str	r3, [r7, #4]
  return(result);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d105      	bne.n	800493e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004932:	f3ef 8311 	mrs	r3, BASEPRI
 8004936:	603b      	str	r3, [r7, #0]
  return(result);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <osKernelInitialize+0x3a>
 800493e:	4b0e      	ldr	r3, [pc, #56]	@ (8004978 <osKernelInitialize+0x64>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d103      	bne.n	800494e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004946:	f06f 0305 	mvn.w	r3, #5
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	e00c      	b.n	8004968 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800494e:	4b0a      	ldr	r3, [pc, #40]	@ (8004978 <osKernelInitialize+0x64>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d105      	bne.n	8004962 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004956:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <osKernelInitialize+0x64>)
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e002      	b.n	8004968 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004968:	68fb      	ldr	r3, [r7, #12]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000878 	.word	0x20000878

0800497c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004982:	f3ef 8305 	mrs	r3, IPSR
 8004986:	60bb      	str	r3, [r7, #8]
  return(result);
 8004988:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	607b      	str	r3, [r7, #4]
  return(result);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800499a:	f3ef 8311 	mrs	r3, BASEPRI
 800499e:	603b      	str	r3, [r7, #0]
  return(result);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <osKernelStart+0x3a>
 80049a6:	4b0f      	ldr	r3, [pc, #60]	@ (80049e4 <osKernelStart+0x68>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d103      	bne.n	80049b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80049ae:	f06f 0305 	mvn.w	r3, #5
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e010      	b.n	80049d8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80049b6:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <osKernelStart+0x68>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d109      	bne.n	80049d2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80049be:	f7ff ffa1 	bl	8004904 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049c2:	4b08      	ldr	r3, [pc, #32]	@ (80049e4 <osKernelStart+0x68>)
 80049c4:	2202      	movs	r2, #2
 80049c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049c8:	f001 fe0a 	bl	80065e0 <vTaskStartScheduler>
      stat = osOK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e002      	b.n	80049d8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80049d2:	f04f 33ff 	mov.w	r3, #4294967295
 80049d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80049d8:	68fb      	ldr	r3, [r7, #12]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000878 	.word	0x20000878

080049e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b090      	sub	sp, #64	@ 0x40
 80049ec:	af04      	add	r7, sp, #16
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049f8:	f3ef 8305 	mrs	r3, IPSR
 80049fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80049fe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f040 808f 	bne.w	8004b24 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a06:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d105      	bne.n	8004a1e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a12:	f3ef 8311 	mrs	r3, BASEPRI
 8004a16:	617b      	str	r3, [r7, #20]
  return(result);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <osThreadNew+0x3e>
 8004a1e:	4b44      	ldr	r3, [pc, #272]	@ (8004b30 <osThreadNew+0x148>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d07e      	beq.n	8004b24 <osThreadNew+0x13c>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d07b      	beq.n	8004b24 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004a2c:	2380      	movs	r3, #128	@ 0x80
 8004a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004a30:	2318      	movs	r3, #24
 8004a32:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d045      	beq.n	8004ad0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <osThreadNew+0x6a>
        name = attr->name;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <osThreadNew+0x90>
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	2b38      	cmp	r3, #56	@ 0x38
 8004a6a:	d805      	bhi.n	8004a78 <osThreadNew+0x90>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <osThreadNew+0x94>
        return (NULL);
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e054      	b.n	8004b26 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	089b      	lsrs	r3, r3, #2
 8004a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00e      	beq.n	8004ab2 <osThreadNew+0xca>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2ba7      	cmp	r3, #167	@ 0xa7
 8004a9a:	d90a      	bls.n	8004ab2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d006      	beq.n	8004ab2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <osThreadNew+0xca>
        mem = 1;
 8004aac:	2301      	movs	r3, #1
 8004aae:	623b      	str	r3, [r7, #32]
 8004ab0:	e010      	b.n	8004ad4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10c      	bne.n	8004ad4 <osThreadNew+0xec>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d108      	bne.n	8004ad4 <osThreadNew+0xec>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d104      	bne.n	8004ad4 <osThreadNew+0xec>
          mem = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	623b      	str	r3, [r7, #32]
 8004ace:	e001      	b.n	8004ad4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d110      	bne.n	8004afc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ae2:	9202      	str	r2, [sp, #8]
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f001 fb77 	bl	80061e4 <xTaskCreateStatic>
 8004af6:	4603      	mov	r3, r0
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	e013      	b.n	8004b24 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d110      	bne.n	8004b24 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	f107 0310 	add.w	r3, r7, #16
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f001 fbcb 	bl	80062b0 <xTaskCreate>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d001      	beq.n	8004b24 <osThreadNew+0x13c>
          hTask = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b24:	693b      	ldr	r3, [r7, #16]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3730      	adds	r7, #48	@ 0x30
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000878 	.word	0x20000878

08004b34 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b3c:	f3ef 8305 	mrs	r3, IPSR
 8004b40:	613b      	str	r3, [r7, #16]
  return(result);
 8004b42:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10f      	bne.n	8004b68 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b48:	f3ef 8310 	mrs	r3, PRIMASK
 8004b4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b54:	f3ef 8311 	mrs	r3, BASEPRI
 8004b58:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <osDelay+0x3c>
 8004b60:	4b0a      	ldr	r3, [pc, #40]	@ (8004b8c <osDelay+0x58>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d103      	bne.n	8004b70 <osDelay+0x3c>
    stat = osErrorISR;
 8004b68:	f06f 0305 	mvn.w	r3, #5
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	e007      	b.n	8004b80 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f001 fcf8 	bl	8006570 <vTaskDelay>
    }
  }

  return (stat);
 8004b80:	697b      	ldr	r3, [r7, #20]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000878 	.word	0x20000878

08004b90 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08c      	sub	sp, #48	@ 0x30
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ba0:	f3ef 8305 	mrs	r3, IPSR
 8004ba4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ba6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f040 8086 	bne.w	8004cba <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bae:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb2:	617b      	str	r3, [r7, #20]
  return(result);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bba:	f3ef 8311 	mrs	r3, BASEPRI
 8004bbe:	613b      	str	r3, [r7, #16]
  return(result);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <osSemaphoreNew+0x3e>
 8004bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc4 <osSemaphoreNew+0x134>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d075      	beq.n	8004cba <osSemaphoreNew+0x12a>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d072      	beq.n	8004cba <osSemaphoreNew+0x12a>
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d86e      	bhi.n	8004cba <osSemaphoreNew+0x12a>
    mem = -1;
 8004bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004be0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d015      	beq.n	8004c14 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d006      	beq.n	8004bfe <osSemaphoreNew+0x6e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b4f      	cmp	r3, #79	@ 0x4f
 8004bf6:	d902      	bls.n	8004bfe <osSemaphoreNew+0x6e>
        mem = 1;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	e00c      	b.n	8004c18 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d108      	bne.n	8004c18 <osSemaphoreNew+0x88>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <osSemaphoreNew+0x88>
          mem = 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	623b      	str	r3, [r7, #32]
 8004c12:	e001      	b.n	8004c18 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1e:	d04c      	beq.n	8004cba <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d128      	bne.n	8004c78 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d10a      	bne.n	8004c42 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2203      	movs	r2, #3
 8004c32:	9200      	str	r2, [sp, #0]
 8004c34:	2200      	movs	r2, #0
 8004c36:	2100      	movs	r1, #0
 8004c38:	2001      	movs	r0, #1
 8004c3a:	f000 fa89 	bl	8005150 <xQueueGenericCreateStatic>
 8004c3e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c40:	e005      	b.n	8004c4e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004c42:	2203      	movs	r2, #3
 8004c44:	2100      	movs	r1, #0
 8004c46:	2001      	movs	r0, #1
 8004c48:	f000 fb09 	bl	800525e <xQueueGenericCreate>
 8004c4c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d022      	beq.n	8004c9a <osSemaphoreNew+0x10a>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d01f      	beq.n	8004c9a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2100      	movs	r1, #0
 8004c60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c62:	f000 fbd9 	bl	8005418 <xQueueGenericSend>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d016      	beq.n	8004c9a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004c6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c6e:	f001 f8e3 	bl	8005e38 <vQueueDelete>
            hSemaphore = NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c76:	e010      	b.n	8004c9a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d108      	bne.n	8004c90 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	461a      	mov	r2, r3
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fb4f 	bl	800532a <xQueueCreateCountingSemaphoreStatic>
 8004c8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c8e:	e004      	b.n	8004c9a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 fb86 	bl	80053a4 <xQueueCreateCountingSemaphore>
 8004c98:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00c      	beq.n	8004cba <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <osSemaphoreNew+0x11e>
          name = attr->name;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	e001      	b.n	8004cb2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004cb2:	69f9      	ldr	r1, [r7, #28]
 8004cb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cb6:	f001 fa0d 	bl	80060d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3728      	adds	r7, #40	@ 0x28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20000878 	.word	0x20000878

08004cc8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d103      	bne.n	8004ce8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004ce0:	f06f 0303 	mvn.w	r3, #3
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	e04b      	b.n	8004d80 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ce8:	f3ef 8305 	mrs	r3, IPSR
 8004cec:	617b      	str	r3, [r7, #20]
  return(result);
 8004cee:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10f      	bne.n	8004d14 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf8:	613b      	str	r3, [r7, #16]
  return(result);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d105      	bne.n	8004d0c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d00:	f3ef 8311 	mrs	r3, BASEPRI
 8004d04:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d026      	beq.n	8004d5a <osSemaphoreAcquire+0x92>
 8004d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8004d8c <osSemaphoreAcquire+0xc4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d122      	bne.n	8004d5a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004d1a:	f06f 0303 	mvn.w	r3, #3
 8004d1e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004d20:	e02d      	b.n	8004d7e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004d26:	f107 0308 	add.w	r3, r7, #8
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	69b8      	ldr	r0, [r7, #24]
 8004d30:	f000 ffb8 	bl	8005ca4 <xQueueReceiveFromISR>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d003      	beq.n	8004d42 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004d3a:	f06f 0302 	mvn.w	r3, #2
 8004d3e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004d40:	e01d      	b.n	8004d7e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01a      	beq.n	8004d7e <osSemaphoreAcquire+0xb6>
 8004d48:	4b11      	ldr	r3, [pc, #68]	@ (8004d90 <osSemaphoreAcquire+0xc8>)
 8004d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004d58:	e011      	b.n	8004d7e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004d5a:	6839      	ldr	r1, [r7, #0]
 8004d5c:	69b8      	ldr	r0, [r7, #24]
 8004d5e:	f000 fe89 	bl	8005a74 <xQueueSemaphoreTake>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d00b      	beq.n	8004d80 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004d6e:	f06f 0301 	mvn.w	r3, #1
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	e004      	b.n	8004d80 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004d76:	f06f 0302 	mvn.w	r3, #2
 8004d7a:	61fb      	str	r3, [r7, #28]
 8004d7c:	e000      	b.n	8004d80 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004d7e:	bf00      	nop
      }
    }
  }

  return (stat);
 8004d80:	69fb      	ldr	r3, [r7, #28]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000878 	.word	0x20000878
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004daa:	f06f 0303 	mvn.w	r3, #3
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	e03e      	b.n	8004e30 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db2:	f3ef 8305 	mrs	r3, IPSR
 8004db6:	617b      	str	r3, [r7, #20]
  return(result);
 8004db8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10f      	bne.n	8004dde <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc2:	613b      	str	r3, [r7, #16]
  return(result);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dca:	f3ef 8311 	mrs	r3, BASEPRI
 8004dce:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01e      	beq.n	8004e14 <osSemaphoreRelease+0x80>
 8004dd6:	4b19      	ldr	r3, [pc, #100]	@ (8004e3c <osSemaphoreRelease+0xa8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d11a      	bne.n	8004e14 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004de2:	f107 0308 	add.w	r3, r7, #8
 8004de6:	4619      	mov	r1, r3
 8004de8:	69b8      	ldr	r0, [r7, #24]
 8004dea:	f000 fcc2 	bl	8005772 <xQueueGiveFromISR>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d003      	beq.n	8004dfc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004df4:	f06f 0302 	mvn.w	r3, #2
 8004df8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004dfa:	e018      	b.n	8004e2e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d015      	beq.n	8004e2e <osSemaphoreRelease+0x9a>
 8004e02:	4b0f      	ldr	r3, [pc, #60]	@ (8004e40 <osSemaphoreRelease+0xac>)
 8004e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e12:	e00c      	b.n	8004e2e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004e14:	2300      	movs	r3, #0
 8004e16:	2200      	movs	r2, #0
 8004e18:	2100      	movs	r1, #0
 8004e1a:	69b8      	ldr	r0, [r7, #24]
 8004e1c:	f000 fafc 	bl	8005418 <xQueueGenericSend>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d004      	beq.n	8004e30 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004e26:	f06f 0302 	mvn.w	r3, #2
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	e000      	b.n	8004e30 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e2e:	bf00      	nop
    }
  }

  return (stat);
 8004e30:	69fb      	ldr	r3, [r7, #28]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000878 	.word	0x20000878
 8004e40:	e000ed04 	.word	0xe000ed04

08004e44 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	61bb      	str	r3, [r7, #24]
  uint32_t count;

  if (hSemaphore == NULL) {
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d102      	bne.n	8004e5c <osSemaphoreGetCount+0x18>
    count = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	e01e      	b.n	8004e9a <osSemaphoreGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e5c:	f3ef 8305 	mrs	r3, IPSR
 8004e60:	617b      	str	r3, [r7, #20]
  return(result);
 8004e62:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10f      	bne.n	8004e88 <osSemaphoreGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e68:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6c:	613b      	str	r3, [r7, #16]
  return(result);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <osSemaphoreGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e74:	f3ef 8311 	mrs	r3, BASEPRI
 8004e78:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <osSemaphoreGetCount+0x4e>
 8004e80:	4b08      	ldr	r3, [pc, #32]	@ (8004ea4 <osSemaphoreGetCount+0x60>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d104      	bne.n	8004e92 <osSemaphoreGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8004e88:	69b8      	ldr	r0, [r7, #24]
 8004e8a:	f000 ffb4 	bl	8005df6 <uxQueueMessagesWaitingFromISR>
 8004e8e:	61f8      	str	r0, [r7, #28]
 8004e90:	e003      	b.n	8004e9a <osSemaphoreGetCount+0x56>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8004e92:	69b8      	ldr	r0, [r7, #24]
 8004e94:	f000 ff8e 	bl	8005db4 <uxQueueMessagesWaiting>
 8004e98:	61f8      	str	r0, [r7, #28]
  }

  return (count);
 8004e9a:	69fb      	ldr	r3, [r7, #28]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20000878 	.word	0x20000878

08004ea8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4a07      	ldr	r2, [pc, #28]	@ (8004ed4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004eb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4a06      	ldr	r2, [pc, #24]	@ (8004ed8 <vApplicationGetIdleTaskMemory+0x30>)
 8004ebe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2280      	movs	r2, #128	@ 0x80
 8004ec4:	601a      	str	r2, [r3, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	2000087c 	.word	0x2000087c
 8004ed8:	20000924 	.word	0x20000924

08004edc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a07      	ldr	r2, [pc, #28]	@ (8004f08 <vApplicationGetTimerTaskMemory+0x2c>)
 8004eec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4a06      	ldr	r2, [pc, #24]	@ (8004f0c <vApplicationGetTimerTaskMemory+0x30>)
 8004ef2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004efa:	601a      	str	r2, [r3, #0]
}
 8004efc:	bf00      	nop
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	20000b24 	.word	0x20000b24
 8004f0c:	20000bcc 	.word	0x20000bcc

08004f10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f103 0208 	add.w	r2, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f04f 32ff 	mov.w	r2, #4294967295
 8004f28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f103 0208 	add.w	r2, r3, #8
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f103 0208 	add.w	r2, r3, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc8:	d103      	bne.n	8004fd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e00c      	b.n	8004fec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e002      	b.n	8004fe0 <vListInsert+0x2e>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d2f6      	bcs.n	8004fda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	601a      	str	r2, [r3, #0]
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6892      	ldr	r2, [r2, #8]
 800503a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6852      	ldr	r2, [r2, #4]
 8005044:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	429a      	cmp	r2, r3
 800504e:	d103      	bne.n	8005058 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	1e5a      	subs	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10d      	bne.n	80050a8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005090:	b672      	cpsid	i
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	b662      	cpsie	i
 80050a0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050a2:	bf00      	nop
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80050a8:	f002 fd78 	bl	8007b9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b4:	68f9      	ldr	r1, [r7, #12]
 80050b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	441a      	add	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d8:	3b01      	subs	r3, #1
 80050da:	68f9      	ldr	r1, [r7, #12]
 80050dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	441a      	add	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	22ff      	movs	r2, #255	@ 0xff
 80050ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	22ff      	movs	r2, #255	@ 0xff
 80050f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d114      	bne.n	8005128 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d01a      	beq.n	800513c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3310      	adds	r3, #16
 800510a:	4618      	mov	r0, r3
 800510c:	f001 fd14 	bl	8006b38 <xTaskRemoveFromEventList>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d012      	beq.n	800513c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005116:	4b0d      	ldr	r3, [pc, #52]	@ (800514c <xQueueGenericReset+0xd4>)
 8005118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	e009      	b.n	800513c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3310      	adds	r3, #16
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff feef 	bl	8004f10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3324      	adds	r3, #36	@ 0x24
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff feea 	bl	8004f10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800513c:	f002 fd64 	bl	8007c08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005140:	2301      	movs	r3, #1
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08e      	sub	sp, #56	@ 0x38
 8005154:	af02      	add	r7, sp, #8
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10d      	bne.n	8005180 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005168:	b672      	cpsid	i
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	b662      	cpsie	i
 8005178:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800517a:	bf00      	nop
 800517c:	bf00      	nop
 800517e:	e7fd      	b.n	800517c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518a:	b672      	cpsid	i
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	b662      	cpsie	i
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	e7fd      	b.n	800519e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <xQueueGenericCreateStatic+0x5e>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <xQueueGenericCreateStatic+0x62>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <xQueueGenericCreateStatic+0x64>
 80051b2:	2300      	movs	r3, #0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10d      	bne.n	80051d4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051bc:	b672      	cpsid	i
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	b662      	cpsie	i
 80051cc:	623b      	str	r3, [r7, #32]
}
 80051ce:	bf00      	nop
 80051d0:	bf00      	nop
 80051d2:	e7fd      	b.n	80051d0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <xQueueGenericCreateStatic+0x90>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <xQueueGenericCreateStatic+0x94>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <xQueueGenericCreateStatic+0x96>
 80051e4:	2300      	movs	r3, #0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10d      	bne.n	8005206 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ee:	b672      	cpsid	i
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	b662      	cpsie	i
 80051fe:	61fb      	str	r3, [r7, #28]
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	e7fd      	b.n	8005202 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005206:	2350      	movs	r3, #80	@ 0x50
 8005208:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b50      	cmp	r3, #80	@ 0x50
 800520e:	d00d      	beq.n	800522c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005214:	b672      	cpsid	i
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	b662      	cpsie	i
 8005224:	61bb      	str	r3, [r7, #24]
}
 8005226:	bf00      	nop
 8005228:	bf00      	nop
 800522a:	e7fd      	b.n	8005228 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800522c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00d      	beq.n	8005254 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005240:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f848 	bl	80052e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005256:	4618      	mov	r0, r3
 8005258:	3730      	adds	r7, #48	@ 0x30
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800525e:	b580      	push	{r7, lr}
 8005260:	b08a      	sub	sp, #40	@ 0x28
 8005262:	af02      	add	r7, sp, #8
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	4613      	mov	r3, r2
 800526a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10d      	bne.n	800528e <xQueueGenericCreate+0x30>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005276:	b672      	cpsid	i
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	b662      	cpsie	i
 8005286:	613b      	str	r3, [r7, #16]
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005294:	2300      	movs	r3, #0
 8005296:	61fb      	str	r3, [r7, #28]
 8005298:	e004      	b.n	80052a4 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	3350      	adds	r3, #80	@ 0x50
 80052a8:	4618      	mov	r0, r3
 80052aa:	f002 fda5 	bl	8007df8 <pvPortMalloc>
 80052ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d011      	beq.n	80052da <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	3350      	adds	r3, #80	@ 0x50
 80052be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052c8:	79fa      	ldrb	r2, [r7, #7]
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	4613      	mov	r3, r2
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f805 	bl	80052e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052da:	69bb      	ldr	r3, [r7, #24]
	}
 80052dc:	4618      	mov	r0, r3
 80052de:	3720      	adds	r7, #32
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d103      	bne.n	8005300 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e002      	b.n	8005306 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005312:	2101      	movs	r1, #1
 8005314:	69b8      	ldr	r0, [r7, #24]
 8005316:	f7ff feaf 	bl	8005078 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	78fa      	ldrb	r2, [r7, #3]
 800531e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800532a:	b580      	push	{r7, lr}
 800532c:	b08a      	sub	sp, #40	@ 0x28
 800532e:	af02      	add	r7, sp, #8
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10d      	bne.n	8005358 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005340:	b672      	cpsid	i
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	b662      	cpsie	i
 8005350:	61bb      	str	r3, [r7, #24]
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	e7fd      	b.n	8005354 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	429a      	cmp	r2, r3
 800535e:	d90d      	bls.n	800537c <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	b672      	cpsid	i
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	b662      	cpsie	i
 8005374:	617b      	str	r3, [r7, #20]
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800537c:	2302      	movs	r3, #2
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	2100      	movs	r1, #0
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff fee2 	bl	8005150 <xQueueGenericCreateStatic>
 800538c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800539a:	69fb      	ldr	r3, [r7, #28]
	}
 800539c:	4618      	mov	r0, r3
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10d      	bne.n	80053d0 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	b672      	cpsid	i
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	b662      	cpsie	i
 80053c8:	613b      	str	r3, [r7, #16]
}
 80053ca:	bf00      	nop
 80053cc:	bf00      	nop
 80053ce:	e7fd      	b.n	80053cc <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d90d      	bls.n	80053f4 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053dc:	b672      	cpsid	i
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	b662      	cpsie	i
 80053ec:	60fb      	str	r3, [r7, #12]
}
 80053ee:	bf00      	nop
 80053f0:	bf00      	nop
 80053f2:	e7fd      	b.n	80053f0 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80053f4:	2202      	movs	r2, #2
 80053f6:	2100      	movs	r1, #0
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff ff30 	bl	800525e <xQueueGenericCreate>
 80053fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800540c:	697b      	ldr	r3, [r7, #20]
	}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08e      	sub	sp, #56	@ 0x38
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005426:	2300      	movs	r3, #0
 8005428:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10d      	bne.n	8005450 <xQueueGenericSend+0x38>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005438:	b672      	cpsid	i
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	b662      	cpsie	i
 8005448:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800544a:	bf00      	nop
 800544c:	bf00      	nop
 800544e:	e7fd      	b.n	800544c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <xQueueGenericSend+0x46>
 8005456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <xQueueGenericSend+0x4a>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <xQueueGenericSend+0x4c>
 8005462:	2300      	movs	r3, #0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10d      	bne.n	8005484 <xQueueGenericSend+0x6c>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546c:	b672      	cpsid	i
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	b662      	cpsie	i
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800547e:	bf00      	nop
 8005480:	bf00      	nop
 8005482:	e7fd      	b.n	8005480 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d103      	bne.n	8005492 <xQueueGenericSend+0x7a>
 800548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <xQueueGenericSend+0x7e>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <xQueueGenericSend+0x80>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10d      	bne.n	80054b8 <xQueueGenericSend+0xa0>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a0:	b672      	cpsid	i
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	b662      	cpsie	i
 80054b0:	623b      	str	r3, [r7, #32]
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	e7fd      	b.n	80054b4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054b8:	f001 fd0c 	bl	8006ed4 <xTaskGetSchedulerState>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <xQueueGenericSend+0xb0>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <xQueueGenericSend+0xb4>
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <xQueueGenericSend+0xb6>
 80054cc:	2300      	movs	r3, #0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10d      	bne.n	80054ee <xQueueGenericSend+0xd6>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d6:	b672      	cpsid	i
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	b662      	cpsie	i
 80054e6:	61fb      	str	r3, [r7, #28]
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	e7fd      	b.n	80054ea <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054ee:	f002 fb55 	bl	8007b9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d302      	bcc.n	8005504 <xQueueGenericSend+0xec>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d129      	bne.n	8005558 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800550a:	f000 fcd3 	bl	8005eb4 <prvCopyDataToQueue>
 800550e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d010      	beq.n	800553a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551a:	3324      	adds	r3, #36	@ 0x24
 800551c:	4618      	mov	r0, r3
 800551e:	f001 fb0b 	bl	8006b38 <xTaskRemoveFromEventList>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d013      	beq.n	8005550 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005528:	4b3f      	ldr	r3, [pc, #252]	@ (8005628 <xQueueGenericSend+0x210>)
 800552a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	e00a      	b.n	8005550 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800553a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005540:	4b39      	ldr	r3, [pc, #228]	@ (8005628 <xQueueGenericSend+0x210>)
 8005542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005550:	f002 fb5a 	bl	8007c08 <vPortExitCritical>
				return pdPASS;
 8005554:	2301      	movs	r3, #1
 8005556:	e063      	b.n	8005620 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d103      	bne.n	8005566 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800555e:	f002 fb53 	bl	8007c08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005562:	2300      	movs	r3, #0
 8005564:	e05c      	b.n	8005620 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005568:	2b00      	cmp	r3, #0
 800556a:	d106      	bne.n	800557a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800556c:	f107 0314 	add.w	r3, r7, #20
 8005570:	4618      	mov	r0, r3
 8005572:	f001 fb47 	bl	8006c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005576:	2301      	movs	r3, #1
 8005578:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800557a:	f002 fb45 	bl	8007c08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800557e:	f001 f8a3 	bl	80066c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005582:	f002 fb0b 	bl	8007b9c <vPortEnterCritical>
 8005586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005588:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800558c:	b25b      	sxtb	r3, r3
 800558e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005592:	d103      	bne.n	800559c <xQueueGenericSend+0x184>
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055a2:	b25b      	sxtb	r3, r3
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d103      	bne.n	80055b2 <xQueueGenericSend+0x19a>
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055b2:	f002 fb29 	bl	8007c08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055b6:	1d3a      	adds	r2, r7, #4
 80055b8:	f107 0314 	add.w	r3, r7, #20
 80055bc:	4611      	mov	r1, r2
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 fb36 	bl	8006c30 <xTaskCheckForTimeOut>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d124      	bne.n	8005614 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055cc:	f000 fd6a 	bl	80060a4 <prvIsQueueFull>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d018      	beq.n	8005608 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	3310      	adds	r3, #16
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	4611      	mov	r1, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 fa54 	bl	8006a8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055e6:	f000 fcf5 	bl	8005fd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055ea:	f001 f87b 	bl	80066e4 <xTaskResumeAll>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f47f af7c 	bne.w	80054ee <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80055f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005628 <xQueueGenericSend+0x210>)
 80055f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	e772      	b.n	80054ee <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800560a:	f000 fce3 	bl	8005fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800560e:	f001 f869 	bl	80066e4 <xTaskResumeAll>
 8005612:	e76c      	b.n	80054ee <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005616:	f000 fcdd 	bl	8005fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800561a:	f001 f863 	bl	80066e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800561e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005620:	4618      	mov	r0, r3
 8005622:	3738      	adds	r7, #56	@ 0x38
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	e000ed04 	.word	0xe000ed04

0800562c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08e      	sub	sp, #56	@ 0x38
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800563e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10d      	bne.n	8005660 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005648:	b672      	cpsid	i
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	b662      	cpsie	i
 8005658:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	e7fd      	b.n	800565c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d103      	bne.n	800566e <xQueueGenericSendFromISR+0x42>
 8005666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <xQueueGenericSendFromISR+0x46>
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <xQueueGenericSendFromISR+0x48>
 8005672:	2300      	movs	r3, #0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10d      	bne.n	8005694 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567c:	b672      	cpsid	i
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	b662      	cpsie	i
 800568c:	623b      	str	r3, [r7, #32]
}
 800568e:	bf00      	nop
 8005690:	bf00      	nop
 8005692:	e7fd      	b.n	8005690 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d103      	bne.n	80056a2 <xQueueGenericSendFromISR+0x76>
 800569a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <xQueueGenericSendFromISR+0x7a>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <xQueueGenericSendFromISR+0x7c>
 80056a6:	2300      	movs	r3, #0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10d      	bne.n	80056c8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b0:	b672      	cpsid	i
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	b662      	cpsie	i
 80056c0:	61fb      	str	r3, [r7, #28]
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056c8:	f002 fb50 	bl	8007d6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056cc:	f3ef 8211 	mrs	r2, BASEPRI
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	b672      	cpsid	i
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	b662      	cpsie	i
 80056e4:	61ba      	str	r2, [r7, #24]
 80056e6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d302      	bcc.n	80056fe <xQueueGenericSendFromISR+0xd2>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d12c      	bne.n	8005758 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005704:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800570e:	f000 fbd1 	bl	8005eb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005712:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d112      	bne.n	8005742 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800571c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	d016      	beq.n	8005752 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005726:	3324      	adds	r3, #36	@ 0x24
 8005728:	4618      	mov	r0, r3
 800572a:	f001 fa05 	bl	8006b38 <xTaskRemoveFromEventList>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00e      	beq.n	8005752 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00b      	beq.n	8005752 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	e007      	b.n	8005752 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005742:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005746:	3301      	adds	r3, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	b25a      	sxtb	r2, r3
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005752:	2301      	movs	r3, #1
 8005754:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005756:	e001      	b.n	800575c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005758:	2300      	movs	r3, #0
 800575a:	637b      	str	r3, [r7, #52]	@ 0x34
 800575c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005766:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800576a:	4618      	mov	r0, r3
 800576c:	3738      	adds	r7, #56	@ 0x38
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b08e      	sub	sp, #56	@ 0x38
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10d      	bne.n	80057a2 <xQueueGiveFromISR+0x30>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	b672      	cpsid	i
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	b662      	cpsie	i
 800579a:	623b      	str	r3, [r7, #32]
}
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	e7fd      	b.n	800579e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00d      	beq.n	80057c6 <xQueueGiveFromISR+0x54>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ae:	b672      	cpsid	i
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	b662      	cpsie	i
 80057be:	61fb      	str	r3, [r7, #28]
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	e7fd      	b.n	80057c2 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80057c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d103      	bne.n	80057d6 <xQueueGiveFromISR+0x64>
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <xQueueGiveFromISR+0x68>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <xQueueGiveFromISR+0x6a>
 80057da:	2300      	movs	r3, #0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10d      	bne.n	80057fc <xQueueGiveFromISR+0x8a>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	b672      	cpsid	i
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	b662      	cpsie	i
 80057f4:	61bb      	str	r3, [r7, #24]
}
 80057f6:	bf00      	nop
 80057f8:	bf00      	nop
 80057fa:	e7fd      	b.n	80057f8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057fc:	f002 fab6 	bl	8007d6c <vPortValidateInterruptPriority>
	__asm volatile
 8005800:	f3ef 8211 	mrs	r2, BASEPRI
 8005804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005808:	b672      	cpsid	i
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	b662      	cpsie	i
 8005818:	617a      	str	r2, [r7, #20]
 800581a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800581c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800581e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800582c:	429a      	cmp	r2, r3
 800582e:	d22b      	bcs.n	8005888 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005832:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800583a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005842:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d112      	bne.n	8005872 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800584c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005850:	2b00      	cmp	r3, #0
 8005852:	d016      	beq.n	8005882 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005856:	3324      	adds	r3, #36	@ 0x24
 8005858:	4618      	mov	r0, r3
 800585a:	f001 f96d 	bl	8006b38 <xTaskRemoveFromEventList>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00e      	beq.n	8005882 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2201      	movs	r2, #1
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	e007      	b.n	8005882 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005876:	3301      	adds	r3, #1
 8005878:	b2db      	uxtb	r3, r3
 800587a:	b25a      	sxtb	r2, r3
 800587c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005882:	2301      	movs	r3, #1
 8005884:	637b      	str	r3, [r7, #52]	@ 0x34
 8005886:	e001      	b.n	800588c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005888:	2300      	movs	r3, #0
 800588a:	637b      	str	r3, [r7, #52]	@ 0x34
 800588c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f383 8811 	msr	BASEPRI, r3
}
 8005896:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800589a:	4618      	mov	r0, r3
 800589c:	3738      	adds	r7, #56	@ 0x38
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08c      	sub	sp, #48	@ 0x30
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058b0:	2300      	movs	r3, #0
 80058b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10d      	bne.n	80058da <xQueueReceive+0x36>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c2:	b672      	cpsid	i
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	b662      	cpsie	i
 80058d2:	623b      	str	r3, [r7, #32]
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop
 80058d8:	e7fd      	b.n	80058d6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d103      	bne.n	80058e8 <xQueueReceive+0x44>
 80058e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <xQueueReceive+0x48>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <xQueueReceive+0x4a>
 80058ec:	2300      	movs	r3, #0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10d      	bne.n	800590e <xQueueReceive+0x6a>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	b672      	cpsid	i
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	b662      	cpsie	i
 8005906:	61fb      	str	r3, [r7, #28]
}
 8005908:	bf00      	nop
 800590a:	bf00      	nop
 800590c:	e7fd      	b.n	800590a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800590e:	f001 fae1 	bl	8006ed4 <xTaskGetSchedulerState>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <xQueueReceive+0x7a>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <xQueueReceive+0x7e>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <xQueueReceive+0x80>
 8005922:	2300      	movs	r3, #0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10d      	bne.n	8005944 <xQueueReceive+0xa0>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592c:	b672      	cpsid	i
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	b662      	cpsie	i
 800593c:	61bb      	str	r3, [r7, #24]
}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005944:	f002 f92a 	bl	8007b9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01f      	beq.n	8005994 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005958:	f000 fb16 	bl	8005f88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800595c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595e:	1e5a      	subs	r2, r3, #1
 8005960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005962:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00f      	beq.n	800598c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596e:	3310      	adds	r3, #16
 8005970:	4618      	mov	r0, r3
 8005972:	f001 f8e1 	bl	8006b38 <xTaskRemoveFromEventList>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800597c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a70 <xQueueReceive+0x1cc>)
 800597e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800598c:	f002 f93c 	bl	8007c08 <vPortExitCritical>
				return pdPASS;
 8005990:	2301      	movs	r3, #1
 8005992:	e069      	b.n	8005a68 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d103      	bne.n	80059a2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800599a:	f002 f935 	bl	8007c08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800599e:	2300      	movs	r3, #0
 80059a0:	e062      	b.n	8005a68 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059a8:	f107 0310 	add.w	r3, r7, #16
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 f929 	bl	8006c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059b2:	2301      	movs	r3, #1
 80059b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059b6:	f002 f927 	bl	8007c08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059ba:	f000 fe85 	bl	80066c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059be:	f002 f8ed 	bl	8007b9c <vPortEnterCritical>
 80059c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059c8:	b25b      	sxtb	r3, r3
 80059ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ce:	d103      	bne.n	80059d8 <xQueueReceive+0x134>
 80059d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059de:	b25b      	sxtb	r3, r3
 80059e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e4:	d103      	bne.n	80059ee <xQueueReceive+0x14a>
 80059e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059ee:	f002 f90b 	bl	8007c08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059f2:	1d3a      	adds	r2, r7, #4
 80059f4:	f107 0310 	add.w	r3, r7, #16
 80059f8:	4611      	mov	r1, r2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f001 f918 	bl	8006c30 <xTaskCheckForTimeOut>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d123      	bne.n	8005a4e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a08:	f000 fb36 	bl	8006078 <prvIsQueueEmpty>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d017      	beq.n	8005a42 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a14:	3324      	adds	r3, #36	@ 0x24
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	4611      	mov	r1, r2
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f001 f836 	bl	8006a8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a22:	f000 fad7 	bl	8005fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a26:	f000 fe5d 	bl	80066e4 <xTaskResumeAll>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d189      	bne.n	8005944 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005a30:	4b0f      	ldr	r3, [pc, #60]	@ (8005a70 <xQueueReceive+0x1cc>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	e780      	b.n	8005944 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a44:	f000 fac6 	bl	8005fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a48:	f000 fe4c 	bl	80066e4 <xTaskResumeAll>
 8005a4c:	e77a      	b.n	8005944 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a50:	f000 fac0 	bl	8005fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a54:	f000 fe46 	bl	80066e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a5a:	f000 fb0d 	bl	8006078 <prvIsQueueEmpty>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f43f af6f 	beq.w	8005944 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3730      	adds	r7, #48	@ 0x30
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	e000ed04 	.word	0xe000ed04

08005a74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08e      	sub	sp, #56	@ 0x38
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10d      	bne.n	8005aac <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	b672      	cpsid	i
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	b662      	cpsie	i
 8005aa4:	623b      	str	r3, [r7, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	e7fd      	b.n	8005aa8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00d      	beq.n	8005ad0 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab8:	b672      	cpsid	i
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	b662      	cpsie	i
 8005ac8:	61fb      	str	r3, [r7, #28]
}
 8005aca:	bf00      	nop
 8005acc:	bf00      	nop
 8005ace:	e7fd      	b.n	8005acc <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ad0:	f001 fa00 	bl	8006ed4 <xTaskGetSchedulerState>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d102      	bne.n	8005ae0 <xQueueSemaphoreTake+0x6c>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <xQueueSemaphoreTake+0x70>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <xQueueSemaphoreTake+0x72>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10d      	bne.n	8005b06 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aee:	b672      	cpsid	i
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	b662      	cpsie	i
 8005afe:	61bb      	str	r3, [r7, #24]
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	e7fd      	b.n	8005b02 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b06:	f002 f849 	bl	8007b9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d024      	beq.n	8005b60 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b18:	1e5a      	subs	r2, r3, #1
 8005b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b26:	f001 fb57 	bl	80071d8 <pvTaskIncrementMutexHeldCount>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00f      	beq.n	8005b58 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3a:	3310      	adds	r3, #16
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fffb 	bl	8006b38 <xTaskRemoveFromEventList>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b48:	4b55      	ldr	r3, [pc, #340]	@ (8005ca0 <xQueueSemaphoreTake+0x22c>)
 8005b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b58:	f002 f856 	bl	8007c08 <vPortExitCritical>
				return pdPASS;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e09a      	b.n	8005c96 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d114      	bne.n	8005b90 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00d      	beq.n	8005b88 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b70:	b672      	cpsid	i
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	b662      	cpsie	i
 8005b80:	617b      	str	r3, [r7, #20]
}
 8005b82:	bf00      	nop
 8005b84:	bf00      	nop
 8005b86:	e7fd      	b.n	8005b84 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b88:	f002 f83e 	bl	8007c08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e082      	b.n	8005c96 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b96:	f107 030c 	add.w	r3, r7, #12
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 f832 	bl	8006c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ba4:	f002 f830 	bl	8007c08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ba8:	f000 fd8e 	bl	80066c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bac:	f001 fff6 	bl	8007b9c <vPortEnterCritical>
 8005bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bb6:	b25b      	sxtb	r3, r3
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d103      	bne.n	8005bc6 <xQueueSemaphoreTake+0x152>
 8005bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bcc:	b25b      	sxtb	r3, r3
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d103      	bne.n	8005bdc <xQueueSemaphoreTake+0x168>
 8005bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bdc:	f002 f814 	bl	8007c08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005be0:	463a      	mov	r2, r7
 8005be2:	f107 030c 	add.w	r3, r7, #12
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f001 f821 	bl	8006c30 <xTaskCheckForTimeOut>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d132      	bne.n	8005c5a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bf6:	f000 fa3f 	bl	8006078 <prvIsQueueEmpty>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d026      	beq.n	8005c4e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005c08:	f001 ffc8 	bl	8007b9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 f97d 	bl	8006f10 <xTaskPriorityInherit>
 8005c16:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005c18:	f001 fff6 	bl	8007c08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1e:	3324      	adds	r3, #36	@ 0x24
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	4611      	mov	r1, r2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 ff31 	bl	8006a8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c2c:	f000 f9d2 	bl	8005fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c30:	f000 fd58 	bl	80066e4 <xTaskResumeAll>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f47f af65 	bne.w	8005b06 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005c3c:	4b18      	ldr	r3, [pc, #96]	@ (8005ca0 <xQueueSemaphoreTake+0x22c>)
 8005c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	e75b      	b.n	8005b06 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c50:	f000 f9c0 	bl	8005fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c54:	f000 fd46 	bl	80066e4 <xTaskResumeAll>
 8005c58:	e755      	b.n	8005b06 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c5c:	f000 f9ba 	bl	8005fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c60:	f000 fd40 	bl	80066e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c66:	f000 fa07 	bl	8006078 <prvIsQueueEmpty>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f43f af4a 	beq.w	8005b06 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00d      	beq.n	8005c94 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005c78:	f001 ff90 	bl	8007b9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c7e:	f000 f901 	bl	8005e84 <prvGetDisinheritPriorityAfterTimeout>
 8005c82:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f001 fa1c 	bl	80070c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c90:	f001 ffba 	bl	8007c08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3738      	adds	r7, #56	@ 0x38
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	e000ed04 	.word	0xe000ed04

08005ca4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08e      	sub	sp, #56	@ 0x38
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10d      	bne.n	8005cd6 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbe:	b672      	cpsid	i
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	b662      	cpsie	i
 8005cce:	623b      	str	r3, [r7, #32]
}
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	e7fd      	b.n	8005cd2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d103      	bne.n	8005ce4 <xQueueReceiveFromISR+0x40>
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <xQueueReceiveFromISR+0x44>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <xQueueReceiveFromISR+0x46>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10d      	bne.n	8005d0a <xQueueReceiveFromISR+0x66>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf2:	b672      	cpsid	i
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	b662      	cpsie	i
 8005d02:	61fb      	str	r3, [r7, #28]
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop
 8005d08:	e7fd      	b.n	8005d06 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d0a:	f002 f82f 	bl	8007d6c <vPortValidateInterruptPriority>
	__asm volatile
 8005d0e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d16:	b672      	cpsid	i
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	b662      	cpsie	i
 8005d26:	61ba      	str	r2, [r7, #24]
 8005d28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d32:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d02f      	beq.n	8005d9a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d44:	68b9      	ldr	r1, [r7, #8]
 8005d46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d48:	f000 f91e 	bl	8005f88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4e:	1e5a      	subs	r2, r3, #1
 8005d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d52:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d112      	bne.n	8005d84 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d016      	beq.n	8005d94 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	3310      	adds	r3, #16
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fee4 	bl	8006b38 <xTaskRemoveFromEventList>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00e      	beq.n	8005d94 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00b      	beq.n	8005d94 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	e007      	b.n	8005d94 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d88:	3301      	adds	r3, #1
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	b25a      	sxtb	r2, r3
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005d94:	2301      	movs	r3, #1
 8005d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d98:	e001      	b.n	8005d9e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f383 8811 	msr	BASEPRI, r3
}
 8005da8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3738      	adds	r7, #56	@ 0x38
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10d      	bne.n	8005dde <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc6:	b672      	cpsid	i
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	b662      	cpsie	i
 8005dd6:	60bb      	str	r3, [r7, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	bf00      	nop
 8005ddc:	e7fd      	b.n	8005dda <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8005dde:	f001 fedd 	bl	8007b9c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005de8:	f001 ff0e 	bl	8007c08 <vPortExitCritical>

	return uxReturn;
 8005dec:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005df6:	b480      	push	{r7}
 8005df8:	b087      	sub	sp, #28
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10d      	bne.n	8005e24 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0c:	b672      	cpsid	i
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	b662      	cpsie	i
 8005e1c:	60fb      	str	r3, [r7, #12]
}
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e28:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005e2a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10d      	bne.n	8005e66 <vQueueDelete+0x2e>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4e:	b672      	cpsid	i
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	b662      	cpsie	i
 8005e5e:	60bb      	str	r3, [r7, #8]
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	e7fd      	b.n	8005e62 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f95e 	bl	8006128 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f002 f88c 	bl	8007f94 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d006      	beq.n	8005ea2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	e001      	b.n	8005ea6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
	}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10d      	bne.n	8005eee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d14d      	bne.n	8005f76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 f87e 	bl	8006fe0 <xTaskPriorityDisinherit>
 8005ee4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	609a      	str	r2, [r3, #8]
 8005eec:	e043      	b.n	8005f76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d119      	bne.n	8005f28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6858      	ldr	r0, [r3, #4]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efc:	461a      	mov	r2, r3
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	f002 f9f0 	bl	80082e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	441a      	add	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d32b      	bcc.n	8005f76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	605a      	str	r2, [r3, #4]
 8005f26:	e026      	b.n	8005f76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	68d8      	ldr	r0, [r3, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f30:	461a      	mov	r2, r3
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	f002 f9d6 	bl	80082e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f40:	425b      	negs	r3, r3
 8005f42:	441a      	add	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d207      	bcs.n	8005f64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	425b      	negs	r3, r3
 8005f5e:	441a      	add	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d105      	bne.n	8005f76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005f7e:	697b      	ldr	r3, [r7, #20]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d018      	beq.n	8005fcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	441a      	add	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d303      	bcc.n	8005fbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68d9      	ldr	r1, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6838      	ldr	r0, [r7, #0]
 8005fc8:	f002 f98c 	bl	80082e4 <memcpy>
	}
}
 8005fcc:	bf00      	nop
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fdc:	f001 fdde 	bl	8007b9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fe8:	e011      	b.n	800600e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d012      	beq.n	8006018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3324      	adds	r3, #36	@ 0x24
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fd9e 	bl	8006b38 <xTaskRemoveFromEventList>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006002:	f000 fe7d 	bl	8006d00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	3b01      	subs	r3, #1
 800600a:	b2db      	uxtb	r3, r3
 800600c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800600e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006012:	2b00      	cmp	r3, #0
 8006014:	dce9      	bgt.n	8005fea <prvUnlockQueue+0x16>
 8006016:	e000      	b.n	800601a <prvUnlockQueue+0x46>
					break;
 8006018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	22ff      	movs	r2, #255	@ 0xff
 800601e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006022:	f001 fdf1 	bl	8007c08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006026:	f001 fdb9 	bl	8007b9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006032:	e011      	b.n	8006058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d012      	beq.n	8006062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3310      	adds	r3, #16
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fd79 	bl	8006b38 <xTaskRemoveFromEventList>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800604c:	f000 fe58 	bl	8006d00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006050:	7bbb      	ldrb	r3, [r7, #14]
 8006052:	3b01      	subs	r3, #1
 8006054:	b2db      	uxtb	r3, r3
 8006056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800605c:	2b00      	cmp	r3, #0
 800605e:	dce9      	bgt.n	8006034 <prvUnlockQueue+0x60>
 8006060:	e000      	b.n	8006064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	22ff      	movs	r2, #255	@ 0xff
 8006068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800606c:	f001 fdcc 	bl	8007c08 <vPortExitCritical>
}
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006080:	f001 fd8c 	bl	8007b9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800608c:	2301      	movs	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	e001      	b.n	8006096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006096:	f001 fdb7 	bl	8007c08 <vPortExitCritical>

	return xReturn;
 800609a:	68fb      	ldr	r3, [r7, #12]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060ac:	f001 fd76 	bl	8007b9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d102      	bne.n	80060c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060bc:	2301      	movs	r3, #1
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	e001      	b.n	80060c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060c6:	f001 fd9f 	bl	8007c08 <vPortExitCritical>

	return xReturn;
 80060ca:	68fb      	ldr	r3, [r7, #12]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	e014      	b.n	800610e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060e4:	4a0f      	ldr	r2, [pc, #60]	@ (8006124 <vQueueAddToRegistry+0x50>)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10b      	bne.n	8006108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060f0:	490c      	ldr	r1, [pc, #48]	@ (8006124 <vQueueAddToRegistry+0x50>)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006124 <vQueueAddToRegistry+0x50>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4413      	add	r3, r2
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006106:	e006      	b.n	8006116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3301      	adds	r3, #1
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b07      	cmp	r3, #7
 8006112:	d9e7      	bls.n	80060e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006114:	bf00      	nop
 8006116:	bf00      	nop
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	20000fcc 	.word	0x20000fcc

08006128 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e016      	b.n	8006164 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006136:	4a10      	ldr	r2, [pc, #64]	@ (8006178 <vQueueUnregisterQueue+0x50>)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4413      	add	r3, r2
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	429a      	cmp	r2, r3
 8006144:	d10b      	bne.n	800615e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006146:	4a0c      	ldr	r2, [pc, #48]	@ (8006178 <vQueueUnregisterQueue+0x50>)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2100      	movs	r1, #0
 800614c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006150:	4a09      	ldr	r2, [pc, #36]	@ (8006178 <vQueueUnregisterQueue+0x50>)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	4413      	add	r3, r2
 8006158:	2200      	movs	r2, #0
 800615a:	605a      	str	r2, [r3, #4]
				break;
 800615c:	e006      	b.n	800616c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3301      	adds	r3, #1
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b07      	cmp	r3, #7
 8006168:	d9e5      	bls.n	8006136 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800616a:	bf00      	nop
 800616c:	bf00      	nop
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	20000fcc 	.word	0x20000fcc

0800617c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800618c:	f001 fd06 	bl	8007b9c <vPortEnterCritical>
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006196:	b25b      	sxtb	r3, r3
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d103      	bne.n	80061a6 <vQueueWaitForMessageRestricted+0x2a>
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061ac:	b25b      	sxtb	r3, r3
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d103      	bne.n	80061bc <vQueueWaitForMessageRestricted+0x40>
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061bc:	f001 fd24 	bl	8007c08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d106      	bne.n	80061d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	3324      	adds	r3, #36	@ 0x24
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	68b9      	ldr	r1, [r7, #8]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fc83 	bl	8006adc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061d6:	6978      	ldr	r0, [r7, #20]
 80061d8:	f7ff fefc 	bl	8005fd4 <prvUnlockQueue>
	}
 80061dc:	bf00      	nop
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08e      	sub	sp, #56	@ 0x38
 80061e8:	af04      	add	r7, sp, #16
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10d      	bne.n	8006214 <xTaskCreateStatic+0x30>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	b672      	cpsid	i
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	b662      	cpsie	i
 800620c:	623b      	str	r3, [r7, #32]
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10d      	bne.n	8006236 <xTaskCreateStatic+0x52>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	b672      	cpsid	i
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	b662      	cpsie	i
 800622e:	61fb      	str	r3, [r7, #28]
}
 8006230:	bf00      	nop
 8006232:	bf00      	nop
 8006234:	e7fd      	b.n	8006232 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006236:	23a8      	movs	r3, #168	@ 0xa8
 8006238:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2ba8      	cmp	r3, #168	@ 0xa8
 800623e:	d00d      	beq.n	800625c <xTaskCreateStatic+0x78>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006244:	b672      	cpsid	i
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	b662      	cpsie	i
 8006254:	61bb      	str	r3, [r7, #24]
}
 8006256:	bf00      	nop
 8006258:	bf00      	nop
 800625a:	e7fd      	b.n	8006258 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800625c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800625e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01e      	beq.n	80062a2 <xTaskCreateStatic+0xbe>
 8006264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006266:	2b00      	cmp	r3, #0
 8006268:	d01b      	beq.n	80062a2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800626a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006272:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	2202      	movs	r2, #2
 8006278:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800627c:	2300      	movs	r3, #0
 800627e:	9303      	str	r3, [sp, #12]
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	9302      	str	r3, [sp, #8]
 8006284:	f107 0314 	add.w	r3, r7, #20
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 f851 	bl	800633c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800629a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800629c:	f000 f8f8 	bl	8006490 <prvAddNewTaskToReadyList>
 80062a0:	e001      	b.n	80062a6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062a6:	697b      	ldr	r3, [r7, #20]
	}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3728      	adds	r7, #40	@ 0x28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08c      	sub	sp, #48	@ 0x30
 80062b4:	af04      	add	r7, sp, #16
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062c0:	88fb      	ldrh	r3, [r7, #6]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 fd97 	bl	8007df8 <pvPortMalloc>
 80062ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00e      	beq.n	80062f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062d2:	20a8      	movs	r0, #168	@ 0xa8
 80062d4:	f001 fd90 	bl	8007df8 <pvPortMalloc>
 80062d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80062e6:	e005      	b.n	80062f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062e8:	6978      	ldr	r0, [r7, #20]
 80062ea:	f001 fe53 	bl	8007f94 <vPortFree>
 80062ee:	e001      	b.n	80062f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062f0:	2300      	movs	r3, #0
 80062f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d017      	beq.n	800632a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006302:	88fa      	ldrh	r2, [r7, #6]
 8006304:	2300      	movs	r3, #0
 8006306:	9303      	str	r3, [sp, #12]
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	9302      	str	r3, [sp, #8]
 800630c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f80f 	bl	800633c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800631e:	69f8      	ldr	r0, [r7, #28]
 8006320:	f000 f8b6 	bl	8006490 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006324:	2301      	movs	r3, #1
 8006326:	61bb      	str	r3, [r7, #24]
 8006328:	e002      	b.n	8006330 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800632a:	f04f 33ff 	mov.w	r3, #4294967295
 800632e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006330:	69bb      	ldr	r3, [r7, #24]
	}
 8006332:	4618      	mov	r0, r3
 8006334:	3720      	adds	r7, #32
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800634a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	461a      	mov	r2, r3
 8006354:	21a5      	movs	r1, #165	@ 0xa5
 8006356:	f001 ff39 	bl	80081cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006364:	440b      	add	r3, r1
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	f023 0307 	bic.w	r3, r3, #7
 8006372:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00d      	beq.n	800639a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	b672      	cpsid	i
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	b662      	cpsie	i
 8006392:	617b      	str	r3, [r7, #20]
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	e7fd      	b.n	8006396 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01f      	beq.n	80063e0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063a0:	2300      	movs	r3, #0
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	e012      	b.n	80063cc <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	4413      	add	r3, r2
 80063ac:	7819      	ldrb	r1, [r3, #0]
 80063ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	4413      	add	r3, r2
 80063b4:	3334      	adds	r3, #52	@ 0x34
 80063b6:	460a      	mov	r2, r1
 80063b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d006      	beq.n	80063d4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	3301      	adds	r3, #1
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	2b0f      	cmp	r3, #15
 80063d0:	d9e9      	bls.n	80063a6 <prvInitialiseNewTask+0x6a>
 80063d2:	e000      	b.n	80063d6 <prvInitialiseNewTask+0x9a>
			{
				break;
 80063d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063de:	e003      	b.n	80063e8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ea:	2b37      	cmp	r3, #55	@ 0x37
 80063ec:	d901      	bls.n	80063f2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063ee:	2337      	movs	r3, #55	@ 0x37
 80063f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063fc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006400:	2200      	movs	r2, #0
 8006402:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006406:	3304      	adds	r3, #4
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fda1 	bl	8004f50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800640e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006410:	3318      	adds	r3, #24
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fd9c 	bl	8004f50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800641c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800641e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006420:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800642c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	2200      	movs	r2, #0
 8006432:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	2200      	movs	r2, #0
 800643a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	3354      	adds	r3, #84	@ 0x54
 8006442:	224c      	movs	r2, #76	@ 0x4c
 8006444:	2100      	movs	r1, #0
 8006446:	4618      	mov	r0, r3
 8006448:	f001 fec0 	bl	80081cc <memset>
 800644c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644e:	4a0d      	ldr	r2, [pc, #52]	@ (8006484 <prvInitialiseNewTask+0x148>)
 8006450:	659a      	str	r2, [r3, #88]	@ 0x58
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	4a0c      	ldr	r2, [pc, #48]	@ (8006488 <prvInitialiseNewTask+0x14c>)
 8006456:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645a:	4a0c      	ldr	r2, [pc, #48]	@ (800648c <prvInitialiseNewTask+0x150>)
 800645c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	68f9      	ldr	r1, [r7, #12]
 8006462:	69b8      	ldr	r0, [r7, #24]
 8006464:	f001 fa88 	bl	8007978 <pxPortInitialiseStack>
 8006468:	4602      	mov	r2, r0
 800646a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800646e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800647a:	bf00      	nop
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20005258 	.word	0x20005258
 8006488:	200052c0 	.word	0x200052c0
 800648c:	20005328 	.word	0x20005328

08006490 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006498:	f001 fb80 	bl	8007b9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800649c:	4b2d      	ldr	r3, [pc, #180]	@ (8006554 <prvAddNewTaskToReadyList+0xc4>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3301      	adds	r3, #1
 80064a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006554 <prvAddNewTaskToReadyList+0xc4>)
 80064a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006558 <prvAddNewTaskToReadyList+0xc8>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006558 <prvAddNewTaskToReadyList+0xc8>)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064b4:	4b27      	ldr	r3, [pc, #156]	@ (8006554 <prvAddNewTaskToReadyList+0xc4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d110      	bne.n	80064de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064bc:	f000 fc44 	bl	8006d48 <prvInitialiseTaskLists>
 80064c0:	e00d      	b.n	80064de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064c2:	4b26      	ldr	r3, [pc, #152]	@ (800655c <prvAddNewTaskToReadyList+0xcc>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d109      	bne.n	80064de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064ca:	4b23      	ldr	r3, [pc, #140]	@ (8006558 <prvAddNewTaskToReadyList+0xc8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d802      	bhi.n	80064de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006558 <prvAddNewTaskToReadyList+0xc8>)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064de:	4b20      	ldr	r3, [pc, #128]	@ (8006560 <prvAddNewTaskToReadyList+0xd0>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3301      	adds	r3, #1
 80064e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006560 <prvAddNewTaskToReadyList+0xd0>)
 80064e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006560 <prvAddNewTaskToReadyList+0xd0>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006564 <prvAddNewTaskToReadyList+0xd4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d903      	bls.n	8006504 <prvAddNewTaskToReadyList+0x74>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006500:	4a18      	ldr	r2, [pc, #96]	@ (8006564 <prvAddNewTaskToReadyList+0xd4>)
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4a15      	ldr	r2, [pc, #84]	@ (8006568 <prvAddNewTaskToReadyList+0xd8>)
 8006512:	441a      	add	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3304      	adds	r3, #4
 8006518:	4619      	mov	r1, r3
 800651a:	4610      	mov	r0, r2
 800651c:	f7fe fd25 	bl	8004f6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006520:	f001 fb72 	bl	8007c08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006524:	4b0d      	ldr	r3, [pc, #52]	@ (800655c <prvAddNewTaskToReadyList+0xcc>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00e      	beq.n	800654a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800652c:	4b0a      	ldr	r3, [pc, #40]	@ (8006558 <prvAddNewTaskToReadyList+0xc8>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006536:	429a      	cmp	r2, r3
 8006538:	d207      	bcs.n	800654a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800653a:	4b0c      	ldr	r3, [pc, #48]	@ (800656c <prvAddNewTaskToReadyList+0xdc>)
 800653c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200014e0 	.word	0x200014e0
 8006558:	2000100c 	.word	0x2000100c
 800655c:	200014ec 	.word	0x200014ec
 8006560:	200014fc 	.word	0x200014fc
 8006564:	200014e8 	.word	0x200014e8
 8006568:	20001010 	.word	0x20001010
 800656c:	e000ed04 	.word	0xe000ed04

08006570 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006578:	2300      	movs	r3, #0
 800657a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d01a      	beq.n	80065b8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006582:	4b15      	ldr	r3, [pc, #84]	@ (80065d8 <vTaskDelay+0x68>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00d      	beq.n	80065a6 <vTaskDelay+0x36>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658e:	b672      	cpsid	i
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	b662      	cpsie	i
 800659e:	60bb      	str	r3, [r7, #8]
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	e7fd      	b.n	80065a2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80065a6:	f000 f88f 	bl	80066c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065aa:	2100      	movs	r1, #0
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fe27 	bl	8007200 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065b2:	f000 f897 	bl	80066e4 <xTaskResumeAll>
 80065b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d107      	bne.n	80065ce <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80065be:	4b07      	ldr	r3, [pc, #28]	@ (80065dc <vTaskDelay+0x6c>)
 80065c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20001508 	.word	0x20001508
 80065dc:	e000ed04 	.word	0xe000ed04

080065e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	@ 0x28
 80065e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065ee:	463a      	mov	r2, r7
 80065f0:	1d39      	adds	r1, r7, #4
 80065f2:	f107 0308 	add.w	r3, r7, #8
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe fc56 	bl	8004ea8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	9202      	str	r2, [sp, #8]
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	2300      	movs	r3, #0
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	2300      	movs	r3, #0
 800660c:	460a      	mov	r2, r1
 800660e:	4926      	ldr	r1, [pc, #152]	@ (80066a8 <vTaskStartScheduler+0xc8>)
 8006610:	4826      	ldr	r0, [pc, #152]	@ (80066ac <vTaskStartScheduler+0xcc>)
 8006612:	f7ff fde7 	bl	80061e4 <xTaskCreateStatic>
 8006616:	4603      	mov	r3, r0
 8006618:	4a25      	ldr	r2, [pc, #148]	@ (80066b0 <vTaskStartScheduler+0xd0>)
 800661a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800661c:	4b24      	ldr	r3, [pc, #144]	@ (80066b0 <vTaskStartScheduler+0xd0>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006624:	2301      	movs	r3, #1
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	e001      	b.n	800662e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d102      	bne.n	800663a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006634:	f000 fe38 	bl	80072a8 <xTimerCreateTimerTask>
 8006638:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d11d      	bne.n	800667c <vTaskStartScheduler+0x9c>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006644:	b672      	cpsid	i
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	b662      	cpsie	i
 8006654:	613b      	str	r3, [r7, #16]
}
 8006656:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006658:	4b16      	ldr	r3, [pc, #88]	@ (80066b4 <vTaskStartScheduler+0xd4>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3354      	adds	r3, #84	@ 0x54
 800665e:	4a16      	ldr	r2, [pc, #88]	@ (80066b8 <vTaskStartScheduler+0xd8>)
 8006660:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006662:	4b16      	ldr	r3, [pc, #88]	@ (80066bc <vTaskStartScheduler+0xdc>)
 8006664:	f04f 32ff 	mov.w	r2, #4294967295
 8006668:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800666a:	4b15      	ldr	r3, [pc, #84]	@ (80066c0 <vTaskStartScheduler+0xe0>)
 800666c:	2201      	movs	r2, #1
 800666e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006670:	4b14      	ldr	r3, [pc, #80]	@ (80066c4 <vTaskStartScheduler+0xe4>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006676:	f001 fa13 	bl	8007aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800667a:	e011      	b.n	80066a0 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006682:	d10d      	bne.n	80066a0 <vTaskStartScheduler+0xc0>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006688:	b672      	cpsid	i
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	b662      	cpsie	i
 8006698:	60fb      	str	r3, [r7, #12]
}
 800669a:	bf00      	nop
 800669c:	bf00      	nop
 800669e:	e7fd      	b.n	800669c <vTaskStartScheduler+0xbc>
}
 80066a0:	bf00      	nop
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	0800844c 	.word	0x0800844c
 80066ac:	08006d19 	.word	0x08006d19
 80066b0:	20001504 	.word	0x20001504
 80066b4:	2000100c 	.word	0x2000100c
 80066b8:	20000010 	.word	0x20000010
 80066bc:	20001500 	.word	0x20001500
 80066c0:	200014ec 	.word	0x200014ec
 80066c4:	200014e4 	.word	0x200014e4

080066c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80066cc:	4b04      	ldr	r3, [pc, #16]	@ (80066e0 <vTaskSuspendAll+0x18>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	4a03      	ldr	r2, [pc, #12]	@ (80066e0 <vTaskSuspendAll+0x18>)
 80066d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80066d6:	bf00      	nop
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	20001508 	.word	0x20001508

080066e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066f2:	4b43      	ldr	r3, [pc, #268]	@ (8006800 <xTaskResumeAll+0x11c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10d      	bne.n	8006716 <xTaskResumeAll+0x32>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fe:	b672      	cpsid	i
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	b662      	cpsie	i
 800670e:	603b      	str	r3, [r7, #0]
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	e7fd      	b.n	8006712 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006716:	f001 fa41 	bl	8007b9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800671a:	4b39      	ldr	r3, [pc, #228]	@ (8006800 <xTaskResumeAll+0x11c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3b01      	subs	r3, #1
 8006720:	4a37      	ldr	r2, [pc, #220]	@ (8006800 <xTaskResumeAll+0x11c>)
 8006722:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006724:	4b36      	ldr	r3, [pc, #216]	@ (8006800 <xTaskResumeAll+0x11c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d162      	bne.n	80067f2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800672c:	4b35      	ldr	r3, [pc, #212]	@ (8006804 <xTaskResumeAll+0x120>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d05e      	beq.n	80067f2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006734:	e02f      	b.n	8006796 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006736:	4b34      	ldr	r3, [pc, #208]	@ (8006808 <xTaskResumeAll+0x124>)
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3318      	adds	r3, #24
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe fc6e 	bl	8005024 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3304      	adds	r3, #4
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe fc69 	bl	8005024 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006756:	4b2d      	ldr	r3, [pc, #180]	@ (800680c <xTaskResumeAll+0x128>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d903      	bls.n	8006766 <xTaskResumeAll+0x82>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006762:	4a2a      	ldr	r2, [pc, #168]	@ (800680c <xTaskResumeAll+0x128>)
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4a27      	ldr	r2, [pc, #156]	@ (8006810 <xTaskResumeAll+0x12c>)
 8006774:	441a      	add	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3304      	adds	r3, #4
 800677a:	4619      	mov	r1, r3
 800677c:	4610      	mov	r0, r2
 800677e:	f7fe fbf4 	bl	8004f6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006786:	4b23      	ldr	r3, [pc, #140]	@ (8006814 <xTaskResumeAll+0x130>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678c:	429a      	cmp	r2, r3
 800678e:	d302      	bcc.n	8006796 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006790:	4b21      	ldr	r3, [pc, #132]	@ (8006818 <xTaskResumeAll+0x134>)
 8006792:	2201      	movs	r2, #1
 8006794:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006796:	4b1c      	ldr	r3, [pc, #112]	@ (8006808 <xTaskResumeAll+0x124>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1cb      	bne.n	8006736 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067a4:	f000 fb76 	bl	8006e94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80067a8:	4b1c      	ldr	r3, [pc, #112]	@ (800681c <xTaskResumeAll+0x138>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d010      	beq.n	80067d6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067b4:	f000 f846 	bl	8006844 <xTaskIncrementTick>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80067be:	4b16      	ldr	r3, [pc, #88]	@ (8006818 <xTaskResumeAll+0x134>)
 80067c0:	2201      	movs	r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1f1      	bne.n	80067b4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80067d0:	4b12      	ldr	r3, [pc, #72]	@ (800681c <xTaskResumeAll+0x138>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067d6:	4b10      	ldr	r3, [pc, #64]	@ (8006818 <xTaskResumeAll+0x134>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067de:	2301      	movs	r3, #1
 80067e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006820 <xTaskResumeAll+0x13c>)
 80067e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067f2:	f001 fa09 	bl	8007c08 <vPortExitCritical>

	return xAlreadyYielded;
 80067f6:	68bb      	ldr	r3, [r7, #8]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20001508 	.word	0x20001508
 8006804:	200014e0 	.word	0x200014e0
 8006808:	200014a0 	.word	0x200014a0
 800680c:	200014e8 	.word	0x200014e8
 8006810:	20001010 	.word	0x20001010
 8006814:	2000100c 	.word	0x2000100c
 8006818:	200014f4 	.word	0x200014f4
 800681c:	200014f0 	.word	0x200014f0
 8006820:	e000ed04 	.word	0xe000ed04

08006824 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800682a:	4b05      	ldr	r3, [pc, #20]	@ (8006840 <xTaskGetTickCount+0x1c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006830:	687b      	ldr	r3, [r7, #4]
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	200014e4 	.word	0x200014e4

08006844 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800684a:	2300      	movs	r3, #0
 800684c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800684e:	4b50      	ldr	r3, [pc, #320]	@ (8006990 <xTaskIncrementTick+0x14c>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	f040 808c 	bne.w	8006970 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006858:	4b4e      	ldr	r3, [pc, #312]	@ (8006994 <xTaskIncrementTick+0x150>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3301      	adds	r3, #1
 800685e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006860:	4a4c      	ldr	r2, [pc, #304]	@ (8006994 <xTaskIncrementTick+0x150>)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d123      	bne.n	80068b4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800686c:	4b4a      	ldr	r3, [pc, #296]	@ (8006998 <xTaskIncrementTick+0x154>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00d      	beq.n	8006892 <xTaskIncrementTick+0x4e>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687a:	b672      	cpsid	i
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	b662      	cpsie	i
 800688a:	603b      	str	r3, [r7, #0]
}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	e7fd      	b.n	800688e <xTaskIncrementTick+0x4a>
 8006892:	4b41      	ldr	r3, [pc, #260]	@ (8006998 <xTaskIncrementTick+0x154>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	4b40      	ldr	r3, [pc, #256]	@ (800699c <xTaskIncrementTick+0x158>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a3e      	ldr	r2, [pc, #248]	@ (8006998 <xTaskIncrementTick+0x154>)
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	4a3e      	ldr	r2, [pc, #248]	@ (800699c <xTaskIncrementTick+0x158>)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	4b3e      	ldr	r3, [pc, #248]	@ (80069a0 <xTaskIncrementTick+0x15c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3301      	adds	r3, #1
 80068ac:	4a3c      	ldr	r2, [pc, #240]	@ (80069a0 <xTaskIncrementTick+0x15c>)
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	f000 faf0 	bl	8006e94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068b4:	4b3b      	ldr	r3, [pc, #236]	@ (80069a4 <xTaskIncrementTick+0x160>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d349      	bcc.n	8006952 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068be:	4b36      	ldr	r3, [pc, #216]	@ (8006998 <xTaskIncrementTick+0x154>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068c8:	4b36      	ldr	r3, [pc, #216]	@ (80069a4 <xTaskIncrementTick+0x160>)
 80068ca:	f04f 32ff 	mov.w	r2, #4294967295
 80068ce:	601a      	str	r2, [r3, #0]
					break;
 80068d0:	e03f      	b.n	8006952 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d2:	4b31      	ldr	r3, [pc, #196]	@ (8006998 <xTaskIncrementTick+0x154>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d203      	bcs.n	80068f2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068ea:	4a2e      	ldr	r2, [pc, #184]	@ (80069a4 <xTaskIncrementTick+0x160>)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068f0:	e02f      	b.n	8006952 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe fb94 	bl	8005024 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006900:	2b00      	cmp	r3, #0
 8006902:	d004      	beq.n	800690e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	3318      	adds	r3, #24
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe fb8b 	bl	8005024 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006912:	4b25      	ldr	r3, [pc, #148]	@ (80069a8 <xTaskIncrementTick+0x164>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d903      	bls.n	8006922 <xTaskIncrementTick+0xde>
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691e:	4a22      	ldr	r2, [pc, #136]	@ (80069a8 <xTaskIncrementTick+0x164>)
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4a1f      	ldr	r2, [pc, #124]	@ (80069ac <xTaskIncrementTick+0x168>)
 8006930:	441a      	add	r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	3304      	adds	r3, #4
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f7fe fb16 	bl	8004f6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006942:	4b1b      	ldr	r3, [pc, #108]	@ (80069b0 <xTaskIncrementTick+0x16c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006948:	429a      	cmp	r2, r3
 800694a:	d3b8      	bcc.n	80068be <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800694c:	2301      	movs	r3, #1
 800694e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006950:	e7b5      	b.n	80068be <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006952:	4b17      	ldr	r3, [pc, #92]	@ (80069b0 <xTaskIncrementTick+0x16c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006958:	4914      	ldr	r1, [pc, #80]	@ (80069ac <xTaskIncrementTick+0x168>)
 800695a:	4613      	mov	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	440b      	add	r3, r1
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d907      	bls.n	800697a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800696a:	2301      	movs	r3, #1
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	e004      	b.n	800697a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006970:	4b10      	ldr	r3, [pc, #64]	@ (80069b4 <xTaskIncrementTick+0x170>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3301      	adds	r3, #1
 8006976:	4a0f      	ldr	r2, [pc, #60]	@ (80069b4 <xTaskIncrementTick+0x170>)
 8006978:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800697a:	4b0f      	ldr	r3, [pc, #60]	@ (80069b8 <xTaskIncrementTick+0x174>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006982:	2301      	movs	r3, #1
 8006984:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006986:	697b      	ldr	r3, [r7, #20]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20001508 	.word	0x20001508
 8006994:	200014e4 	.word	0x200014e4
 8006998:	20001498 	.word	0x20001498
 800699c:	2000149c 	.word	0x2000149c
 80069a0:	200014f8 	.word	0x200014f8
 80069a4:	20001500 	.word	0x20001500
 80069a8:	200014e8 	.word	0x200014e8
 80069ac:	20001010 	.word	0x20001010
 80069b0:	2000100c 	.word	0x2000100c
 80069b4:	200014f0 	.word	0x200014f0
 80069b8:	200014f4 	.word	0x200014f4

080069bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069c2:	4b2c      	ldr	r3, [pc, #176]	@ (8006a74 <vTaskSwitchContext+0xb8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006a78 <vTaskSwitchContext+0xbc>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069d0:	e049      	b.n	8006a66 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80069d2:	4b29      	ldr	r3, [pc, #164]	@ (8006a78 <vTaskSwitchContext+0xbc>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d8:	4b28      	ldr	r3, [pc, #160]	@ (8006a7c <vTaskSwitchContext+0xc0>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	e013      	b.n	8006a08 <vTaskSwitchContext+0x4c>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10d      	bne.n	8006a02 <vTaskSwitchContext+0x46>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ea:	b672      	cpsid	i
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	b662      	cpsie	i
 80069fa:	607b      	str	r3, [r7, #4]
}
 80069fc:	bf00      	nop
 80069fe:	bf00      	nop
 8006a00:	e7fd      	b.n	80069fe <vTaskSwitchContext+0x42>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	491d      	ldr	r1, [pc, #116]	@ (8006a80 <vTaskSwitchContext+0xc4>)
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0e1      	beq.n	80069e0 <vTaskSwitchContext+0x24>
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4a16      	ldr	r2, [pc, #88]	@ (8006a80 <vTaskSwitchContext+0xc4>)
 8006a28:	4413      	add	r3, r2
 8006a2a:	60bb      	str	r3, [r7, #8]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	605a      	str	r2, [r3, #4]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d104      	bne.n	8006a4c <vTaskSwitchContext+0x90>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	605a      	str	r2, [r3, #4]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	4a0c      	ldr	r2, [pc, #48]	@ (8006a84 <vTaskSwitchContext+0xc8>)
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	4a09      	ldr	r2, [pc, #36]	@ (8006a7c <vTaskSwitchContext+0xc0>)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a5c:	4b09      	ldr	r3, [pc, #36]	@ (8006a84 <vTaskSwitchContext+0xc8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3354      	adds	r3, #84	@ 0x54
 8006a62:	4a09      	ldr	r2, [pc, #36]	@ (8006a88 <vTaskSwitchContext+0xcc>)
 8006a64:	6013      	str	r3, [r2, #0]
}
 8006a66:	bf00      	nop
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20001508 	.word	0x20001508
 8006a78:	200014f4 	.word	0x200014f4
 8006a7c:	200014e8 	.word	0x200014e8
 8006a80:	20001010 	.word	0x20001010
 8006a84:	2000100c 	.word	0x2000100c
 8006a88:	20000010 	.word	0x20000010

08006a8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10d      	bne.n	8006ab8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa0:	b672      	cpsid	i
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	b662      	cpsie	i
 8006ab0:	60fb      	str	r3, [r7, #12]
}
 8006ab2:	bf00      	nop
 8006ab4:	bf00      	nop
 8006ab6:	e7fd      	b.n	8006ab4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ab8:	4b07      	ldr	r3, [pc, #28]	@ (8006ad8 <vTaskPlaceOnEventList+0x4c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3318      	adds	r3, #24
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7fe fa76 	bl	8004fb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	6838      	ldr	r0, [r7, #0]
 8006aca:	f000 fb99 	bl	8007200 <prvAddCurrentTaskToDelayedList>
}
 8006ace:	bf00      	nop
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	2000100c 	.word	0x2000100c

08006adc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10d      	bne.n	8006b0a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	b672      	cpsid	i
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	b662      	cpsie	i
 8006b02:	617b      	str	r3, [r7, #20]
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	e7fd      	b.n	8006b06 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b34 <vTaskPlaceOnEventListRestricted+0x58>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3318      	adds	r3, #24
 8006b10:	4619      	mov	r1, r3
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7fe fa29 	bl	8004f6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	68b8      	ldr	r0, [r7, #8]
 8006b28:	f000 fb6a 	bl	8007200 <prvAddCurrentTaskToDelayedList>
	}
 8006b2c:	bf00      	nop
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	2000100c 	.word	0x2000100c

08006b38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10d      	bne.n	8006b6a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b52:	b672      	cpsid	i
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	b662      	cpsie	i
 8006b62:	60fb      	str	r3, [r7, #12]
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	e7fd      	b.n	8006b66 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	3318      	adds	r3, #24
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fa58 	bl	8005024 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b74:	4b1d      	ldr	r3, [pc, #116]	@ (8006bec <xTaskRemoveFromEventList+0xb4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d11d      	bne.n	8006bb8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe fa4f 	bl	8005024 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b8a:	4b19      	ldr	r3, [pc, #100]	@ (8006bf0 <xTaskRemoveFromEventList+0xb8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d903      	bls.n	8006b9a <xTaskRemoveFromEventList+0x62>
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b96:	4a16      	ldr	r2, [pc, #88]	@ (8006bf0 <xTaskRemoveFromEventList+0xb8>)
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4a13      	ldr	r2, [pc, #76]	@ (8006bf4 <xTaskRemoveFromEventList+0xbc>)
 8006ba8:	441a      	add	r2, r3
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	3304      	adds	r3, #4
 8006bae:	4619      	mov	r1, r3
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	f7fe f9da 	bl	8004f6a <vListInsertEnd>
 8006bb6:	e005      	b.n	8006bc4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	3318      	adds	r3, #24
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	480e      	ldr	r0, [pc, #56]	@ (8006bf8 <xTaskRemoveFromEventList+0xc0>)
 8006bc0:	f7fe f9d3 	bl	8004f6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006bfc <xTaskRemoveFromEventList+0xc4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d905      	bls.n	8006bde <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006c00 <xTaskRemoveFromEventList+0xc8>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	e001      	b.n	8006be2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006be2:	697b      	ldr	r3, [r7, #20]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20001508 	.word	0x20001508
 8006bf0:	200014e8 	.word	0x200014e8
 8006bf4:	20001010 	.word	0x20001010
 8006bf8:	200014a0 	.word	0x200014a0
 8006bfc:	2000100c 	.word	0x2000100c
 8006c00:	200014f4 	.word	0x200014f4

08006c04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c0c:	4b06      	ldr	r3, [pc, #24]	@ (8006c28 <vTaskInternalSetTimeOutState+0x24>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c14:	4b05      	ldr	r3, [pc, #20]	@ (8006c2c <vTaskInternalSetTimeOutState+0x28>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	605a      	str	r2, [r3, #4]
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	200014f8 	.word	0x200014f8
 8006c2c:	200014e4 	.word	0x200014e4

08006c30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10d      	bne.n	8006c5c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	b672      	cpsid	i
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	b662      	cpsie	i
 8006c54:	613b      	str	r3, [r7, #16]
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	e7fd      	b.n	8006c58 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10d      	bne.n	8006c7e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	b672      	cpsid	i
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	b662      	cpsie	i
 8006c76:	60fb      	str	r3, [r7, #12]
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	e7fd      	b.n	8006c7a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006c7e:	f000 ff8d 	bl	8007b9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c82:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf8 <xTaskCheckForTimeOut+0xc8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9a:	d102      	bne.n	8006ca2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	e023      	b.n	8006cea <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	4b15      	ldr	r3, [pc, #84]	@ (8006cfc <xTaskCheckForTimeOut+0xcc>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d007      	beq.n	8006cbe <xTaskCheckForTimeOut+0x8e>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d302      	bcc.n	8006cbe <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	61fb      	str	r3, [r7, #28]
 8006cbc:	e015      	b.n	8006cea <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d20b      	bcs.n	8006ce0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	1ad2      	subs	r2, r2, r3
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7ff ff95 	bl	8006c04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	e004      	b.n	8006cea <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cea:	f000 ff8d 	bl	8007c08 <vPortExitCritical>

	return xReturn;
 8006cee:	69fb      	ldr	r3, [r7, #28]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3720      	adds	r7, #32
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	200014e4 	.word	0x200014e4
 8006cfc:	200014f8 	.word	0x200014f8

08006d00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d00:	b480      	push	{r7}
 8006d02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d04:	4b03      	ldr	r3, [pc, #12]	@ (8006d14 <vTaskMissedYield+0x14>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
}
 8006d0a:	bf00      	nop
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	200014f4 	.word	0x200014f4

08006d18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d20:	f000 f852 	bl	8006dc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d24:	4b06      	ldr	r3, [pc, #24]	@ (8006d40 <prvIdleTask+0x28>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d9f9      	bls.n	8006d20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d2c:	4b05      	ldr	r3, [pc, #20]	@ (8006d44 <prvIdleTask+0x2c>)
 8006d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d3c:	e7f0      	b.n	8006d20 <prvIdleTask+0x8>
 8006d3e:	bf00      	nop
 8006d40:	20001010 	.word	0x20001010
 8006d44:	e000ed04 	.word	0xe000ed04

08006d48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d4e:	2300      	movs	r3, #0
 8006d50:	607b      	str	r3, [r7, #4]
 8006d52:	e00c      	b.n	8006d6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	4613      	mov	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4a12      	ldr	r2, [pc, #72]	@ (8006da8 <prvInitialiseTaskLists+0x60>)
 8006d60:	4413      	add	r3, r2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fe f8d4 	bl	8004f10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	607b      	str	r3, [r7, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b37      	cmp	r3, #55	@ 0x37
 8006d72:	d9ef      	bls.n	8006d54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d74:	480d      	ldr	r0, [pc, #52]	@ (8006dac <prvInitialiseTaskLists+0x64>)
 8006d76:	f7fe f8cb 	bl	8004f10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d7a:	480d      	ldr	r0, [pc, #52]	@ (8006db0 <prvInitialiseTaskLists+0x68>)
 8006d7c:	f7fe f8c8 	bl	8004f10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d80:	480c      	ldr	r0, [pc, #48]	@ (8006db4 <prvInitialiseTaskLists+0x6c>)
 8006d82:	f7fe f8c5 	bl	8004f10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d86:	480c      	ldr	r0, [pc, #48]	@ (8006db8 <prvInitialiseTaskLists+0x70>)
 8006d88:	f7fe f8c2 	bl	8004f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d8c:	480b      	ldr	r0, [pc, #44]	@ (8006dbc <prvInitialiseTaskLists+0x74>)
 8006d8e:	f7fe f8bf 	bl	8004f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d92:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc0 <prvInitialiseTaskLists+0x78>)
 8006d94:	4a05      	ldr	r2, [pc, #20]	@ (8006dac <prvInitialiseTaskLists+0x64>)
 8006d96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d98:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc4 <prvInitialiseTaskLists+0x7c>)
 8006d9a:	4a05      	ldr	r2, [pc, #20]	@ (8006db0 <prvInitialiseTaskLists+0x68>)
 8006d9c:	601a      	str	r2, [r3, #0]
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20001010 	.word	0x20001010
 8006dac:	20001470 	.word	0x20001470
 8006db0:	20001484 	.word	0x20001484
 8006db4:	200014a0 	.word	0x200014a0
 8006db8:	200014b4 	.word	0x200014b4
 8006dbc:	200014cc 	.word	0x200014cc
 8006dc0:	20001498 	.word	0x20001498
 8006dc4:	2000149c 	.word	0x2000149c

08006dc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dce:	e019      	b.n	8006e04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dd0:	f000 fee4 	bl	8007b9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dd4:	4b10      	ldr	r3, [pc, #64]	@ (8006e18 <prvCheckTasksWaitingTermination+0x50>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe f91f 	bl	8005024 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006de6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e1c <prvCheckTasksWaitingTermination+0x54>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	4a0b      	ldr	r2, [pc, #44]	@ (8006e1c <prvCheckTasksWaitingTermination+0x54>)
 8006dee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006df0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e20 <prvCheckTasksWaitingTermination+0x58>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	4a0a      	ldr	r2, [pc, #40]	@ (8006e20 <prvCheckTasksWaitingTermination+0x58>)
 8006df8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006dfa:	f000 ff05 	bl	8007c08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f810 	bl	8006e24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e04:	4b06      	ldr	r3, [pc, #24]	@ (8006e20 <prvCheckTasksWaitingTermination+0x58>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e1      	bne.n	8006dd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e0c:	bf00      	nop
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	200014b4 	.word	0x200014b4
 8006e1c:	200014e0 	.word	0x200014e0
 8006e20:	200014c8 	.word	0x200014c8

08006e24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3354      	adds	r3, #84	@ 0x54
 8006e30:	4618      	mov	r0, r3
 8006e32:	f001 f9d3 	bl	80081dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d108      	bne.n	8006e52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 f8a5 	bl	8007f94 <vPortFree>
				vPortFree( pxTCB );
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 f8a2 	bl	8007f94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e50:	e01b      	b.n	8006e8a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d103      	bne.n	8006e64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 f899 	bl	8007f94 <vPortFree>
	}
 8006e62:	e012      	b.n	8006e8a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d00d      	beq.n	8006e8a <prvDeleteTCB+0x66>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e72:	b672      	cpsid	i
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	b662      	cpsie	i
 8006e82:	60fb      	str	r3, [r7, #12]
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop
 8006e88:	e7fd      	b.n	8006e86 <prvDeleteTCB+0x62>
	}
 8006e8a:	bf00      	nop
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006ecc <prvResetNextTaskUnblockTime+0x38>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8006ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006eac:	e008      	b.n	8006ec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eae:	4b07      	ldr	r3, [pc, #28]	@ (8006ecc <prvResetNextTaskUnblockTime+0x38>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	4a04      	ldr	r2, [pc, #16]	@ (8006ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8006ebe:	6013      	str	r3, [r2, #0]
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	20001498 	.word	0x20001498
 8006ed0:	20001500 	.word	0x20001500

08006ed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006eda:	4b0b      	ldr	r3, [pc, #44]	@ (8006f08 <xTaskGetSchedulerState+0x34>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d102      	bne.n	8006ee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	607b      	str	r3, [r7, #4]
 8006ee6:	e008      	b.n	8006efa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee8:	4b08      	ldr	r3, [pc, #32]	@ (8006f0c <xTaskGetSchedulerState+0x38>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d102      	bne.n	8006ef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	607b      	str	r3, [r7, #4]
 8006ef4:	e001      	b.n	8006efa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006efa:	687b      	ldr	r3, [r7, #4]
	}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	200014ec 	.word	0x200014ec
 8006f0c:	20001508 	.word	0x20001508

08006f10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d051      	beq.n	8006fca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd4 <xTaskPriorityInherit+0xc4>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d241      	bcs.n	8006fb8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	db06      	blt.n	8006f4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f3c:	4b25      	ldr	r3, [pc, #148]	@ (8006fd4 <xTaskPriorityInherit+0xc4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f42:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	6959      	ldr	r1, [r3, #20]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f52:	4613      	mov	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8006fd8 <xTaskPriorityInherit+0xc8>)
 8006f5c:	4413      	add	r3, r2
 8006f5e:	4299      	cmp	r1, r3
 8006f60:	d122      	bne.n	8006fa8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	3304      	adds	r3, #4
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe f85c 	bl	8005024 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f6c:	4b19      	ldr	r3, [pc, #100]	@ (8006fd4 <xTaskPriorityInherit+0xc4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f7a:	4b18      	ldr	r3, [pc, #96]	@ (8006fdc <xTaskPriorityInherit+0xcc>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d903      	bls.n	8006f8a <xTaskPriorityInherit+0x7a>
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f86:	4a15      	ldr	r2, [pc, #84]	@ (8006fdc <xTaskPriorityInherit+0xcc>)
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4a10      	ldr	r2, [pc, #64]	@ (8006fd8 <xTaskPriorityInherit+0xc8>)
 8006f98:	441a      	add	r2, r3
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fd ffe2 	bl	8004f6a <vListInsertEnd>
 8006fa6:	e004      	b.n	8006fb2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd4 <xTaskPriorityInherit+0xc4>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	e008      	b.n	8006fca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fbc:	4b05      	ldr	r3, [pc, #20]	@ (8006fd4 <xTaskPriorityInherit+0xc4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d201      	bcs.n	8006fca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fca:	68fb      	ldr	r3, [r7, #12]
	}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	2000100c 	.word	0x2000100c
 8006fd8:	20001010 	.word	0x20001010
 8006fdc:	200014e8 	.word	0x200014e8

08006fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d05c      	beq.n	80070b0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ff6:	4b31      	ldr	r3, [pc, #196]	@ (80070bc <xTaskPriorityDisinherit+0xdc>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d00d      	beq.n	800701c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007004:	b672      	cpsid	i
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	b662      	cpsie	i
 8007014:	60fb      	str	r3, [r7, #12]
}
 8007016:	bf00      	nop
 8007018:	bf00      	nop
 800701a:	e7fd      	b.n	8007018 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10d      	bne.n	8007040 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007028:	b672      	cpsid	i
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	b662      	cpsie	i
 8007038:	60bb      	str	r3, [r7, #8]
}
 800703a:	bf00      	nop
 800703c:	bf00      	nop
 800703e:	e7fd      	b.n	800703c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007044:	1e5a      	subs	r2, r3, #1
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007052:	429a      	cmp	r2, r3
 8007054:	d02c      	beq.n	80070b0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800705a:	2b00      	cmp	r3, #0
 800705c:	d128      	bne.n	80070b0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	3304      	adds	r3, #4
 8007062:	4618      	mov	r0, r3
 8007064:	f7fd ffde 	bl	8005024 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007074:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007080:	4b0f      	ldr	r3, [pc, #60]	@ (80070c0 <xTaskPriorityDisinherit+0xe0>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d903      	bls.n	8007090 <xTaskPriorityDisinherit+0xb0>
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708c:	4a0c      	ldr	r2, [pc, #48]	@ (80070c0 <xTaskPriorityDisinherit+0xe0>)
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4a09      	ldr	r2, [pc, #36]	@ (80070c4 <xTaskPriorityDisinherit+0xe4>)
 800709e:	441a      	add	r2, r3
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4619      	mov	r1, r3
 80070a6:	4610      	mov	r0, r2
 80070a8:	f7fd ff5f 	bl	8004f6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070b0:	697b      	ldr	r3, [r7, #20]
	}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	2000100c 	.word	0x2000100c
 80070c0:	200014e8 	.word	0x200014e8
 80070c4:	20001010 	.word	0x20001010

080070c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80070d6:	2301      	movs	r3, #1
 80070d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d070      	beq.n	80071c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10d      	bne.n	8007104 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ec:	b672      	cpsid	i
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	b662      	cpsie	i
 80070fc:	60fb      	str	r3, [r7, #12]
}
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
 8007102:	e7fd      	b.n	8007100 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d902      	bls.n	8007114 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	61fb      	str	r3, [r7, #28]
 8007112:	e002      	b.n	800711a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007118:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711e:	69fa      	ldr	r2, [r7, #28]
 8007120:	429a      	cmp	r2, r3
 8007122:	d04e      	beq.n	80071c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	429a      	cmp	r2, r3
 800712c:	d149      	bne.n	80071c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800712e:	4b27      	ldr	r3, [pc, #156]	@ (80071cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	429a      	cmp	r2, r3
 8007136:	d10d      	bne.n	8007154 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713c:	b672      	cpsid	i
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	b662      	cpsie	i
 800714c:	60bb      	str	r3, [r7, #8]
}
 800714e:	bf00      	nop
 8007150:	bf00      	nop
 8007152:	e7fd      	b.n	8007150 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007158:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	69fa      	ldr	r2, [r7, #28]
 800715e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	db04      	blt.n	8007172 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	6959      	ldr	r1, [r3, #20]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4613      	mov	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4a13      	ldr	r2, [pc, #76]	@ (80071d0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007182:	4413      	add	r3, r2
 8007184:	4299      	cmp	r1, r3
 8007186:	d11c      	bne.n	80071c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	3304      	adds	r3, #4
 800718c:	4618      	mov	r0, r3
 800718e:	f7fd ff49 	bl	8005024 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007196:	4b0f      	ldr	r3, [pc, #60]	@ (80071d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d903      	bls.n	80071a6 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a2:	4a0c      	ldr	r2, [pc, #48]	@ (80071d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4a07      	ldr	r2, [pc, #28]	@ (80071d0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80071b4:	441a      	add	r2, r3
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	3304      	adds	r3, #4
 80071ba:	4619      	mov	r1, r3
 80071bc:	4610      	mov	r0, r2
 80071be:	f7fd fed4 	bl	8004f6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071c2:	bf00      	nop
 80071c4:	3720      	adds	r7, #32
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	2000100c 	.word	0x2000100c
 80071d0:	20001010 	.word	0x20001010
 80071d4:	200014e8 	.word	0x200014e8

080071d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80071dc:	4b07      	ldr	r3, [pc, #28]	@ (80071fc <pvTaskIncrementMutexHeldCount+0x24>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80071e4:	4b05      	ldr	r3, [pc, #20]	@ (80071fc <pvTaskIncrementMutexHeldCount+0x24>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071ea:	3201      	adds	r2, #1
 80071ec:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80071ee:	4b03      	ldr	r3, [pc, #12]	@ (80071fc <pvTaskIncrementMutexHeldCount+0x24>)
 80071f0:	681b      	ldr	r3, [r3, #0]
	}
 80071f2:	4618      	mov	r0, r3
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	2000100c 	.word	0x2000100c

08007200 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800720a:	4b21      	ldr	r3, [pc, #132]	@ (8007290 <prvAddCurrentTaskToDelayedList+0x90>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007210:	4b20      	ldr	r3, [pc, #128]	@ (8007294 <prvAddCurrentTaskToDelayedList+0x94>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3304      	adds	r3, #4
 8007216:	4618      	mov	r0, r3
 8007218:	f7fd ff04 	bl	8005024 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007222:	d10a      	bne.n	800723a <prvAddCurrentTaskToDelayedList+0x3a>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d007      	beq.n	800723a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800722a:	4b1a      	ldr	r3, [pc, #104]	@ (8007294 <prvAddCurrentTaskToDelayedList+0x94>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3304      	adds	r3, #4
 8007230:	4619      	mov	r1, r3
 8007232:	4819      	ldr	r0, [pc, #100]	@ (8007298 <prvAddCurrentTaskToDelayedList+0x98>)
 8007234:	f7fd fe99 	bl	8004f6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007238:	e026      	b.n	8007288 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4413      	add	r3, r2
 8007240:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007242:	4b14      	ldr	r3, [pc, #80]	@ (8007294 <prvAddCurrentTaskToDelayedList+0x94>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	429a      	cmp	r2, r3
 8007250:	d209      	bcs.n	8007266 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007252:	4b12      	ldr	r3, [pc, #72]	@ (800729c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	4b0f      	ldr	r3, [pc, #60]	@ (8007294 <prvAddCurrentTaskToDelayedList+0x94>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3304      	adds	r3, #4
 800725c:	4619      	mov	r1, r3
 800725e:	4610      	mov	r0, r2
 8007260:	f7fd fea7 	bl	8004fb2 <vListInsert>
}
 8007264:	e010      	b.n	8007288 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007266:	4b0e      	ldr	r3, [pc, #56]	@ (80072a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4b0a      	ldr	r3, [pc, #40]	@ (8007294 <prvAddCurrentTaskToDelayedList+0x94>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3304      	adds	r3, #4
 8007270:	4619      	mov	r1, r3
 8007272:	4610      	mov	r0, r2
 8007274:	f7fd fe9d 	bl	8004fb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007278:	4b0a      	ldr	r3, [pc, #40]	@ (80072a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	d202      	bcs.n	8007288 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007282:	4a08      	ldr	r2, [pc, #32]	@ (80072a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	6013      	str	r3, [r2, #0]
}
 8007288:	bf00      	nop
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	200014e4 	.word	0x200014e4
 8007294:	2000100c 	.word	0x2000100c
 8007298:	200014cc 	.word	0x200014cc
 800729c:	2000149c 	.word	0x2000149c
 80072a0:	20001498 	.word	0x20001498
 80072a4:	20001500 	.word	0x20001500

080072a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08a      	sub	sp, #40	@ 0x28
 80072ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072b2:	f000 fb21 	bl	80078f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007330 <xTimerCreateTimerTask+0x88>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d021      	beq.n	8007302 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072c6:	1d3a      	adds	r2, r7, #4
 80072c8:	f107 0108 	add.w	r1, r7, #8
 80072cc:	f107 030c 	add.w	r3, r7, #12
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fd fe03 	bl	8004edc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	9202      	str	r2, [sp, #8]
 80072de:	9301      	str	r3, [sp, #4]
 80072e0:	2302      	movs	r3, #2
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	2300      	movs	r3, #0
 80072e6:	460a      	mov	r2, r1
 80072e8:	4912      	ldr	r1, [pc, #72]	@ (8007334 <xTimerCreateTimerTask+0x8c>)
 80072ea:	4813      	ldr	r0, [pc, #76]	@ (8007338 <xTimerCreateTimerTask+0x90>)
 80072ec:	f7fe ff7a 	bl	80061e4 <xTaskCreateStatic>
 80072f0:	4603      	mov	r3, r0
 80072f2:	4a12      	ldr	r2, [pc, #72]	@ (800733c <xTimerCreateTimerTask+0x94>)
 80072f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072f6:	4b11      	ldr	r3, [pc, #68]	@ (800733c <xTimerCreateTimerTask+0x94>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80072fe:	2301      	movs	r3, #1
 8007300:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10d      	bne.n	8007324 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730c:	b672      	cpsid	i
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	b662      	cpsie	i
 800731c:	613b      	str	r3, [r7, #16]
}
 800731e:	bf00      	nop
 8007320:	bf00      	nop
 8007322:	e7fd      	b.n	8007320 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007324:	697b      	ldr	r3, [r7, #20]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	2000153c 	.word	0x2000153c
 8007334:	08008454 	.word	0x08008454
 8007338:	08007481 	.word	0x08007481
 800733c:	20001540 	.word	0x20001540

08007340 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	@ 0x28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800734e:	2300      	movs	r3, #0
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10d      	bne.n	8007374 <xTimerGenericCommand+0x34>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735c:	b672      	cpsid	i
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	b662      	cpsie	i
 800736c:	623b      	str	r3, [r7, #32]
}
 800736e:	bf00      	nop
 8007370:	bf00      	nop
 8007372:	e7fd      	b.n	8007370 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007374:	4b19      	ldr	r3, [pc, #100]	@ (80073dc <xTimerGenericCommand+0x9c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d02a      	beq.n	80073d2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	2b05      	cmp	r3, #5
 800738c:	dc18      	bgt.n	80073c0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800738e:	f7ff fda1 	bl	8006ed4 <xTaskGetSchedulerState>
 8007392:	4603      	mov	r3, r0
 8007394:	2b02      	cmp	r3, #2
 8007396:	d109      	bne.n	80073ac <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007398:	4b10      	ldr	r3, [pc, #64]	@ (80073dc <xTimerGenericCommand+0x9c>)
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	f107 0110 	add.w	r1, r7, #16
 80073a0:	2300      	movs	r3, #0
 80073a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073a4:	f7fe f838 	bl	8005418 <xQueueGenericSend>
 80073a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80073aa:	e012      	b.n	80073d2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073ac:	4b0b      	ldr	r3, [pc, #44]	@ (80073dc <xTimerGenericCommand+0x9c>)
 80073ae:	6818      	ldr	r0, [r3, #0]
 80073b0:	f107 0110 	add.w	r1, r7, #16
 80073b4:	2300      	movs	r3, #0
 80073b6:	2200      	movs	r2, #0
 80073b8:	f7fe f82e 	bl	8005418 <xQueueGenericSend>
 80073bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80073be:	e008      	b.n	80073d2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073c0:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <xTimerGenericCommand+0x9c>)
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	f107 0110 	add.w	r1, r7, #16
 80073c8:	2300      	movs	r3, #0
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	f7fe f92e 	bl	800562c <xQueueGenericSendFromISR>
 80073d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3728      	adds	r7, #40	@ 0x28
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	2000153c 	.word	0x2000153c

080073e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ea:	4b24      	ldr	r3, [pc, #144]	@ (800747c <prvProcessExpiredTimer+0x9c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	3304      	adds	r3, #4
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fd fe13 	bl	8005024 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b00      	cmp	r3, #0
 800740a:	d025      	beq.n	8007458 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	699a      	ldr	r2, [r3, #24]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	18d1      	adds	r1, r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	6978      	ldr	r0, [r7, #20]
 800741a:	f000 f8d7 	bl	80075cc <prvInsertTimerInActiveList>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d022      	beq.n	800746a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007424:	2300      	movs	r3, #0
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	2300      	movs	r3, #0
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	2100      	movs	r1, #0
 800742e:	6978      	ldr	r0, [r7, #20]
 8007430:	f7ff ff86 	bl	8007340 <xTimerGenericCommand>
 8007434:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d116      	bne.n	800746a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007440:	b672      	cpsid	i
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	b662      	cpsie	i
 8007450:	60fb      	str	r3, [r7, #12]
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	b2da      	uxtb	r2, r3
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	6978      	ldr	r0, [r7, #20]
 8007470:	4798      	blx	r3
}
 8007472:	bf00      	nop
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20001534 	.word	0x20001534

08007480 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007488:	f107 0308 	add.w	r3, r7, #8
 800748c:	4618      	mov	r0, r3
 800748e:	f000 f859 	bl	8007544 <prvGetNextExpireTime>
 8007492:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4619      	mov	r1, r3
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f805 	bl	80074a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800749e:	f000 f8d7 	bl	8007650 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074a2:	bf00      	nop
 80074a4:	e7f0      	b.n	8007488 <prvTimerTask+0x8>
	...

080074a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074b2:	f7ff f909 	bl	80066c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074b6:	f107 0308 	add.w	r3, r7, #8
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 f866 	bl	800758c <prvSampleTimeNow>
 80074c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d130      	bne.n	800752a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <prvProcessTimerOrBlockTask+0x3c>
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d806      	bhi.n	80074e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074d6:	f7ff f905 	bl	80066e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074da:	68f9      	ldr	r1, [r7, #12]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff ff7f 	bl	80073e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074e2:	e024      	b.n	800752e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d008      	beq.n	80074fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074ea:	4b13      	ldr	r3, [pc, #76]	@ (8007538 <prvProcessTimerOrBlockTask+0x90>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <prvProcessTimerOrBlockTask+0x50>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <prvProcessTimerOrBlockTask+0x52>
 80074f8:	2300      	movs	r3, #0
 80074fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074fc:	4b0f      	ldr	r3, [pc, #60]	@ (800753c <prvProcessTimerOrBlockTask+0x94>)
 80074fe:	6818      	ldr	r0, [r3, #0]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	4619      	mov	r1, r3
 800750a:	f7fe fe37 	bl	800617c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800750e:	f7ff f8e9 	bl	80066e4 <xTaskResumeAll>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007518:	4b09      	ldr	r3, [pc, #36]	@ (8007540 <prvProcessTimerOrBlockTask+0x98>)
 800751a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	f3bf 8f6f 	isb	sy
}
 8007528:	e001      	b.n	800752e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800752a:	f7ff f8db 	bl	80066e4 <xTaskResumeAll>
}
 800752e:	bf00      	nop
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20001538 	.word	0x20001538
 800753c:	2000153c 	.word	0x2000153c
 8007540:	e000ed04 	.word	0xe000ed04

08007544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800754c:	4b0e      	ldr	r3, [pc, #56]	@ (8007588 <prvGetNextExpireTime+0x44>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <prvGetNextExpireTime+0x16>
 8007556:	2201      	movs	r2, #1
 8007558:	e000      	b.n	800755c <prvGetNextExpireTime+0x18>
 800755a:	2200      	movs	r2, #0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d105      	bne.n	8007574 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007568:	4b07      	ldr	r3, [pc, #28]	@ (8007588 <prvGetNextExpireTime+0x44>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	e001      	b.n	8007578 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007578:	68fb      	ldr	r3, [r7, #12]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	20001534 	.word	0x20001534

0800758c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007594:	f7ff f946 	bl	8006824 <xTaskGetTickCount>
 8007598:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800759a:	4b0b      	ldr	r3, [pc, #44]	@ (80075c8 <prvSampleTimeNow+0x3c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d205      	bcs.n	80075b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075a4:	f000 f940 	bl	8007828 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075b6:	4a04      	ldr	r2, [pc, #16]	@ (80075c8 <prvSampleTimeNow+0x3c>)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075bc:	68fb      	ldr	r3, [r7, #12]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20001544 	.word	0x20001544

080075cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d812      	bhi.n	8007618 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	1ad2      	subs	r2, r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d302      	bcc.n	8007606 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007600:	2301      	movs	r3, #1
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e01b      	b.n	800763e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007606:	4b10      	ldr	r3, [pc, #64]	@ (8007648 <prvInsertTimerInActiveList+0x7c>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3304      	adds	r3, #4
 800760e:	4619      	mov	r1, r3
 8007610:	4610      	mov	r0, r2
 8007612:	f7fd fcce 	bl	8004fb2 <vListInsert>
 8007616:	e012      	b.n	800763e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d206      	bcs.n	800762e <prvInsertTimerInActiveList+0x62>
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	429a      	cmp	r2, r3
 8007626:	d302      	bcc.n	800762e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007628:	2301      	movs	r3, #1
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	e007      	b.n	800763e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800762e:	4b07      	ldr	r3, [pc, #28]	@ (800764c <prvInsertTimerInActiveList+0x80>)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3304      	adds	r3, #4
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f7fd fcba 	bl	8004fb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800763e:	697b      	ldr	r3, [r7, #20]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20001538 	.word	0x20001538
 800764c:	20001534 	.word	0x20001534

08007650 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08e      	sub	sp, #56	@ 0x38
 8007654:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007656:	e0d4      	b.n	8007802 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	da1b      	bge.n	8007696 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800765e:	1d3b      	adds	r3, r7, #4
 8007660:	3304      	adds	r3, #4
 8007662:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10d      	bne.n	8007686 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766e:	b672      	cpsid	i
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	b662      	cpsie	i
 800767e:	61fb      	str	r3, [r7, #28]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800768c:	6850      	ldr	r0, [r2, #4]
 800768e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007690:	6892      	ldr	r2, [r2, #8]
 8007692:	4611      	mov	r1, r2
 8007694:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f2c0 80b2 	blt.w	8007802 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d004      	beq.n	80076b4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ac:	3304      	adds	r3, #4
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fd fcb8 	bl	8005024 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076b4:	463b      	mov	r3, r7
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff ff68 	bl	800758c <prvSampleTimeNow>
 80076bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b09      	cmp	r3, #9
 80076c2:	f200 809b 	bhi.w	80077fc <prvProcessReceivedCommands+0x1ac>
 80076c6:	a201      	add	r2, pc, #4	@ (adr r2, 80076cc <prvProcessReceivedCommands+0x7c>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	080076f5 	.word	0x080076f5
 80076d0:	080076f5 	.word	0x080076f5
 80076d4:	080076f5 	.word	0x080076f5
 80076d8:	0800776f 	.word	0x0800776f
 80076dc:	08007783 	.word	0x08007783
 80076e0:	080077d3 	.word	0x080077d3
 80076e4:	080076f5 	.word	0x080076f5
 80076e8:	080076f5 	.word	0x080076f5
 80076ec:	0800776f 	.word	0x0800776f
 80076f0:	08007783 	.word	0x08007783
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076fa:	f043 0301 	orr.w	r3, r3, #1
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007702:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	18d1      	adds	r1, r2, r3
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007714:	f7ff ff5a 	bl	80075cc <prvInsertTimerInActiveList>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d070      	beq.n	8007800 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800771e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007724:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b00      	cmp	r3, #0
 8007732:	d065      	beq.n	8007800 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	441a      	add	r2, r3
 800773c:	2300      	movs	r3, #0
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	2300      	movs	r3, #0
 8007742:	2100      	movs	r1, #0
 8007744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007746:	f7ff fdfb 	bl	8007340 <xTimerGenericCommand>
 800774a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d156      	bne.n	8007800 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007756:	b672      	cpsid	i
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	b662      	cpsie	i
 8007766:	61bb      	str	r3, [r7, #24]
}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	e7fd      	b.n	800776a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800776e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007774:	f023 0301 	bic.w	r3, r3, #1
 8007778:	b2da      	uxtb	r2, r3
 800777a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007780:	e03f      	b.n	8007802 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007784:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007788:	f043 0301 	orr.w	r3, r3, #1
 800778c:	b2da      	uxtb	r2, r3
 800778e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007790:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007798:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800779a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10d      	bne.n	80077be <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a6:	b672      	cpsid	i
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	b662      	cpsie	i
 80077b6:	617b      	str	r3, [r7, #20]
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	e7fd      	b.n	80077ba <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	18d1      	adds	r1, r2, r3
 80077c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077cc:	f7ff fefe 	bl	80075cc <prvInsertTimerInActiveList>
					break;
 80077d0:	e017      	b.n	8007802 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d103      	bne.n	80077e8 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80077e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077e2:	f000 fbd7 	bl	8007f94 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80077e6:	e00c      	b.n	8007802 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077ee:	f023 0301 	bic.w	r3, r3, #1
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80077fa:	e002      	b.n	8007802 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80077fc:	bf00      	nop
 80077fe:	e000      	b.n	8007802 <prvProcessReceivedCommands+0x1b2>
					break;
 8007800:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007802:	4b08      	ldr	r3, [pc, #32]	@ (8007824 <prvProcessReceivedCommands+0x1d4>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	1d39      	adds	r1, r7, #4
 8007808:	2200      	movs	r2, #0
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe f84a 	bl	80058a4 <xQueueReceive>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	f47f af20 	bne.w	8007658 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007818:	bf00      	nop
 800781a:	bf00      	nop
 800781c:	3730      	adds	r7, #48	@ 0x30
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	2000153c 	.word	0x2000153c

08007828 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800782e:	e04b      	b.n	80078c8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007830:	4b2f      	ldr	r3, [pc, #188]	@ (80078f0 <prvSwitchTimerLists+0xc8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800783a:	4b2d      	ldr	r3, [pc, #180]	@ (80078f0 <prvSwitchTimerLists+0xc8>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3304      	adds	r3, #4
 8007848:	4618      	mov	r0, r3
 800784a:	f7fd fbeb 	bl	8005024 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b00      	cmp	r3, #0
 8007862:	d031      	beq.n	80078c8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4413      	add	r3, r2
 800786c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	429a      	cmp	r2, r3
 8007874:	d90e      	bls.n	8007894 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007882:	4b1b      	ldr	r3, [pc, #108]	@ (80078f0 <prvSwitchTimerLists+0xc8>)
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3304      	adds	r3, #4
 800788a:	4619      	mov	r1, r3
 800788c:	4610      	mov	r0, r2
 800788e:	f7fd fb90 	bl	8004fb2 <vListInsert>
 8007892:	e019      	b.n	80078c8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007894:	2300      	movs	r3, #0
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	2300      	movs	r3, #0
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	2100      	movs	r1, #0
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f7ff fd4e 	bl	8007340 <xTimerGenericCommand>
 80078a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10d      	bne.n	80078c8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b0:	b672      	cpsid	i
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	b662      	cpsie	i
 80078c0:	603b      	str	r3, [r7, #0]
}
 80078c2:	bf00      	nop
 80078c4:	bf00      	nop
 80078c6:	e7fd      	b.n	80078c4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078c8:	4b09      	ldr	r3, [pc, #36]	@ (80078f0 <prvSwitchTimerLists+0xc8>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1ae      	bne.n	8007830 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078d2:	4b07      	ldr	r3, [pc, #28]	@ (80078f0 <prvSwitchTimerLists+0xc8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80078d8:	4b06      	ldr	r3, [pc, #24]	@ (80078f4 <prvSwitchTimerLists+0xcc>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a04      	ldr	r2, [pc, #16]	@ (80078f0 <prvSwitchTimerLists+0xc8>)
 80078de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80078e0:	4a04      	ldr	r2, [pc, #16]	@ (80078f4 <prvSwitchTimerLists+0xcc>)
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	6013      	str	r3, [r2, #0]
}
 80078e6:	bf00      	nop
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20001534 	.word	0x20001534
 80078f4:	20001538 	.word	0x20001538

080078f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80078fe:	f000 f94d 	bl	8007b9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007902:	4b15      	ldr	r3, [pc, #84]	@ (8007958 <prvCheckForValidListAndQueue+0x60>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d120      	bne.n	800794c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800790a:	4814      	ldr	r0, [pc, #80]	@ (800795c <prvCheckForValidListAndQueue+0x64>)
 800790c:	f7fd fb00 	bl	8004f10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007910:	4813      	ldr	r0, [pc, #76]	@ (8007960 <prvCheckForValidListAndQueue+0x68>)
 8007912:	f7fd fafd 	bl	8004f10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007916:	4b13      	ldr	r3, [pc, #76]	@ (8007964 <prvCheckForValidListAndQueue+0x6c>)
 8007918:	4a10      	ldr	r2, [pc, #64]	@ (800795c <prvCheckForValidListAndQueue+0x64>)
 800791a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800791c:	4b12      	ldr	r3, [pc, #72]	@ (8007968 <prvCheckForValidListAndQueue+0x70>)
 800791e:	4a10      	ldr	r2, [pc, #64]	@ (8007960 <prvCheckForValidListAndQueue+0x68>)
 8007920:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007922:	2300      	movs	r3, #0
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	4b11      	ldr	r3, [pc, #68]	@ (800796c <prvCheckForValidListAndQueue+0x74>)
 8007928:	4a11      	ldr	r2, [pc, #68]	@ (8007970 <prvCheckForValidListAndQueue+0x78>)
 800792a:	2110      	movs	r1, #16
 800792c:	200a      	movs	r0, #10
 800792e:	f7fd fc0f 	bl	8005150 <xQueueGenericCreateStatic>
 8007932:	4603      	mov	r3, r0
 8007934:	4a08      	ldr	r2, [pc, #32]	@ (8007958 <prvCheckForValidListAndQueue+0x60>)
 8007936:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007938:	4b07      	ldr	r3, [pc, #28]	@ (8007958 <prvCheckForValidListAndQueue+0x60>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007940:	4b05      	ldr	r3, [pc, #20]	@ (8007958 <prvCheckForValidListAndQueue+0x60>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	490b      	ldr	r1, [pc, #44]	@ (8007974 <prvCheckForValidListAndQueue+0x7c>)
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fbc4 	bl	80060d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800794c:	f000 f95c 	bl	8007c08 <vPortExitCritical>
}
 8007950:	bf00      	nop
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	2000153c 	.word	0x2000153c
 800795c:	2000150c 	.word	0x2000150c
 8007960:	20001520 	.word	0x20001520
 8007964:	20001534 	.word	0x20001534
 8007968:	20001538 	.word	0x20001538
 800796c:	200015e8 	.word	0x200015e8
 8007970:	20001548 	.word	0x20001548
 8007974:	0800845c 	.word	0x0800845c

08007978 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3b04      	subs	r3, #4
 8007988:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3b04      	subs	r3, #4
 8007996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f023 0201 	bic.w	r2, r3, #1
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3b04      	subs	r3, #4
 80079a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079a8:	4a0c      	ldr	r2, [pc, #48]	@ (80079dc <pxPortInitialiseStack+0x64>)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3b14      	subs	r3, #20
 80079b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3b04      	subs	r3, #4
 80079be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f06f 0202 	mvn.w	r2, #2
 80079c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3b20      	subs	r3, #32
 80079cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079ce:	68fb      	ldr	r3, [r7, #12]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	080079e1 	.word	0x080079e1

080079e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079ea:	4b15      	ldr	r3, [pc, #84]	@ (8007a40 <prvTaskExitError+0x60>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f2:	d00d      	beq.n	8007a10 <prvTaskExitError+0x30>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	b672      	cpsid	i
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	b662      	cpsie	i
 8007a08:	60fb      	str	r3, [r7, #12]
}
 8007a0a:	bf00      	nop
 8007a0c:	bf00      	nop
 8007a0e:	e7fd      	b.n	8007a0c <prvTaskExitError+0x2c>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a14:	b672      	cpsid	i
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	b662      	cpsie	i
 8007a24:	60bb      	str	r3, [r7, #8]
}
 8007a26:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a28:	bf00      	nop
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0fc      	beq.n	8007a2a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	2000000c 	.word	0x2000000c
	...

08007a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a50:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <pxCurrentTCBConst2>)
 8007a52:	6819      	ldr	r1, [r3, #0]
 8007a54:	6808      	ldr	r0, [r1, #0]
 8007a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5a:	f380 8809 	msr	PSP, r0
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f04f 0000 	mov.w	r0, #0
 8007a66:	f380 8811 	msr	BASEPRI, r0
 8007a6a:	4770      	bx	lr
 8007a6c:	f3af 8000 	nop.w

08007a70 <pxCurrentTCBConst2>:
 8007a70:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop

08007a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a78:	4808      	ldr	r0, [pc, #32]	@ (8007a9c <prvPortStartFirstTask+0x24>)
 8007a7a:	6800      	ldr	r0, [r0, #0]
 8007a7c:	6800      	ldr	r0, [r0, #0]
 8007a7e:	f380 8808 	msr	MSP, r0
 8007a82:	f04f 0000 	mov.w	r0, #0
 8007a86:	f380 8814 	msr	CONTROL, r0
 8007a8a:	b662      	cpsie	i
 8007a8c:	b661      	cpsie	f
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	df00      	svc	0
 8007a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a9a:	bf00      	nop
 8007a9c:	e000ed08 	.word	0xe000ed08

08007aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007aa6:	4b37      	ldr	r3, [pc, #220]	@ (8007b84 <xPortStartScheduler+0xe4>)
 8007aa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	22ff      	movs	r2, #255	@ 0xff
 8007ab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	4b2f      	ldr	r3, [pc, #188]	@ (8007b88 <xPortStartScheduler+0xe8>)
 8007acc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ace:	4b2f      	ldr	r3, [pc, #188]	@ (8007b8c <xPortStartScheduler+0xec>)
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ad4:	e009      	b.n	8007aea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8007b8c <xPortStartScheduler+0xec>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	4a2b      	ldr	r2, [pc, #172]	@ (8007b8c <xPortStartScheduler+0xec>)
 8007ade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ae0:	78fb      	ldrb	r3, [r7, #3]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aea:	78fb      	ldrb	r3, [r7, #3]
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af2:	2b80      	cmp	r3, #128	@ 0x80
 8007af4:	d0ef      	beq.n	8007ad6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007af6:	4b25      	ldr	r3, [pc, #148]	@ (8007b8c <xPortStartScheduler+0xec>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f1c3 0307 	rsb	r3, r3, #7
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d00d      	beq.n	8007b1e <xPortStartScheduler+0x7e>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b06:	b672      	cpsid	i
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	b662      	cpsie	i
 8007b16:	60bb      	str	r3, [r7, #8]
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	e7fd      	b.n	8007b1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8007b8c <xPortStartScheduler+0xec>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	4a19      	ldr	r2, [pc, #100]	@ (8007b8c <xPortStartScheduler+0xec>)
 8007b26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b28:	4b18      	ldr	r3, [pc, #96]	@ (8007b8c <xPortStartScheduler+0xec>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b30:	4a16      	ldr	r2, [pc, #88]	@ (8007b8c <xPortStartScheduler+0xec>)
 8007b32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b3c:	4b14      	ldr	r3, [pc, #80]	@ (8007b90 <xPortStartScheduler+0xf0>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a13      	ldr	r2, [pc, #76]	@ (8007b90 <xPortStartScheduler+0xf0>)
 8007b42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b48:	4b11      	ldr	r3, [pc, #68]	@ (8007b90 <xPortStartScheduler+0xf0>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a10      	ldr	r2, [pc, #64]	@ (8007b90 <xPortStartScheduler+0xf0>)
 8007b4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b54:	f000 f8dc 	bl	8007d10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b58:	4b0e      	ldr	r3, [pc, #56]	@ (8007b94 <xPortStartScheduler+0xf4>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b5e:	f000 f8fb 	bl	8007d58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b62:	4b0d      	ldr	r3, [pc, #52]	@ (8007b98 <xPortStartScheduler+0xf8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a0c      	ldr	r2, [pc, #48]	@ (8007b98 <xPortStartScheduler+0xf8>)
 8007b68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007b6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b6e:	f7ff ff83 	bl	8007a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b72:	f7fe ff23 	bl	80069bc <vTaskSwitchContext>
	prvTaskExitError();
 8007b76:	f7ff ff33 	bl	80079e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	e000e400 	.word	0xe000e400
 8007b88:	20001638 	.word	0x20001638
 8007b8c:	2000163c 	.word	0x2000163c
 8007b90:	e000ed20 	.word	0xe000ed20
 8007b94:	2000000c 	.word	0x2000000c
 8007b98:	e000ef34 	.word	0xe000ef34

08007b9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba6:	b672      	cpsid	i
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	b662      	cpsie	i
 8007bb6:	607b      	str	r3, [r7, #4]
}
 8007bb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bba:	4b11      	ldr	r3, [pc, #68]	@ (8007c00 <vPortEnterCritical+0x64>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	4a0f      	ldr	r2, [pc, #60]	@ (8007c00 <vPortEnterCritical+0x64>)
 8007bc2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8007c00 <vPortEnterCritical+0x64>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d112      	bne.n	8007bf2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <vPortEnterCritical+0x68>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00d      	beq.n	8007bf2 <vPortEnterCritical+0x56>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bda:	b672      	cpsid	i
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	b662      	cpsie	i
 8007bea:	603b      	str	r3, [r7, #0]
}
 8007bec:	bf00      	nop
 8007bee:	bf00      	nop
 8007bf0:	e7fd      	b.n	8007bee <vPortEnterCritical+0x52>
	}
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	2000000c 	.word	0x2000000c
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c0e:	4b13      	ldr	r3, [pc, #76]	@ (8007c5c <vPortExitCritical+0x54>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10d      	bne.n	8007c32 <vPortExitCritical+0x2a>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1a:	b672      	cpsid	i
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	b662      	cpsie	i
 8007c2a:	607b      	str	r3, [r7, #4]
}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	e7fd      	b.n	8007c2e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007c32:	4b0a      	ldr	r3, [pc, #40]	@ (8007c5c <vPortExitCritical+0x54>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	4a08      	ldr	r2, [pc, #32]	@ (8007c5c <vPortExitCritical+0x54>)
 8007c3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c3c:	4b07      	ldr	r3, [pc, #28]	@ (8007c5c <vPortExitCritical+0x54>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d105      	bne.n	8007c50 <vPortExitCritical+0x48>
 8007c44:	2300      	movs	r3, #0
 8007c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	f383 8811 	msr	BASEPRI, r3
}
 8007c4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	2000000c 	.word	0x2000000c

08007c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c60:	f3ef 8009 	mrs	r0, PSP
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	4b15      	ldr	r3, [pc, #84]	@ (8007cc0 <pxCurrentTCBConst>)
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	f01e 0f10 	tst.w	lr, #16
 8007c70:	bf08      	it	eq
 8007c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7a:	6010      	str	r0, [r2, #0]
 8007c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c84:	b672      	cpsid	i
 8007c86:	f380 8811 	msr	BASEPRI, r0
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	b662      	cpsie	i
 8007c94:	f7fe fe92 	bl	80069bc <vTaskSwitchContext>
 8007c98:	f04f 0000 	mov.w	r0, #0
 8007c9c:	f380 8811 	msr	BASEPRI, r0
 8007ca0:	bc09      	pop	{r0, r3}
 8007ca2:	6819      	ldr	r1, [r3, #0]
 8007ca4:	6808      	ldr	r0, [r1, #0]
 8007ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007caa:	f01e 0f10 	tst.w	lr, #16
 8007cae:	bf08      	it	eq
 8007cb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cb4:	f380 8809 	msr	PSP, r0
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop

08007cc0 <pxCurrentTCBConst>:
 8007cc0:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop

08007cc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	b672      	cpsid	i
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	b662      	cpsie	i
 8007ce2:	607b      	str	r3, [r7, #4]
}
 8007ce4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ce6:	f7fe fdad 	bl	8006844 <xTaskIncrementTick>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cf0:	4b06      	ldr	r3, [pc, #24]	@ (8007d0c <SysTick_Handler+0x44>)
 8007cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cf6:	601a      	str	r2, [r3, #0]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	f383 8811 	msr	BASEPRI, r3
}
 8007d02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d04:	bf00      	nop
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	e000ed04 	.word	0xe000ed04

08007d10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d14:	4b0b      	ldr	r3, [pc, #44]	@ (8007d44 <vPortSetupTimerInterrupt+0x34>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d48 <vPortSetupTimerInterrupt+0x38>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d20:	4b0a      	ldr	r3, [pc, #40]	@ (8007d4c <vPortSetupTimerInterrupt+0x3c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a0a      	ldr	r2, [pc, #40]	@ (8007d50 <vPortSetupTimerInterrupt+0x40>)
 8007d26:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2a:	099b      	lsrs	r3, r3, #6
 8007d2c:	4a09      	ldr	r2, [pc, #36]	@ (8007d54 <vPortSetupTimerInterrupt+0x44>)
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d32:	4b04      	ldr	r3, [pc, #16]	@ (8007d44 <vPortSetupTimerInterrupt+0x34>)
 8007d34:	2207      	movs	r2, #7
 8007d36:	601a      	str	r2, [r3, #0]
}
 8007d38:	bf00      	nop
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	e000e010 	.word	0xe000e010
 8007d48:	e000e018 	.word	0xe000e018
 8007d4c:	20000000 	.word	0x20000000
 8007d50:	10624dd3 	.word	0x10624dd3
 8007d54:	e000e014 	.word	0xe000e014

08007d58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007d68 <vPortEnableVFP+0x10>
 8007d5c:	6801      	ldr	r1, [r0, #0]
 8007d5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007d62:	6001      	str	r1, [r0, #0]
 8007d64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d66:	bf00      	nop
 8007d68:	e000ed88 	.word	0xe000ed88

08007d6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d72:	f3ef 8305 	mrs	r3, IPSR
 8007d76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b0f      	cmp	r3, #15
 8007d7c:	d917      	bls.n	8007dae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007de8 <vPortValidateInterruptPriority+0x7c>)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d88:	4b18      	ldr	r3, [pc, #96]	@ (8007dec <vPortValidateInterruptPriority+0x80>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	7afa      	ldrb	r2, [r7, #11]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d20d      	bcs.n	8007dae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d96:	b672      	cpsid	i
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	b662      	cpsie	i
 8007da6:	607b      	str	r3, [r7, #4]
}
 8007da8:	bf00      	nop
 8007daa:	bf00      	nop
 8007dac:	e7fd      	b.n	8007daa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007dae:	4b10      	ldr	r3, [pc, #64]	@ (8007df0 <vPortValidateInterruptPriority+0x84>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007db6:	4b0f      	ldr	r3, [pc, #60]	@ (8007df4 <vPortValidateInterruptPriority+0x88>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d90d      	bls.n	8007dda <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc2:	b672      	cpsid	i
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	b662      	cpsie	i
 8007dd2:	603b      	str	r3, [r7, #0]
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop
 8007dd8:	e7fd      	b.n	8007dd6 <vPortValidateInterruptPriority+0x6a>
	}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	e000e3f0 	.word	0xe000e3f0
 8007dec:	20001638 	.word	0x20001638
 8007df0:	e000ed0c 	.word	0xe000ed0c
 8007df4:	2000163c 	.word	0x2000163c

08007df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08a      	sub	sp, #40	@ 0x28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e00:	2300      	movs	r3, #0
 8007e02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e04:	f7fe fc60 	bl	80066c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e08:	4b5d      	ldr	r3, [pc, #372]	@ (8007f80 <pvPortMalloc+0x188>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e10:	f000 f920 	bl	8008054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e14:	4b5b      	ldr	r3, [pc, #364]	@ (8007f84 <pvPortMalloc+0x18c>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f040 8094 	bne.w	8007f4a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d020      	beq.n	8007e6a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007e28:	2208      	movs	r2, #8
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d017      	beq.n	8007e6a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f023 0307 	bic.w	r3, r3, #7
 8007e40:	3308      	adds	r3, #8
 8007e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00d      	beq.n	8007e6a <pvPortMalloc+0x72>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e52:	b672      	cpsid	i
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	b662      	cpsie	i
 8007e62:	617b      	str	r3, [r7, #20]
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	e7fd      	b.n	8007e66 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d06c      	beq.n	8007f4a <pvPortMalloc+0x152>
 8007e70:	4b45      	ldr	r3, [pc, #276]	@ (8007f88 <pvPortMalloc+0x190>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d867      	bhi.n	8007f4a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e7a:	4b44      	ldr	r3, [pc, #272]	@ (8007f8c <pvPortMalloc+0x194>)
 8007e7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e7e:	4b43      	ldr	r3, [pc, #268]	@ (8007f8c <pvPortMalloc+0x194>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e84:	e004      	b.n	8007e90 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d903      	bls.n	8007ea2 <pvPortMalloc+0xaa>
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1f1      	bne.n	8007e86 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ea2:	4b37      	ldr	r3, [pc, #220]	@ (8007f80 <pvPortMalloc+0x188>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d04e      	beq.n	8007f4a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	4413      	add	r3, r2
 8007eb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	1ad2      	subs	r2, r2, r3
 8007ec6:	2308      	movs	r3, #8
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d922      	bls.n	8007f14 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	f003 0307 	and.w	r3, r3, #7
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00d      	beq.n	8007efc <pvPortMalloc+0x104>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	b672      	cpsid	i
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	b662      	cpsie	i
 8007ef4:	613b      	str	r3, [r7, #16]
}
 8007ef6:	bf00      	nop
 8007ef8:	bf00      	nop
 8007efa:	e7fd      	b.n	8007ef8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	1ad2      	subs	r2, r2, r3
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f0e:	69b8      	ldr	r0, [r7, #24]
 8007f10:	f000 f902 	bl	8008118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f14:	4b1c      	ldr	r3, [pc, #112]	@ (8007f88 <pvPortMalloc+0x190>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8007f88 <pvPortMalloc+0x190>)
 8007f20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f22:	4b19      	ldr	r3, [pc, #100]	@ (8007f88 <pvPortMalloc+0x190>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	4b1a      	ldr	r3, [pc, #104]	@ (8007f90 <pvPortMalloc+0x198>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d203      	bcs.n	8007f36 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f2e:	4b16      	ldr	r3, [pc, #88]	@ (8007f88 <pvPortMalloc+0x190>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a17      	ldr	r2, [pc, #92]	@ (8007f90 <pvPortMalloc+0x198>)
 8007f34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	4b12      	ldr	r3, [pc, #72]	@ (8007f84 <pvPortMalloc+0x18c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f4a:	f7fe fbcb 	bl	80066e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	f003 0307 	and.w	r3, r3, #7
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00d      	beq.n	8007f74 <pvPortMalloc+0x17c>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5c:	b672      	cpsid	i
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	b662      	cpsie	i
 8007f6c:	60fb      	str	r3, [r7, #12]
}
 8007f6e:	bf00      	nop
 8007f70:	bf00      	nop
 8007f72:	e7fd      	b.n	8007f70 <pvPortMalloc+0x178>
	return pvReturn;
 8007f74:	69fb      	ldr	r3, [r7, #28]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3728      	adds	r7, #40	@ 0x28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20005248 	.word	0x20005248
 8007f84:	20005254 	.word	0x20005254
 8007f88:	2000524c 	.word	0x2000524c
 8007f8c:	20005240 	.word	0x20005240
 8007f90:	20005250 	.word	0x20005250

08007f94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d04e      	beq.n	8008044 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fa6:	2308      	movs	r3, #8
 8007fa8:	425b      	negs	r3, r3
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	4413      	add	r3, r2
 8007fae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	4b24      	ldr	r3, [pc, #144]	@ (800804c <vPortFree+0xb8>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10d      	bne.n	8007fde <vPortFree+0x4a>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc6:	b672      	cpsid	i
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	b662      	cpsie	i
 8007fd6:	60fb      	str	r3, [r7, #12]
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	e7fd      	b.n	8007fda <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00d      	beq.n	8008002 <vPortFree+0x6e>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fea:	b672      	cpsid	i
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	b662      	cpsie	i
 8007ffa:	60bb      	str	r3, [r7, #8]
}
 8007ffc:	bf00      	nop
 8007ffe:	bf00      	nop
 8008000:	e7fd      	b.n	8007ffe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	4b11      	ldr	r3, [pc, #68]	@ (800804c <vPortFree+0xb8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d019      	beq.n	8008044 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d115      	bne.n	8008044 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	4b0b      	ldr	r3, [pc, #44]	@ (800804c <vPortFree+0xb8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	43db      	mvns	r3, r3
 8008022:	401a      	ands	r2, r3
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008028:	f7fe fb4e 	bl	80066c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	4b07      	ldr	r3, [pc, #28]	@ (8008050 <vPortFree+0xbc>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4413      	add	r3, r2
 8008036:	4a06      	ldr	r2, [pc, #24]	@ (8008050 <vPortFree+0xbc>)
 8008038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800803a:	6938      	ldr	r0, [r7, #16]
 800803c:	f000 f86c 	bl	8008118 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008040:	f7fe fb50 	bl	80066e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008044:	bf00      	nop
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20005254 	.word	0x20005254
 8008050:	2000524c 	.word	0x2000524c

08008054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800805a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800805e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008060:	4b27      	ldr	r3, [pc, #156]	@ (8008100 <prvHeapInit+0xac>)
 8008062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00c      	beq.n	8008088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3307      	adds	r3, #7
 8008072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0307 	bic.w	r3, r3, #7
 800807a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	4a1f      	ldr	r2, [pc, #124]	@ (8008100 <prvHeapInit+0xac>)
 8008084:	4413      	add	r3, r2
 8008086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800808c:	4a1d      	ldr	r2, [pc, #116]	@ (8008104 <prvHeapInit+0xb0>)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008092:	4b1c      	ldr	r3, [pc, #112]	@ (8008104 <prvHeapInit+0xb0>)
 8008094:	2200      	movs	r2, #0
 8008096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	4413      	add	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080a0:	2208      	movs	r2, #8
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	1a9b      	subs	r3, r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0307 	bic.w	r3, r3, #7
 80080ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4a15      	ldr	r2, [pc, #84]	@ (8008108 <prvHeapInit+0xb4>)
 80080b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080b6:	4b14      	ldr	r3, [pc, #80]	@ (8008108 <prvHeapInit+0xb4>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2200      	movs	r2, #0
 80080bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080be:	4b12      	ldr	r3, [pc, #72]	@ (8008108 <prvHeapInit+0xb4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	1ad2      	subs	r2, r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008108 <prvHeapInit+0xb4>)
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	4a0a      	ldr	r2, [pc, #40]	@ (800810c <prvHeapInit+0xb8>)
 80080e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	4a09      	ldr	r2, [pc, #36]	@ (8008110 <prvHeapInit+0xbc>)
 80080ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080ec:	4b09      	ldr	r3, [pc, #36]	@ (8008114 <prvHeapInit+0xc0>)
 80080ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80080f2:	601a      	str	r2, [r3, #0]
}
 80080f4:	bf00      	nop
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	20001640 	.word	0x20001640
 8008104:	20005240 	.word	0x20005240
 8008108:	20005248 	.word	0x20005248
 800810c:	20005250 	.word	0x20005250
 8008110:	2000524c 	.word	0x2000524c
 8008114:	20005254 	.word	0x20005254

08008118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008120:	4b28      	ldr	r3, [pc, #160]	@ (80081c4 <prvInsertBlockIntoFreeList+0xac>)
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	e002      	b.n	800812c <prvInsertBlockIntoFreeList+0x14>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	429a      	cmp	r2, r3
 8008134:	d8f7      	bhi.n	8008126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	4413      	add	r3, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	429a      	cmp	r2, r3
 8008146:	d108      	bne.n	800815a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	441a      	add	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	441a      	add	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	429a      	cmp	r2, r3
 800816c:	d118      	bne.n	80081a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4b15      	ldr	r3, [pc, #84]	@ (80081c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	429a      	cmp	r2, r3
 8008178:	d00d      	beq.n	8008196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	441a      	add	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	e008      	b.n	80081a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008196:	4b0c      	ldr	r3, [pc, #48]	@ (80081c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e003      	b.n	80081a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d002      	beq.n	80081b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081b6:	bf00      	nop
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	20005240 	.word	0x20005240
 80081c8:	20005248 	.word	0x20005248

080081cc <memset>:
 80081cc:	4402      	add	r2, r0
 80081ce:	4603      	mov	r3, r0
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d100      	bne.n	80081d6 <memset+0xa>
 80081d4:	4770      	bx	lr
 80081d6:	f803 1b01 	strb.w	r1, [r3], #1
 80081da:	e7f9      	b.n	80081d0 <memset+0x4>

080081dc <_reclaim_reent>:
 80081dc:	4b2d      	ldr	r3, [pc, #180]	@ (8008294 <_reclaim_reent+0xb8>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4283      	cmp	r3, r0
 80081e2:	b570      	push	{r4, r5, r6, lr}
 80081e4:	4604      	mov	r4, r0
 80081e6:	d053      	beq.n	8008290 <_reclaim_reent+0xb4>
 80081e8:	69c3      	ldr	r3, [r0, #28]
 80081ea:	b31b      	cbz	r3, 8008234 <_reclaim_reent+0x58>
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	b163      	cbz	r3, 800820a <_reclaim_reent+0x2e>
 80081f0:	2500      	movs	r5, #0
 80081f2:	69e3      	ldr	r3, [r4, #28]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	5959      	ldr	r1, [r3, r5]
 80081f8:	b9b1      	cbnz	r1, 8008228 <_reclaim_reent+0x4c>
 80081fa:	3504      	adds	r5, #4
 80081fc:	2d80      	cmp	r5, #128	@ 0x80
 80081fe:	d1f8      	bne.n	80081f2 <_reclaim_reent+0x16>
 8008200:	69e3      	ldr	r3, [r4, #28]
 8008202:	4620      	mov	r0, r4
 8008204:	68d9      	ldr	r1, [r3, #12]
 8008206:	f000 f87b 	bl	8008300 <_free_r>
 800820a:	69e3      	ldr	r3, [r4, #28]
 800820c:	6819      	ldr	r1, [r3, #0]
 800820e:	b111      	cbz	r1, 8008216 <_reclaim_reent+0x3a>
 8008210:	4620      	mov	r0, r4
 8008212:	f000 f875 	bl	8008300 <_free_r>
 8008216:	69e3      	ldr	r3, [r4, #28]
 8008218:	689d      	ldr	r5, [r3, #8]
 800821a:	b15d      	cbz	r5, 8008234 <_reclaim_reent+0x58>
 800821c:	4629      	mov	r1, r5
 800821e:	4620      	mov	r0, r4
 8008220:	682d      	ldr	r5, [r5, #0]
 8008222:	f000 f86d 	bl	8008300 <_free_r>
 8008226:	e7f8      	b.n	800821a <_reclaim_reent+0x3e>
 8008228:	680e      	ldr	r6, [r1, #0]
 800822a:	4620      	mov	r0, r4
 800822c:	f000 f868 	bl	8008300 <_free_r>
 8008230:	4631      	mov	r1, r6
 8008232:	e7e1      	b.n	80081f8 <_reclaim_reent+0x1c>
 8008234:	6961      	ldr	r1, [r4, #20]
 8008236:	b111      	cbz	r1, 800823e <_reclaim_reent+0x62>
 8008238:	4620      	mov	r0, r4
 800823a:	f000 f861 	bl	8008300 <_free_r>
 800823e:	69e1      	ldr	r1, [r4, #28]
 8008240:	b111      	cbz	r1, 8008248 <_reclaim_reent+0x6c>
 8008242:	4620      	mov	r0, r4
 8008244:	f000 f85c 	bl	8008300 <_free_r>
 8008248:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800824a:	b111      	cbz	r1, 8008252 <_reclaim_reent+0x76>
 800824c:	4620      	mov	r0, r4
 800824e:	f000 f857 	bl	8008300 <_free_r>
 8008252:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008254:	b111      	cbz	r1, 800825c <_reclaim_reent+0x80>
 8008256:	4620      	mov	r0, r4
 8008258:	f000 f852 	bl	8008300 <_free_r>
 800825c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800825e:	b111      	cbz	r1, 8008266 <_reclaim_reent+0x8a>
 8008260:	4620      	mov	r0, r4
 8008262:	f000 f84d 	bl	8008300 <_free_r>
 8008266:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008268:	b111      	cbz	r1, 8008270 <_reclaim_reent+0x94>
 800826a:	4620      	mov	r0, r4
 800826c:	f000 f848 	bl	8008300 <_free_r>
 8008270:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008272:	b111      	cbz	r1, 800827a <_reclaim_reent+0x9e>
 8008274:	4620      	mov	r0, r4
 8008276:	f000 f843 	bl	8008300 <_free_r>
 800827a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800827c:	b111      	cbz	r1, 8008284 <_reclaim_reent+0xa8>
 800827e:	4620      	mov	r0, r4
 8008280:	f000 f83e 	bl	8008300 <_free_r>
 8008284:	6a23      	ldr	r3, [r4, #32]
 8008286:	b11b      	cbz	r3, 8008290 <_reclaim_reent+0xb4>
 8008288:	4620      	mov	r0, r4
 800828a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800828e:	4718      	bx	r3
 8008290:	bd70      	pop	{r4, r5, r6, pc}
 8008292:	bf00      	nop
 8008294:	20000010 	.word	0x20000010

08008298 <__libc_init_array>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4d0d      	ldr	r5, [pc, #52]	@ (80082d0 <__libc_init_array+0x38>)
 800829c:	4c0d      	ldr	r4, [pc, #52]	@ (80082d4 <__libc_init_array+0x3c>)
 800829e:	1b64      	subs	r4, r4, r5
 80082a0:	10a4      	asrs	r4, r4, #2
 80082a2:	2600      	movs	r6, #0
 80082a4:	42a6      	cmp	r6, r4
 80082a6:	d109      	bne.n	80082bc <__libc_init_array+0x24>
 80082a8:	4d0b      	ldr	r5, [pc, #44]	@ (80082d8 <__libc_init_array+0x40>)
 80082aa:	4c0c      	ldr	r4, [pc, #48]	@ (80082dc <__libc_init_array+0x44>)
 80082ac:	f000 f87e 	bl	80083ac <_init>
 80082b0:	1b64      	subs	r4, r4, r5
 80082b2:	10a4      	asrs	r4, r4, #2
 80082b4:	2600      	movs	r6, #0
 80082b6:	42a6      	cmp	r6, r4
 80082b8:	d105      	bne.n	80082c6 <__libc_init_array+0x2e>
 80082ba:	bd70      	pop	{r4, r5, r6, pc}
 80082bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c0:	4798      	blx	r3
 80082c2:	3601      	adds	r6, #1
 80082c4:	e7ee      	b.n	80082a4 <__libc_init_array+0xc>
 80082c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ca:	4798      	blx	r3
 80082cc:	3601      	adds	r6, #1
 80082ce:	e7f2      	b.n	80082b6 <__libc_init_array+0x1e>
 80082d0:	08008500 	.word	0x08008500
 80082d4:	08008500 	.word	0x08008500
 80082d8:	08008500 	.word	0x08008500
 80082dc:	08008504 	.word	0x08008504

080082e0 <__retarget_lock_acquire_recursive>:
 80082e0:	4770      	bx	lr

080082e2 <__retarget_lock_release_recursive>:
 80082e2:	4770      	bx	lr

080082e4 <memcpy>:
 80082e4:	440a      	add	r2, r1
 80082e6:	4291      	cmp	r1, r2
 80082e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082ec:	d100      	bne.n	80082f0 <memcpy+0xc>
 80082ee:	4770      	bx	lr
 80082f0:	b510      	push	{r4, lr}
 80082f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082fa:	4291      	cmp	r1, r2
 80082fc:	d1f9      	bne.n	80082f2 <memcpy+0xe>
 80082fe:	bd10      	pop	{r4, pc}

08008300 <_free_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4605      	mov	r5, r0
 8008304:	2900      	cmp	r1, #0
 8008306:	d041      	beq.n	800838c <_free_r+0x8c>
 8008308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800830c:	1f0c      	subs	r4, r1, #4
 800830e:	2b00      	cmp	r3, #0
 8008310:	bfb8      	it	lt
 8008312:	18e4      	addlt	r4, r4, r3
 8008314:	f000 f83e 	bl	8008394 <__malloc_lock>
 8008318:	4a1d      	ldr	r2, [pc, #116]	@ (8008390 <_free_r+0x90>)
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	b933      	cbnz	r3, 800832c <_free_r+0x2c>
 800831e:	6063      	str	r3, [r4, #4]
 8008320:	6014      	str	r4, [r2, #0]
 8008322:	4628      	mov	r0, r5
 8008324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008328:	f000 b83a 	b.w	80083a0 <__malloc_unlock>
 800832c:	42a3      	cmp	r3, r4
 800832e:	d908      	bls.n	8008342 <_free_r+0x42>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	1821      	adds	r1, r4, r0
 8008334:	428b      	cmp	r3, r1
 8008336:	bf01      	itttt	eq
 8008338:	6819      	ldreq	r1, [r3, #0]
 800833a:	685b      	ldreq	r3, [r3, #4]
 800833c:	1809      	addeq	r1, r1, r0
 800833e:	6021      	streq	r1, [r4, #0]
 8008340:	e7ed      	b.n	800831e <_free_r+0x1e>
 8008342:	461a      	mov	r2, r3
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	b10b      	cbz	r3, 800834c <_free_r+0x4c>
 8008348:	42a3      	cmp	r3, r4
 800834a:	d9fa      	bls.n	8008342 <_free_r+0x42>
 800834c:	6811      	ldr	r1, [r2, #0]
 800834e:	1850      	adds	r0, r2, r1
 8008350:	42a0      	cmp	r0, r4
 8008352:	d10b      	bne.n	800836c <_free_r+0x6c>
 8008354:	6820      	ldr	r0, [r4, #0]
 8008356:	4401      	add	r1, r0
 8008358:	1850      	adds	r0, r2, r1
 800835a:	4283      	cmp	r3, r0
 800835c:	6011      	str	r1, [r2, #0]
 800835e:	d1e0      	bne.n	8008322 <_free_r+0x22>
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	6053      	str	r3, [r2, #4]
 8008366:	4408      	add	r0, r1
 8008368:	6010      	str	r0, [r2, #0]
 800836a:	e7da      	b.n	8008322 <_free_r+0x22>
 800836c:	d902      	bls.n	8008374 <_free_r+0x74>
 800836e:	230c      	movs	r3, #12
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	e7d6      	b.n	8008322 <_free_r+0x22>
 8008374:	6820      	ldr	r0, [r4, #0]
 8008376:	1821      	adds	r1, r4, r0
 8008378:	428b      	cmp	r3, r1
 800837a:	bf04      	itt	eq
 800837c:	6819      	ldreq	r1, [r3, #0]
 800837e:	685b      	ldreq	r3, [r3, #4]
 8008380:	6063      	str	r3, [r4, #4]
 8008382:	bf04      	itt	eq
 8008384:	1809      	addeq	r1, r1, r0
 8008386:	6021      	streq	r1, [r4, #0]
 8008388:	6054      	str	r4, [r2, #4]
 800838a:	e7ca      	b.n	8008322 <_free_r+0x22>
 800838c:	bd38      	pop	{r3, r4, r5, pc}
 800838e:	bf00      	nop
 8008390:	20005394 	.word	0x20005394

08008394 <__malloc_lock>:
 8008394:	4801      	ldr	r0, [pc, #4]	@ (800839c <__malloc_lock+0x8>)
 8008396:	f7ff bfa3 	b.w	80082e0 <__retarget_lock_acquire_recursive>
 800839a:	bf00      	nop
 800839c:	20005390 	.word	0x20005390

080083a0 <__malloc_unlock>:
 80083a0:	4801      	ldr	r0, [pc, #4]	@ (80083a8 <__malloc_unlock+0x8>)
 80083a2:	f7ff bf9e 	b.w	80082e2 <__retarget_lock_release_recursive>
 80083a6:	bf00      	nop
 80083a8:	20005390 	.word	0x20005390

080083ac <_init>:
 80083ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ae:	bf00      	nop
 80083b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b2:	bc08      	pop	{r3}
 80083b4:	469e      	mov	lr, r3
 80083b6:	4770      	bx	lr

080083b8 <_fini>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	bf00      	nop
 80083bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083be:	bc08      	pop	{r3}
 80083c0:	469e      	mov	lr, r3
 80083c2:	4770      	bx	lr
